name: project_windows

packages:
  - packages/**

command:
  bootstrap:
    # https://github.com/dart-lang/pub/issues/3404)
    runPubGetInParallel: false
    # hooks:
      # post: melos run setup-pre-commit-hook
  clean:
    hooks:
      post: melos exec -c 3 -- "flutter clean"
        # rm -r node_modules && \
        # rm commitlint.config.js && \
        # rm package-lock.json && \
        # rm package.json && \
        # melos exec -c 3 -- "flutter clean"

ide:
  intellij: false

scripts:
  # setup-pre-commit-hook:
  #   run: |
  #     npm install --save-dev @commitlint/{cli,config-conventional} && \
  #     echo "module.exports = { extends: ['@commitlint/config-conventional'] };" > commitlint.config.js && \
  #     npm install husky --save-dev
  #     npx husky install
  #   description: |
  #     Set up pre commit hook to ensure Conventional Commits (https://www.conventionalcommits.org/en/v1.0.0/) via commitlint (https://www.npmjs.com/package/commitlint).
  #     - Requires `node` (can be installed via Brew on macOS).

  analyze:
    run: flutter analyze
    description: Analyze all packages.

  format:
    run: dart format . --fix
    description: Format all packages.

  build:all:
    run: melos run build --no-select
    description: Run code gen in all packages.

  build:
    exec: flutter pub run build_runner build --delete-conflicting-outputs
    description: Run code gen in a package.
    packageFilters:
      dependsOn:
        - build_runner

  gen-l10n:all:
    run: melos run gen-l10n --no-select
    description: (Re)-generate localizations in all packages.

  gen-l10n:
    exec: flutter gen-l10n --format
    description: (Re)-generate localizations in a package.
    packageFilters:
      dependsOn:
        - flutter_localizations
        - intl

  coverage:all:
    run: melos run coverage --no-select
    description: Print coverage of all packages.

  coverage:
    exec: |
      remove_from_coverage -f MELOS_PACKAGE_PATH/coverage/lcov.info -r '.freezed.dart$' -r '.g.dart$' -r '.config.dart$' -r '.module.dart$' -r '_localizations.dart$' -r '_localizations_[a-z]+.dart$' -r '.gr.dart$' -r '.tailor.dart$' && \
      test_cov_console -t
    description: Print coverage of a package.
    packageFilters:
      fileExists:
        - coverage/lcov.info

  test:unit:all:
    run: |
      melos run test:unit:di --no-select && \
      melos run test:unit:logging --no-select && \
      melos run test:unit:domain --no-select && \
      melos run test:unit:infrastructure --no-select && \
      melos run test:unit:ui --no-select && \
      melos run test:unit:android --no-select && \
      melos run test:unit:ios --no-select && \
      melos run test:unit:linux --no-select && \
      melos run test:unit:macos --no-select && \
      melos run test:unit:web --no-select && \
      melos run test:unit:windows --no-select
    description: |
      Run all unit + widget tests available.

  test:unit:di:
    exec: flutter test
    description: Run `flutter test` in the dependency injection package.
    packageFilters:
      scope: "project_windows_di"
      dirExists:
        - test

  test:unit:logging:
    exec: flutter test
    description: Run `flutter test` in the logging package.
    packageFilters:
      scope: "project_windows_logging"
      dirExists:
        - test

  test:unit:domain:
    exec: flutter test
    description: Run `flutter test` in the domain package.
    packageFilters:
      scope: "project_windows_domain"
      dirExists:
        - test

  test:unit:infrastructure:
    exec: flutter test
    description: Run `flutter test` in the infrastructure package.
    packageFilters:
      scope: "project_windows_infrastructure"
      dirExists:
        - test

  test:unit:ui:
    exec: flutter test
    description: Run `flutter test` in the platform independent ui package.
    packageFilters:
      scope: "project_windows_ui*"
      dirExists:
        - test

  test:unit:android:
    exec: flutter test
    description: Run `flutter test` in all Android packages.
    packageFilters:
      scope: "*android*"
      dirExists:
        - test

  test:unit:ios:
    exec: flutter test
    description: Run `flutter test` in all iOS packages.
    packageFilters:
      scope: "*ios*"
      dirExists:
        - test

  test:unit:linux:
    exec: flutter test
    description: Run `flutter test` in all Linux packages.
    packageFilters:
      scope: "*linux*"
      dirExists:
        - test

  test:unit:macos:
    exec: flutter test
    description: Run `flutter test` in all macOS packages.
    packageFilters:
      scope: "*macos*"
      dirExists:
        - test

  test:unit:web:
    exec: flutter test
    description: Run `flutter test` in all Web packages.
    packageFilters:
      scope: "*web*"
      dirExists:
        - test

  test:unit:windows:
    exec: flutter test
    description: Run `flutter test` in all Windows packages.
    packageFilters:
      scope: "*windows*"
      dirExists:
        - test

  test:unit:all:coverage:
    run: |
      melos run test:unit:di:coverage --no-select && \
      melos run test:unit:logging:coverage --no-select && \
      melos run test:unit:domain:coverage --no-select && \
      melos run test:unit:infrastructure:coverage --no-select && \
      melos run test:unit:ui:coverage --no-select && \
      melos run test:unit:android:coverage --no-select && \
      melos run test:unit:ios:coverage --no-select && \
      melos run test:unit:linux:coverage --no-select && \
      melos run test:unit:macos:coverage --no-select && \
      melos run test:unit:web:coverage --no-select && \
      melos run test:unit:windows:coverage --no-select
    description: Run all unit + widget tests available with coverage.

  test:unit:di:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in the dependency injection package.
    packageFilters:
      scope: "project_windows_di"
      dirExists:
        - test

  test:unit:logging:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in the logging package.
    packageFilters:
      scope: "project_windows_logging"
      dirExists:
        - test

  test:unit:domain:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in the domain package.
    packageFilters:
      scope: "project_windows_domain"
      dirExists:
        - test

  test:unit:infrastructure:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in the infrastructure package.
    packageFilters:
      scope: "project_windows_infrastructure"
      dirExists:
        - test

  test:unit:ui:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in the platform independent ui package.
    packageFilters:
      scope: "project_windows_ui*"
      dirExists:
        - test

  test:unit:android:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all Android packages.
    packageFilters:
      scope: "*android*"
      dirExists:
        - test

  test:unit:ios:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all iOS packages.
    packageFilters:
      scope: "*ios*"
      dirExists:
        - test

  test:unit:linux:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all Linux packages.
    packageFilters:
      scope: "*linux*"
      dirExists:
        - test

  test:unit:macos:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all macOS packages.
    packageFilters:
      scope: "*macos*"
      dirExists:
        - test

  test:unit:web:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all Web packages.
    packageFilters:
      scope: "*web*"
      dirExists:
        - test

  test:unit:windows:coverage:
    exec: flutter test --coverage
    description: Run `flutter test --coverage` in all Windows packages.
    packageFilters:
      scope: "*windows*"
      dirExists:
        - test
