// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final platformUiPackageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCioqL2RvYy9hcGkvCioqL2lvcy9GbHV0dGVyLy5sYXN0X2J1aWxkX2lkCi5kYXJ0X3Rvb2wvCi5mbHV0dGVyLXBsdWdpbnMKLmZsdXR0ZXItcGx1Z2lucy1kZXBlbmRlbmNpZXMKLnBhY2thZ2VzCi5wdWItY2FjaGUvCi5wdWIvCi9idWlsZC8KL2NvdmVyYWdlCg==",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogLi4vLi4vLi4vYW5hbHlzaXNfb3B0aW9ucy55YW1sCiMgVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgc2VjdGlvbiB0byBzcGVjaWZ5IGFkZGl0aW9uYWwgcnVsZXMuCgojIGxpbnRlcjoKIyAgIHJ1bGVzOgojICAgICAtIGNhbWVsX2Nhc2VfdHlwZXMK",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4wLjEKCiogVE9ETzogRGVzY3JpYmUgaW5pdGlhbCByZWxlYXNlLgo=",
      "type": "text"
    },
    {
      "path": "dart_test.yaml",
      "data":
          "dGFnczoKICBidWlsZF92ZXJpZnk6CiAgICBza2lwOiAiQnVpbGQgdmVyaWZ5IHRlc3Qgc2hvdWxkIGJlIHJ1biBpbiBwYXJhbGxlbCB3aXRoIG90aGVyIHVuaXQgdGVzdHMiCiAgZ29sZGVuOgogICAgc2tpcDogZmFsc2U=",
      "type": "text"
    },
    {
      "path": "lib/src/app.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgppbXBvcnQgJ3NjYWZmb2xkX3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogICAgcmVxdWlyZWQgdGhpcy5ib2R5LAogIH0pOwoKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwoKICBmaW5hbCBXaWRnZXQgYm9keTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9IHRoaXMudGhlbWUgPz8gY29udGV4dC57e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19U2NhZmZvbGRUaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICBib2R5OiBib2R5LAogICAgKTsKICB9Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvY3VwZXJ0aW5vLmRhcnQnOwoKaW1wb3J0ICdzY2FmZm9sZF90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICAgIHJlcXVpcmVkIHRoaXMuYm9keSwKICB9KTsKCiAgZmluYWwge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lPyB0aGVtZTsKCiAgZmluYWwgV2lkZ2V0IGJvZHk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPSB0aGlzLnRoZW1lID8/IGNvbnRleHQue3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgcmV0dXJuIEN1cGVydGlub1BhZ2VTY2FmZm9sZCgKICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICAgIGNoaWxkOiBib2R5LAogICAgKTsKICB9Cn0Ke3svaW9zfX17eyNsaW51eH19CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKaW1wb3J0ICdzY2FmZm9sZF90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICAgIHJlcXVpcmVkIHRoaXMuYm9keSwKICB9KTsKCiAgZmluYWwge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lPyB0aGVtZTsKCiAgZmluYWwgV2lkZ2V0IGJvZHk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPSB0aGlzLnRoZW1lID8/IGNvbnRleHQue3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICAgYm9keTogYm9keSwKICAgICk7CiAgfQp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL2N1cGVydGluby5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1hY29zX3VpL21hY29zX3VpLmRhcnQnOwoKaW1wb3J0ICdzY2FmZm9sZF90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICAgIHJlcXVpcmVkIHRoaXMuY2hpbGRyZW4sCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT8gdGhlbWU7CgogIGZpbmFsIExpc3Q8V2lkZ2V0PiBjaGlsZHJlbjsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9IHRoaXMudGhlbWUgPz8gY29udGV4dC57e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19U2NhZmZvbGRUaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICAvLyBUT0RPOiBodHRwczovL2dpdGh1Yi5jb20vbWFjb3N1aS9tYWNvc191aS9pc3N1ZXMvNDI4CiAgICByZXR1cm4gTWFjb3NPdmVybGF5RmlsdGVyKAogICAgICBib3JkZXJSYWRpdXM6IEJvcmRlclJhZGl1cy56ZXJvLAogICAgICBjb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICBjaGlsZDogTWFjb3NTY2FmZm9sZCgKICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sCiAgICAgICksCiAgICApOwogIH0KfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgppbXBvcnQgJ3NjYWZmb2xkX3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogICAgcmVxdWlyZWQgdGhpcy5ib2R5LAogIH0pOwoKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwoKICBmaW5hbCBXaWRnZXQgYm9keTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9IHRoaXMudGhlbWUgPz8gY29udGV4dC57e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19U2NhZmZvbGRUaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICBib2R5OiBib2R5LAogICAgKTsKICB9Cn0Ke3svd2VifX17eyN3aW5kb3dzfX0KaW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7CgppbXBvcnQgJ3NjYWZmb2xkX3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogICByZXF1aXJlZCB0aGlzLmJvZHksCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT8gdGhlbWU7CgogIGZpbmFsIFdpZGdldCBib2R5OwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lOwogICAgZmluYWwgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZENvbG9yOwoKICAgIHJldHVybiBOYXZpZ2F0aW9uVmlldygKICAgICAgY29udGVudDogQ29sb3JlZEJveCgKICAgICAgICBjb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICAgIGNoaWxkOiBib2R5LAogICAgICApLAogICAgKTsKICB9Cn0Ke3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCmltcG9ydCAnc2NhZmZvbGRfdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkIGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgICByZXF1aXJlZCB0aGlzLmJvZHksCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT8gdGhlbWU7CgogIGZpbmFsIFdpZGdldCBib2R5OwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lOwogICAgZmluYWwgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZENvbG9yOwoKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICAgIGJvZHk6IGJvZHksCiAgICApOwogIH0KfQp7ey9tb2JpbGV9fQ==",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold_theme.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvZm91bmRhdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZSwgVGhlbWVFeHRlbnNpb247CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3NjYWZmb2xkX3RoZW1lLnRhaWxvci5kYXJ0JzsKCkBUYWlsb3IodGhlbWVHZXR0ZXI6IFRoZW1lR2V0dGVyLm9uQnVpbGRDb250ZXh0KQpjbGFzcyBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5saWdodC5wcmltYXJ5LAogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmRhcmsucHJpbWFyeSwKICBdOwp9Cnt7L2FuZHJvaWR9fXt7I2lvc319aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvZm91bmRhdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZSwgVGhlbWVFeHRlbnNpb247CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3NjYWZmb2xkX3RoZW1lLnRhaWxvci5kYXJ0JzsKCkBUYWlsb3IodGhlbWVHZXR0ZXI6IFRoZW1lR2V0dGVyLm9uQnVpbGRDb250ZXh0KQpjbGFzcyBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5saWdodC5wcmltYXJ5LAogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmRhcmsucHJpbWFyeSwKICBdOwp9Cnt7L2lvc319e3sjbGludXh9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWUsIFRoZW1lRXh0ZW5zaW9uOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICdzY2FmZm9sZF90aGVtZS50YWlsb3IuZGFydCc7CgpAVGFpbG9yKHRoZW1lR2V0dGVyOiBUaGVtZUdldHRlci5vbkJ1aWxkQ29udGV4dCkKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQucHJpbWFyeSwKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLnByaW1hcnksCiAgXTsKfQp7ey9saW51eH19e3sjbWFjb3N9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWUsIFRoZW1lRXh0ZW5zaW9uOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICdzY2FmZm9sZF90aGVtZS50YWlsb3IuZGFydCc7CgpAVGFpbG9yKHRoZW1lR2V0dGVyOiBUaGVtZUdldHRlci5vbkJ1aWxkQ29udGV4dCkKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQucHJpbWFyeSwKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLnByaW1hcnksCiAgXTsKfQp7ey9tYWNvc319e3sjd2VifX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWkve3twcm9qZWN0X25hbWV9fV91aS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAnc2NhZmZvbGRfdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5LAogIF07Cn0Ke3svd2VifX17eyN3aW5kb3dzfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1ZW50X3VpL2ZsdWVudF91aS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvZm91bmRhdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWkve3twcm9qZWN0X25hbWV9fV91aS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAnc2NhZmZvbGRfdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5LAogIF07Cn0KCi8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9JdGVvL3RoZW1lX3RhaWxvci9pc3N1ZXMvODMKZXh0ZW5zaW9uIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZUJ1aWxkQ29udGV4dCBvbiBCdWlsZENvbnRleHQgewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZSBnZXQge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgPT4KICAgICAgRmx1ZW50VGhlbWUub2YodGhpcykuZXh0ZW5zaW9uPHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT4oKSE7Cn0Ke3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWkve3twcm9qZWN0X25hbWV9fV91aS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAnc2NhZmZvbGRfdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5LAogIF07Cn0Ke3svbW9iaWxlfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold_theme.tailor.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/theme_extensions.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICcuLi97e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQuZGFydCc7CgpmaW5hbCBsaWdodEV4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+WwogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5saWdodCwKXTsKCmZpbmFsIGRhcmtFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyaywKXTsKe3svYW5kcm9pZH19e3sjaW9zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lRXh0ZW5zaW9uOwppbXBvcnQgJy4uL3t7cHJvamVjdF9uYW1lfX1fdWlfaW9zLmRhcnQnOwoKZmluYWwgbGlnaHRFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCl07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCl07Cnt7L2lvc319e3sjbGludXh9fWltcG9ydCAnLi4ve3twcm9qZWN0X25hbWV9fV91aV9saW51eC5kYXJ0JzsKCmZpbmFsIGxpZ2h0RXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0LApdOwoKZmluYWwgZGFya0V4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+WwogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5kYXJrLApdOwp7ey9saW51eH19e3sjbWFjb3N9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWVFeHRlbnNpb247CmltcG9ydCAnLi4ve3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy5kYXJ0JzsKCmZpbmFsIGxpZ2h0RXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0LApdOwoKZmluYWwgZGFya0V4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+WwogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5kYXJrLApdOwp7ey9tYWNvc319e3sjd2VifX1pbXBvcnQgJy4uL3t7cHJvamVjdF9uYW1lfX1fdWlfd2ViLmRhcnQnOwoKZmluYWwgbGlnaHRFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCl07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCl07Cnt7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICcuLi97e3Byb2plY3RfbmFtZX19X3VpX3dpbmRvd3MuZGFydCc7CgpmaW5hbCBsaWdodEV4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+WwogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5saWdodCwKXTsKCmZpbmFsIGRhcmtFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyaywKXTsKe3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJy4uL3t7cHJvamVjdF9uYW1lfX1fdWlfbW9iaWxlLmRhcnQnOwoKZmluYWwgbGlnaHRFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCl07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCl07Cnt7L21vYmlsZX19",
      "type": "text"
    },
    {
      "path": "lib/{{project_name}}_ui_{{platform}}.dart",
      "data":
          "Ly8vIFdpZGdldHMgYW5kIHRoZW1lcyBpbXBsZW1lbnRpbmcge3twcm9qZWN0X25hbWUudGl0bGVDYXNlKCl9fSBkZXNpZ24gbGFuZ3VhZ2UgZm9yIHt7I2FuZHJvaWR9fUFuZHJvaWR7ey9hbmRyb2lkfX17eyNpb3N9fWlPU3t7L2lvc319e3sjbGludXh9fUxpbnV4e3svbGludXh9fXt7I21hY29zfX1tYWNPU3t7L21hY29zfX17eyN3ZWJ9fVdlYnt7L3dlYn19e3sjd2luZG93c319V2luZG93c3t7L3dpbmRvd3N9fXt7I21vYmlsZX19TW9iaWxle3svbW9iaWxlfX0uCi8vLwovLy8gVG8gdXNlLCBpbXBvcnQgYHBhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX0ve3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX0uZGFydGAuCmxpYnJhcnkge3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX07Cgp7eyNhbmRyb2lkfX1leHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBoaWRlIFJvdXRlcjt7ey9hbmRyb2lkfX0Ke3sjaW9zfX1leHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCcgaGlkZSBSb3V0ZXI7CmV4cG9ydCAncGFja2FnZTpjdXBlcnRpbm9faWNvbnMvY3VwZXJ0aW5vX2ljb25zLmRhcnQnO3t7L2lvc319Cnt7I2xpbnV4fX1leHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBoaWRlIFJvdXRlcjsKZXhwb3J0ICdwYWNrYWdlOnlhcnUveWFydS5kYXJ0JzsKZXhwb3J0ICdwYWNrYWdlOnlhcnVfaWNvbnMveWFydV9pY29ucy5kYXJ0Jzt7ey9saW51eH19Cnt7I21hY29zfX1leHBvcnQgJ3BhY2thZ2U6Y3VwZXJ0aW5vX2ljb25zL2N1cGVydGlub19pY29ucy5kYXJ0JzsKZXhwb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZU1vZGU7CmV4cG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCcgaGlkZSBSb3V0ZXI7CmV4cG9ydCAncGFja2FnZTptYWNvc191aS9tYWNvc191aS5kYXJ0Jzt7ey9tYWNvc319Cnt7I3dlYn19ZXhwb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgaGlkZSBSb3V0ZXI7e3svd2VifX0Ke3sjd2luZG93c319ZXhwb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCcgaGlkZSBSb3V0ZXI7e3svd2luZG93c319Cnt7I21vYmlsZX19ZXhwb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgaGlkZSBSb3V0ZXI7e3svbW9iaWxlfX0KCmV4cG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CgpleHBvcnQgJ3NyYy9hcHAuZGFydCc7CmV4cG9ydCAnc3JjL3NjYWZmb2xkLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsK",
      "type": "text"
    },
    {
      "path": "LICENSE",
      "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "pubspec_overrides.yaml",
      "data":
          "e3sjYW5kcm9pZH19IyBtZWxvc19tYW5hZ2VkX2RlcGVuZGVuY3lfb3ZlcnJpZGVzOiB7e3Byb2plY3RfbmFtZX19X3VpCmRlcGVuZGVuY3lfb3ZlcnJpZGVzOgogIHt7cHJvamVjdF9uYW1lfX1fdWk6CiAgICBwYXRoOiAuLi97e3Byb2plY3RfbmFtZX19X3VpCnt7L2FuZHJvaWR9fXt7I2lvc319IyBtZWxvc19tYW5hZ2VkX2RlcGVuZGVuY3lfb3ZlcnJpZGVzOiB7e3Byb2plY3RfbmFtZX19X3VpCmRlcGVuZGVuY3lfb3ZlcnJpZGVzOgogIHt7cHJvamVjdF9uYW1lfX1fdWk6CiAgICBwYXRoOiAuLi97e3Byb2plY3RfbmFtZX19X3VpCnt7L2lvc319e3sjbGludXh9fSMgbWVsb3NfbWFuYWdlZF9kZXBlbmRlbmN5X292ZXJyaWRlczoge3twcm9qZWN0X25hbWV9fV91aQpkZXBlbmRlbmN5X292ZXJyaWRlczoKICB7e3Byb2plY3RfbmFtZX19X3VpOgogICAgcGF0aDogLi4ve3twcm9qZWN0X25hbWV9fV91aQp7ey9saW51eH19e3sjbWFjb3N9fSMgbWVsb3NfbWFuYWdlZF9kZXBlbmRlbmN5X292ZXJyaWRlczoge3twcm9qZWN0X25hbWV9fV91aQpkZXBlbmRlbmN5X292ZXJyaWRlczoKICB7e3Byb2plY3RfbmFtZX19X3VpOgogICAgcGF0aDogLi4ve3twcm9qZWN0X25hbWV9fV91aQp7ey9tYWNvc319e3sjd2VifX0jIG1lbG9zX21hbmFnZWRfZGVwZW5kZW5jeV9vdmVycmlkZXM6IHt7cHJvamVjdF9uYW1lfX1fdWkKZGVwZW5kZW5jeV9vdmVycmlkZXM6CiAge3twcm9qZWN0X25hbWV9fV91aToKICAgIHBhdGg6IC4uL3t7cHJvamVjdF9uYW1lfX1fdWkKe3svd2VifX17eyN3aW5kb3dzfX0jIG1lbG9zX21hbmFnZWRfZGVwZW5kZW5jeV9vdmVycmlkZXM6IHt7cHJvamVjdF9uYW1lfX1fdWkKZGVwZW5kZW5jeV9vdmVycmlkZXM6CiAge3twcm9qZWN0X25hbWV9fV91aToKICAgIHBhdGg6IC4uL3t7cHJvamVjdF9uYW1lfX1fdWkKe3svd2luZG93c319e3sjbW9iaWxlfX0jIG1lbG9zX21hbmFnZWRfZGVwZW5kZW5jeV9vdmVycmlkZXM6IHt7cHJvamVjdF9uYW1lfX1fdWkKZGVwZW5kZW5jeV9vdmVycmlkZXM6CiAge3twcm9qZWN0X25hbWV9fV91aToKICAgIHBhdGg6IC4uL3t7cHJvamVjdF9uYW1lfX1fdWkKe3svbW9iaWxlfX0=",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "PCEtLQpUaGlzIFJFQURNRSBkZXNjcmliZXMgdGhlIHBhY2thZ2UuIElmIHlvdSBwdWJsaXNoIHRoaXMgcGFja2FnZSB0byBwdWIuZGV2LAp0aGlzIFJFQURNRSdzIGNvbnRlbnRzIGFwcGVhciBvbiB0aGUgbGFuZGluZyBwYWdlIGZvciB5b3VyIHBhY2thZ2UuCgpGb3IgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHdyaXRlIGEgZ29vZCBwYWNrYWdlIFJFQURNRSwgc2VlIHRoZSBndWlkZSBmb3IKW3dyaXRpbmcgcGFja2FnZSBwYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL3dyaXRpbmctcGFja2FnZS1wYWdlcykuCgpGb3IgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBkZXZlbG9waW5nIHBhY2thZ2VzLCBzZWUgdGhlIERhcnQgZ3VpZGUgZm9yCltjcmVhdGluZyBwYWNrYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL2NyZWF0ZS1saWJyYXJ5LXBhY2thZ2VzKQphbmQgdGhlIEZsdXR0ZXIgZ3VpZGUgZm9yCltkZXZlbG9waW5nIHBhY2thZ2VzIGFuZCBwbHVnaW5zXShodHRwczovL2ZsdXR0ZXIuZGV2L2RldmVsb3BpbmctcGFja2FnZXMpLgotLT4KClRPRE86IFB1dCBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWNrYWdlIGhlcmUgdGhhdCBoZWxwcyBwb3RlbnRpYWwgdXNlcnMKa25vdyB3aGV0aGVyIHRoaXMgcGFja2FnZSBtaWdodCBiZSB1c2VmdWwgZm9yIHRoZW0uCgojIyBGZWF0dXJlcwoKVE9ETzogTGlzdCB3aGF0IHlvdXIgcGFja2FnZSBjYW4gZG8uIE1heWJlIGluY2x1ZGUgaW1hZ2VzLCBnaWZzLCBvciB2aWRlb3MuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKClRPRE86IExpc3QgcHJlcmVxdWlzaXRlcyBhbmQgcHJvdmlkZSBvciBwb2ludCB0byBpbmZvcm1hdGlvbiBvbiBob3cgdG8Kc3RhcnQgdXNpbmcgdGhlIHBhY2thZ2UuCgojIyBVc2FnZQoKVE9ETzogSW5jbHVkZSBzaG9ydCBhbmQgdXNlZnVsIGV4YW1wbGVzIGZvciBwYWNrYWdlIHVzZXJzLiBBZGQgbG9uZ2VyIGV4YW1wbGVzCnRvIGAvZXhhbXBsZWAgZm9sZGVyLgoKYGBgZGFydApjb25zdCBsaWtlID0gJ3NhbXBsZSc7CmBgYAoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKVE9ETzogVGVsbCB1c2VycyBtb3JlIGFib3V0IHRoZSBwYWNrYWdlOiB3aGVyZSB0byBmaW5kIG1vcmUgaW5mb3JtYXRpb24sIGhvdyB0bwpjb250cmlidXRlIHRvIHRoZSBwYWNrYWdlLCBob3cgdG8gZmlsZSBpc3N1ZXMsIHdoYXQgcmVzcG9uc2UgdGhleSBjYW4gZXhwZWN0CmZyb20gdGhlIHBhY2thZ2UgYXV0aG9ycywgYW5kIG1vcmUuCg==",
      "type": "text"
    },
    {
      "path": "test/ensure_build_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmJ1aWxkX3ZlcmlmeS9idWlsZF92ZXJpZnkuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwoKdm9pZCBtYWluKCkgewogIHRlc3QoCiAgICAnZW5zdXJlX2J1aWxkJywKICAgICgpIGFzeW5jID0+IGV4cGVjdEJ1aWxkQ2xlYW4oCiAgICAgIHBhY2thZ2VSZWxhdGl2ZURpcmVjdG9yeToKICAgICAgICAgICdwYWNrYWdlcy97e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWlfe3twbGF0Zm9ybX19JywKICAgICksCiAgICB0aW1lb3V0OiBjb25zdCBUaW1lb3V0LmZhY3Rvcig0KSwKICAgIHRhZ3M6IFsnYnVpbGRfdmVyaWZ5J10sCiAgKTsKfQo=",
      "type": "text"
    },
    {
      "path": "test/mocks.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7e3svYW5kcm9pZH19e3sjaW9zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCc7e3svaW9zfX17eyNsaW51eH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7e3svbGludXh9fXt7I21hY29zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnO3t7L21hY29zfX17eyN3ZWJ9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnO3t7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7e3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0Jzt7ey9tb2JpbGV9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKCnt7I3dpbmRvd3N9fWNsYXNzIEZha2VMb2NhbGl6YXRpb25zRGVsZWdhdGUgZXh0ZW5kcyBMb2NhbGl6YXRpb25zRGVsZWdhdGU8ZHluYW1pYz4gewogIEBvdmVycmlkZQogIGJvb2wgaXNTdXBwb3J0ZWQoTG9jYWxlIGxvY2FsZSkgPT4gdHJ1ZTsKCiAgQG92ZXJyaWRlCiAgRnV0dXJlPGR5bmFtaWM+IGxvYWQoTG9jYWxlIGxvY2FsZSkgYXN5bmMge30KCiAgQG92ZXJyaWRlCiAgYm9vbCBzaG91bGRSZWxvYWQoY292YXJpYW50IExvY2FsaXphdGlvbnNEZWxlZ2F0ZTxkeW5hbWljPiBvbGQpID0+IGZhbHNlOwp9CgpjbGFzcyBGYWtlUm91dGVJbmZvcm1hdGlvblByb3ZpZGVyIGV4dGVuZHMgRmFrZQogICAgaW1wbGVtZW50cyBSb3V0ZUluZm9ybWF0aW9uUHJvdmlkZXIge30KCmNsYXNzIEZha2VSb3V0ZUluZm9ybWF0aW9uUGFyc2VyIGV4dGVuZHMgUm91dGVJbmZvcm1hdGlvblBhcnNlcjxPYmplY3Q+IHt9CgpjbGFzcyBGYWtlUm91dGVyRGVsZWdhdGUgZXh0ZW5kcyBSb3V0ZXJEZWxlZ2F0ZTxPYmplY3Q+IHsKICBAb3ZlcnJpZGUKICB2b2lkIGFkZExpc3RlbmVyKFZvaWRDYWxsYmFjayBsaXN0ZW5lcikge30KCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSA9PiBDb250YWluZXIoKTsKCiAgQG92ZXJyaWRlCiAgRnV0dXJlPGJvb2w+IHBvcFJvdXRlKCkgYXN5bmMgPT4gZmFsc2U7CgogIEBvdmVycmlkZQogIHZvaWQgcmVtb3ZlTGlzdGVuZXIoVm9pZENhbGxiYWNrIGxpc3RlbmVyKSB7fQoKICBAb3ZlcnJpZGUKICBGdXR1cmU8dm9pZD4gc2V0TmV3Um91dGVQYXRoKE9iamVjdCBjb25maWd1cmF0aW9uKSBhc3luYyB7fQp9CgpjbGFzcyBGYWtlUm91dGVyQ29uZmlnIGV4dGVuZHMgUm91dGVyQ29uZmlnPE9iamVjdD4gewogIEZha2VSb3V0ZXJDb25maWcoKQogICAgICA6IHN1cGVyKAogICAgICAgICAgcm91dGVJbmZvcm1hdGlvblByb3ZpZGVyOiBGYWtlUm91dGVJbmZvcm1hdGlvblByb3ZpZGVyKCksCiAgICAgICAgICByb3V0ZUluZm9ybWF0aW9uUGFyc2VyOiBGYWtlUm91dGVJbmZvcm1hdGlvblBhcnNlcigpLAogICAgICAgICAgcm91dGVyRGVsZWdhdGU6IEZha2VSb3V0ZXJEZWxlZ2F0ZSgpLAogICAgICAgICk7Cn17ey93aW5kb3dzfX17e153aW5kb3dzfX1jbGFzcyBGYWtlTG9jYWxpemF0aW9uc0RlbGVnYXRlIGV4dGVuZHMgTG9jYWxpemF0aW9uc0RlbGVnYXRlPGR5bmFtaWM+IHsKICBAb3ZlcnJpZGUKICBib29sIGlzU3VwcG9ydGVkKExvY2FsZSBsb2NhbGUpID0+IHRydWU7CgogIEBvdmVycmlkZQogIEZ1dHVyZTxkeW5hbWljPiBsb2FkKExvY2FsZSBsb2NhbGUpIGFzeW5jIHt9CgogIEBvdmVycmlkZQogIGJvb2wgc2hvdWxkUmVsb2FkKGNvdmFyaWFudCBMb2NhbGl6YXRpb25zRGVsZWdhdGU8ZHluYW1pYz4gb2xkKSA9PiBmYWxzZTsKfQoKY2xhc3MgRmFrZVJvdXRlckRlbGVnYXRlIGV4dGVuZHMgUm91dGVyRGVsZWdhdGU8T2JqZWN0PiB7CiAgQG92ZXJyaWRlCiAgdm9pZCBhZGRMaXN0ZW5lcihWb2lkQ2FsbGJhY2sgbGlzdGVuZXIpIHt9CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgPT4gQ29udGFpbmVyKCk7CgogIEBvdmVycmlkZQogIEZ1dHVyZTxib29sPiBwb3BSb3V0ZSgpIGFzeW5jID0+IGZhbHNlOwoKICBAb3ZlcnJpZGUKICB2b2lkIHJlbW92ZUxpc3RlbmVyKFZvaWRDYWxsYmFjayBsaXN0ZW5lcikge30KCiAgQG92ZXJyaWRlCiAgRnV0dXJlPHZvaWQ+IHNldE5ld1JvdXRlUGF0aChPYmplY3QgY29uZmlndXJhdGlvbikgYXN5bmMge30KfQoKe3sjbWFjb3N9fWNsYXNzIEZha2VSb3V0ZUluZm9ybWF0aW9uUGFyc2VyIGV4dGVuZHMgUm91dGVJbmZvcm1hdGlvblBhcnNlcjxPYmplY3Q+IHsKICBAb3ZlcnJpZGUKICBGdXR1cmU8T2JqZWN0PiBwYXJzZVJvdXRlSW5mb3JtYXRpb24oCiAgICBSb3V0ZUluZm9ybWF0aW9uIHJvdXRlSW5mb3JtYXRpb24sCiAgKSBhc3luYyB7CiAgICByZXR1cm4gMDsKICB9Cn0KCmNsYXNzIEZha2VSb3V0ZXJDb25maWcgZXh0ZW5kcyBSb3V0ZXJDb25maWc8T2JqZWN0PiB7CiAgRmFrZVJvdXRlckNvbmZpZygpCiAgICAgIDogX3JvdXRlSW5mb3JtYXRpb25QYXJzZXIgPSBGYWtlUm91dGVJbmZvcm1hdGlvblBhcnNlcigpLAogICAgICAgIHN1cGVyKHJvdXRlckRlbGVnYXRlOiBGYWtlUm91dGVyRGVsZWdhdGUoKSk7CgogIGZpbmFsIFJvdXRlSW5mb3JtYXRpb25QYXJzZXI8T2JqZWN0PiBfcm91dGVJbmZvcm1hdGlvblBhcnNlcjsKCiAgQG92ZXJyaWRlCiAgUm91dGVJbmZvcm1hdGlvblBhcnNlcjxPYmplY3Q+PyBnZXQgcm91dGVJbmZvcm1hdGlvblBhcnNlciA9PgogICAgICBfcm91dGVJbmZvcm1hdGlvblBhcnNlcjsKfQp7ey9tYWNvc319e3tebWFjb3N9fWNsYXNzIEZha2VSb3V0ZXJDb25maWcgZXh0ZW5kcyBSb3V0ZXJDb25maWc8T2JqZWN0PiB7CiAgRmFrZVJvdXRlckNvbmZpZygpIDogc3VwZXIocm91dGVyRGVsZWdhdGU6IEZha2VSb3V0ZXJEZWxlZ2F0ZSgpKTsKfQp7ey9tYWNvc319e3svd2luZG93c319CgovLyBUT0RPOiBhZGQgbW9yZSBtb2NrcyBhbmQgZmFrZXMgaGVyZQo=",
      "type": "text"
    },
    {
      "path": "test/src/app_test.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/helpers/helpers.dart",
      "data": "ZXhwb3J0ICdwdW1wX2FwcC5kYXJ0JzsK",
      "type": "text"
    },
    {
      "path": "test/src/helpers/pump_app.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/scaffold_test.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/scaffold_theme_test.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7e3svYW5kcm9pZH19e3sjaW9zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCc7aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfaW9zL3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0Jzt7ey9pb3N9fXt7I2xpbnV4fX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9saW51eC9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7e3svbGludXh9fXt7I21hY29zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnO2ltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnO2ltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX21hY29zL3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0Jzt7ey9tYWNvc319e3sjd2VifX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV93ZWIvc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnO3t7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7e3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9tb2JpbGUvc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnO3t7L21vYmlsZX19Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZScsICgpIHsKICAgIGdyb3VwKCcubGlnaHQnLCAoKSB7CiAgICAgIGZpbmFsIGxpZ2h0ID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0OwoKICAgICAgdGVzdCgnLmJhY2tncm91bmRDb2xvcicsICgpIHsKICAgICAgICAvLyBBc3NlcnQKICAgICAgICBleHBlY3QobGlnaHQuYmFja2dyb3VuZENvbG9yLCBjb25zdCBDb2xvcigweEZGRkZGRkZGKSk7CiAgICAgIH0pOwogICAgfSk7CgogICAgZ3JvdXAoJy5kYXJrJywgKCkgewogICAgICBmaW5hbCBkYXJrID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcms7CgogICAgICB0ZXN0KCcuYmFja2dyb3VuZENvbG9yJywgKCkgewogICAgICAgIC8vIEFzc2VydAogICAgICAgIGV4cGVjdChkYXJrLmJhY2tncm91bmRDb2xvciwgY29uc3QgQ29sb3IoMHhGRjIyMjIyMikpOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9Cg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "platform_ui_package",
  "description": "A brick generating a platform ui package of a Rapid project.",
  "version": "0.1.0",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyBwbGF0Zm9ybV91aV9wYWNrYWdlCgpUT0RPCg==",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMAoKLSBUT0RPOiBEZXNjcmliZSBpbml0aWFsIHJlbGVhc2UuCg==",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string"},
    "platform": {"type": "string"},
    "android": {"type": "boolean"},
    "ios": {"type": "boolean"},
    "linux": {"type": "boolean"},
    "macos": {"type": "boolean"},
    "web": {"type": "boolean"},
    "windows": {"type": "boolean"},
    "mobile": {"type": "boolean"}
  }
});
