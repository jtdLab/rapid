// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final themedWidgetBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/src/{{name.snakeCase()}}.dart",
      "data":
          "e3teYW5kcm9pZH19e3teaW9zfX17e15saW51eH19e3tebWFjb3N9fXt7XndlYn19e3ted2luZG93c319e3tebW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwoKaW1wb3J0ICd7e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogIH0pOwoKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPyB0aGVtZTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9IHRoaXMudGhlbWUgPz8gY29udGV4dC57e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgLy8gVE9ETzogaW1wbGVtZW50CiAgICByZXR1cm4gQ29udGFpbmVyKAogICAgICBjb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgKTsKICB9Cn17ey9tb2JpbGV9fXt7L3dpbmRvd3N9fXt7L3dlYn19e3svbWFjb3N9fXt7L2xpbnV4fX17ey9pb3N9fXt7L2FuZHJvaWR9fQp7eyNhbmRyb2lkfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKCmltcG9ydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICB9KTsKCiAgZmluYWwge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWU7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPSB0aGlzLnRoZW1lID8/IGNvbnRleHQue3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lOwogICAgZmluYWwgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZENvbG9yOwoKICAgIC8vIFRPRE86IGltcGxlbWVudAogICAgcmV0dXJuIENvbnRhaW5lcigKICAgICAgY29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICk7CiAgfQp9e3svYW5kcm9pZH19e3sjaW9zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCc7CgppbXBvcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU/IHRoZW1lOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICApOwogIH0KfXt7L2lvc319e3sjbGludXh9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKaW1wb3J0ICd7e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogIH0pOwoKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPyB0aGVtZTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9IHRoaXMudGhlbWUgPz8gY29udGV4dC57e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgLy8gVE9ETzogaW1wbGVtZW50CiAgICByZXR1cm4gQ29udGFpbmVyKAogICAgICBjb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgKTsKICB9Cn17ey9saW51eH19e3sjbWFjb3N9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2N1cGVydGluby5kYXJ0JzsKCmltcG9ydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICB9KTsKCiAgZmluYWwge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWU7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPSB0aGlzLnRoZW1lID8/IGNvbnRleHQue3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lOwogICAgZmluYWwgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZENvbG9yOwoKICAgIC8vIFRPRE86IGltcGxlbWVudAogICAgcmV0dXJuIENvbnRhaW5lcigKICAgICAgY29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICk7CiAgfQp9e3svbWFjb3N9fXt7I3dlYn19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgppbXBvcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU/IHRoZW1lOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICApOwogIH0KfXt7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7CgppbXBvcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU/IHRoZW1lOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICApOwogIH0KfXt7L3dpbmRvd3N9fXt7I21vYmlsZX19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgppbXBvcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgfSk7CgogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU/IHRoZW1lOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0gdGhpcy50aGVtZSA/PyBjb250ZXh0Lnt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZTsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICAvLyBUT0RPOiBpbXBsZW1lbnQKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGNvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICApOwogIH0KfXt7L21vYmlsZX19Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/{{name.snakeCase()}}_theme.dart",
      "data":
          "e3teYW5kcm9pZH19e3teaW9zfX17e15saW51eH19e3tebWFjb3N9fXt7XndlYn19e3ted2luZG93c319e3tebW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIGNvbnN0IENvbG9yKDB4RkZGRkZGRkYpLAogICAgY29uc3QgQ29sb3IoMHhGRjAwMDAwMCksCiAgXTsKfXt7L21vYmlsZX19e3svd2luZG93c319e3svd2VifX17ey9tYWNvc319e3svbGludXh9fXt7L2lvc319e3svYW5kcm9pZH19e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvZm91bmRhdGlvbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZSwgVGhlbWVFeHRlbnNpb247CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLnRhaWxvci5kYXJ0JzsKCkBUYWlsb3IodGhlbWVHZXR0ZXI6IFRoZW1lR2V0dGVyLm9uQnVpbGRDb250ZXh0KQpjbGFzcyBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICBjb25zdCBDb2xvcigweEZGRkZGRkZGKSwKICAgIGNvbnN0IENvbG9yKDB4RkYwMDAwMDApLAogIF07Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIGNvbnN0IENvbG9yKDB4RkZGRkZGRkYpLAogICAgY29uc3QgQ29sb3IoMHhGRjAwMDAwMCksCiAgXTsKfQp7ey9pb3N9fXt7I2xpbnV4fX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIGNvbnN0IENvbG9yKDB4RkZGRkZGRkYpLAogICAgY29uc3QgQ29sb3IoMHhGRjAwMDAwMCksCiAgXTsKfQp7ey9saW51eH19e3sjbWFjb3N9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWUsIFRoZW1lRXh0ZW5zaW9uOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICd7e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS50YWlsb3IuZGFydCc7CgpAVGFpbG9yKHRoZW1lR2V0dGVyOiBUaGVtZUdldHRlci5vbkJ1aWxkQ29udGV4dCkKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAgY29uc3QgQ29sb3IoMHhGRkZGRkZGRiksCiAgICBjb25zdCBDb2xvcigweEZGMDAwMDAwKSwKICBdOwp9Cnt7L21hY29zfX17eyN3ZWJ9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWUsIFRoZW1lRXh0ZW5zaW9uOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICd7e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS50YWlsb3IuZGFydCc7CgpAVGFpbG9yKHRoZW1lR2V0dGVyOiBUaGVtZUdldHRlci5vbkJ1aWxkQ29udGV4dCkKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAgY29uc3QgQ29sb3IoMHhGRkZGRkZGRiksCiAgICBjb25zdCBDb2xvcigweEZGMDAwMDAwKSwKICBdOwp9Cnt7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL2ZvdW5kYXRpb24uZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLnRhaWxvci5kYXJ0JzsKCkBUYWlsb3IodGhlbWVHZXR0ZXI6IFRoZW1lR2V0dGVyLm9uQnVpbGRDb250ZXh0KQpjbGFzcyBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICBjb25zdCBDb2xvcigweEZGRkZGRkZGKSwKICAgIGNvbnN0IENvbG9yKDB4RkYwMDAwMDApLAogIF07Cn0KCi8vIFRPRE86IGh0dHBzOi8vZ2l0aHViLmNvbS9JdGVvL3RoZW1lX3RhaWxvci9pc3N1ZXMvODMKZXh0ZW5zaW9uIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWVCdWlsZENvbnRleHQgb24gQnVpbGRDb250ZXh0IHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIGdldCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUgPT4KICAgICAgRmx1ZW50VGhlbWUub2YodGhpcykuZXh0ZW5zaW9uPHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU+KCkhOwp9e3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9mb3VuZGF0aW9uLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lLCBUaGVtZUV4dGVuc2lvbjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnRoZW1lX3RhaWxvcl9hbm5vdGF0aW9uL3RoZW1lX3RhaWxvcl9hbm5vdGF0aW9uLmRhcnQnOwoKcGFydCAne3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUudGFpbG9yLmRhcnQnOwoKQFRhaWxvcih0aGVtZUdldHRlcjogVGhlbWVHZXR0ZXIub25CdWlsZENvbnRleHQpCmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSB7CiAgc3RhdGljIExpc3Q8Q29sb3I+IGJhY2tncm91bmRDb2xvciA9IFsKICAgIGNvbnN0IENvbG9yKDB4RkZGRkZGRkYpLAogICAgY29uc3QgQ29sb3IoMHhGRjAwMDAwMCksCiAgXTsKfQp7ey9tb2JpbGV9fQo=",
      "type": "text"
    },
    {
      "path": "lib/src/{{name.snakeCase()}}_theme.tailor.dart",
      "data":
          "Ly8gY292ZXJhZ2U6aWdub3JlLWZpbGUKLy8gR0VORVJBVEVEIENPREUgLSBETyBOT1QgTU9ESUZZIEJZIEhBTkQKLy8gaWdub3JlX2Zvcl9maWxlOiB0eXBlPWxpbnQsIHVudXNlZF9lbGVtZW50LCB1bm5lY2Vzc2FyeV9jYXN0CgpwYXJ0IG9mICd7e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi8vIFRhaWxvckFubm90YXRpb25zR2VuZXJhdG9yCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIGV4dGVuZHMgVGhlbWVFeHRlbnNpb248e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT4KICAgIHdpdGggRGlhZ25vc3RpY2FibGVUcmVlTWl4aW4gewogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoewogICAgcmVxdWlyZWQgdGhpcy5iYWNrZ3JvdW5kQ29sb3IsCiAgfSk7CgogIGZpbmFsIENvbG9yIGJhY2tncm91bmRDb2xvcjsKCiAgc3RhdGljIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUgbGlnaHQgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKAogICAgYmFja2dyb3VuZENvbG9yOiBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUuYmFja2dyb3VuZENvbG9yWzBdLAogICk7CgogIHN0YXRpYyBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIGRhcmsgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKAogICAgYmFja2dyb3VuZENvbG9yOiBfJHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUuYmFja2dyb3VuZENvbG9yWzFdLAogICk7CgogIHN0YXRpYyBmaW5hbCB0aGVtZXMgPSBbCiAgICBsaWdodCwKICAgIGRhcmssCiAgXTsKCiAgQG92ZXJyaWRlCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSBjb3B5V2l0aCh7CiAgICBDb2xvcj8gYmFja2dyb3VuZENvbG9yLAogIH0pIHsKICAgIHJldHVybiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKAogICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciA/PyB0aGlzLmJhY2tncm91bmRDb2xvciwKICAgICk7CiAgfQoKICBAb3ZlcnJpZGUKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lIGxlcnAoCiAgICAgIGNvdmFyaWFudCBUaGVtZUV4dGVuc2lvbjx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPj8gb3RoZXIsIGRvdWJsZSB0KSB7CiAgICBpZiAob3RoZXIgaXMhIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUpIHJldHVybiB0aGlzIGFzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU7CiAgICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSgKICAgICAgYmFja2dyb3VuZENvbG9yOiBDb2xvci5sZXJwKGJhY2tncm91bmRDb2xvciwgb3RoZXIuYmFja2dyb3VuZENvbG9yLCB0KSEsCiAgICApOwogIH0KCiAgQG92ZXJyaWRlCiAgdm9pZCBkZWJ1Z0ZpbGxQcm9wZXJ0aWVzKERpYWdub3N0aWNQcm9wZXJ0aWVzQnVpbGRlciBwcm9wZXJ0aWVzKSB7CiAgICBzdXBlci5kZWJ1Z0ZpbGxQcm9wZXJ0aWVzKHByb3BlcnRpZXMpOwogICAgcHJvcGVydGllcwogICAgICAuLmFkZChEaWFnbm9zdGljc1Byb3BlcnR5KCd0eXBlJywgJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUnKSkKICAgICAgLi5hZGQoRGlhZ25vc3RpY3NQcm9wZXJ0eSgnYmFja2dyb3VuZENvbG9yJywgYmFja2dyb3VuZENvbG9yKSk7CiAgfQoKICBAb3ZlcnJpZGUKICBib29sIG9wZXJhdG9yID09KE9iamVjdCBvdGhlcikgewogICAgcmV0dXJuIGlkZW50aWNhbCh0aGlzLCBvdGhlcikgfHwKICAgICAgICAob3RoZXIucnVudGltZVR5cGUgPT0gcnVudGltZVR5cGUgJiYKICAgICAgICAgICAgb3RoZXIgaXMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSAmJgogICAgICAgICAgICBjb25zdCBEZWVwQ29sbGVjdGlvbkVxdWFsaXR5KCkKICAgICAgICAgICAgICAgIC5lcXVhbHMoYmFja2dyb3VuZENvbG9yLCBvdGhlci5iYWNrZ3JvdW5kQ29sb3IpKTsKICB9CgogIEBvdmVycmlkZQogIGludCBnZXQgaGFzaENvZGUgewogICAgcmV0dXJuIE9iamVjdC5oYXNoKAogICAgICBydW50aW1lVHlwZS5oYXNoQ29kZSwKICAgICAgY29uc3QgRGVlcENvbGxlY3Rpb25FcXVhbGl0eSgpLmhhc2goYmFja2dyb3VuZENvbG9yKSwKICAgICk7CiAgfQp9Cgp7e153aW5kb3dzfX1leHRlbnNpb24ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZUJ1aWxkQ29udGV4dCBvbiBCdWlsZENvbnRleHQgewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUgZ2V0IHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZSA9PgogICAgICBUaGVtZS5vZih0aGlzKS5leHRlbnNpb248e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT4oKSE7Cn17ey93aW5kb3dzfX0K",
      "type": "text"
    },
    {
      "path": "test/src/{{name.snakeCase()}}_test.dart",
      "data":
          "e3teYW5kcm9pZH19e3teaW9zfX17e15saW51eH19e3tebWFjb3N9fXt7XndlYn19e3ted2luZG93c319e3tebW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6YWxjaGVtaXN0L2FsY2hlbWlzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZU1vZGU7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aS9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX0uZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpL3NyYy97e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCmltcG9ydCAnaGVscGVycy9oZWxwZXJzLmRhcnQnOwoKe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPyB0aGVtZSwKfSkgewogIHJldHVybiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgIHRoZW1lOiB0aGVtZSwKICApOwp9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19JywgKCkgewogICAgZ29sZGVuVGVzdCgKICAgICAgJ3JlbmRlcnMgY29ycmVjdGx5JywKICAgICAgZmlsZU5hbWU6ICd7e25hbWUuc25ha2VDYXNlKCl9fScsCiAgICAgIGJ1aWxkZXI6ICgpID0+IEdvbGRlblRlc3RHcm91cCgKICAgICAgICBzY2VuYXJpb0NvbnN0cmFpbnRzOgogICAgICAgICAgICBjb25zdCBCb3hDb25zdHJhaW50cyhtaW5XaWR0aDogMjUwLCBtYXhIZWlnaHQ6IDUwMCksCiAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2xpZ2h0IC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmxpZ2h0LAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgICAgICAgICAgICAgdGhlbWU6CiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZShiYWNrZ3JvdW5kQ29sb3I6IENvbG9yKDB4RkYxMkZGMTIpLCksCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRoIHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnZGFyayAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5kYXJrLAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KCksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgLy8gVE9ETzogYWRkIG1vcmUgc2NlbmFyaW9zCiAgICAgICAgXSwKICAgICAgKSwKICAgICk7CiAgfSk7Cn17ey9tb2JpbGV9fXt7L3dpbmRvd3N9fXt7L3dlYn19e3svbWFjb3N9fXt7L2xpbnV4fX17ey9pb3N9fXt7L2FuZHJvaWR9fXt7I2FuZHJvaWR9fWltcG9ydCAncGFja2FnZTphbGNoZW1pc3QvYWxjaGVtaXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lTW9kZTsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX2FuZHJvaWQvc3JjL3t7bmFtZS5zbmFrZUNhc2UoKX19LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV9hbmRyb2lkL3NyYy97e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCmltcG9ydCAnaGVscGVycy9oZWxwZXJzLmRhcnQnOwoKe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPyB0aGVtZSwKfSkgewogIHJldHVybiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgIHRoZW1lOiB0aGVtZSwKICApOwp9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19JywgKCkgewogICAgZ29sZGVuVGVzdCgKICAgICAgJ3JlbmRlcnMgY29ycmVjdGx5JywKICAgICAgZmlsZU5hbWU6ICd7e25hbWUuc25ha2VDYXNlKCl9fScsCiAgICAgIGJ1aWxkZXI6ICgpID0+IEdvbGRlblRlc3RHcm91cCgKICAgICAgICBzY2VuYXJpb0NvbnN0cmFpbnRzOgogICAgICAgICAgICBjb25zdCBCb3hDb25zdHJhaW50cyhtaW5XaWR0aDogMjUwLCBtYXhIZWlnaHQ6IDUwMCksCiAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2xpZ2h0IC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmxpZ2h0LAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgICAgICAgICAgICAgdGhlbWU6CiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZShiYWNrZ3JvdW5kQ29sb3I6IENvbG9yKDB4RkYxMkZGMTIpLCksCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRoIHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnZGFyayAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5kYXJrLAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KCksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgLy8gVE9ETzogYWRkIG1vcmUgc2NlbmFyaW9zCiAgICAgICAgXSwKICAgICAgKSwKICAgICk7CiAgfSk7Cn17ey9hbmRyb2lkfX17eyNpb3N9fWltcG9ydCAncGFja2FnZTphbGNoZW1pc3QvYWxjaGVtaXN0LmRhcnQnO2ltcG9ydCAncGFja2FnZTpmbHV0dGVyL2N1cGVydGluby5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX2lvcy9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX0uZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX2lvcy9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgppbXBvcnQgJ2hlbHBlcnMvaGVscGVycy5kYXJ0JzsKCnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWUsCn0pIHsKICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICB0aGVtZTogdGhlbWUsCiAgKTsKfQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCd7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fScsICgpIHsKICAgIGdvbGRlblRlc3QoCiAgICAgICdyZW5kZXJzIGNvcnJlY3RseScsCiAgICAgIGZpbGVOYW1lOiAne3tuYW1lLnNuYWtlQ2FzZSgpfX0nLAogICAgICBidWlsZGVyOiAoKSA9PiBHb2xkZW5UZXN0R3JvdXAoCiAgICAgICAgc2NlbmFyaW9Db25zdHJhaW50czoKICAgICAgICAgICAgY29uc3QgQm94Q29uc3RyYWludHMobWluV2lkdGg6IDI1MCwgbWF4SGVpZ2h0OiA1MDApLAogICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGggdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICBicmlnaHRuZXNzOiBCcmlnaHRuZXNzLmRhcmssCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICAgICAgICAgICAgICB0aGVtZToKICAgICAgICAgICAgICAgICAgICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKGJhY2tncm91bmRDb2xvcjogQ29sb3IoMHhGRjEyRkYxMiksKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2xpZ2h0IC0gd2l0aG91dCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIGJyaWdodG5lc3M6IEJyaWdodG5lc3MuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRoIHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgYnJpZ2h0bmVzczogQnJpZ2h0bmVzcy5kYXJrLAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgICAgICAgICAgICAgdGhlbWU6CiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZShiYWNrZ3JvdW5kQ29sb3I6IENvbG9yKDB4RkYxMkZGMTIpLCksCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdkYXJrIC0gd2l0aG91dCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIGJyaWdodG5lc3M6IEJyaWdodG5lc3MuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIC8vIFRPRE86IGFkZCBtb3JlIHNjZW5hcmlvcwogICAgICAgIF0sCiAgICAgICksCiAgICApOwogIH0pOwp9e3svaW9zfX17eyNsaW51eH19aW1wb3J0ICdwYWNrYWdlOmFsY2hlbWlzdC9hbGNoZW1pc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWVNb2RlOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lLnNuYWtlQ2FzZSgpfX1fdWlfbGludXgvc3JjL3t7bmFtZS5zbmFrZUNhc2UoKX19LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV9saW51eC9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgppbXBvcnQgJ2hlbHBlcnMvaGVscGVycy5kYXJ0JzsKCnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWUsCn0pIHsKICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICB0aGVtZTogdGhlbWUsCiAgKTsKfQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCd7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fScsICgpIHsKICAgIGdvbGRlblRlc3QoCiAgICAgICdyZW5kZXJzIGNvcnJlY3RseScsCiAgICAgIGZpbGVOYW1lOiAne3tuYW1lLnNuYWtlQ2FzZSgpfX0nLAogICAgICBidWlsZGVyOiAoKSA9PiBHb2xkZW5UZXN0R3JvdXAoCiAgICAgICAgc2NlbmFyaW9Db25zdHJhaW50czoKICAgICAgICAgICAgY29uc3QgQm94Q29uc3RyYWludHMobWluV2lkdGg6IDI1MCwgbWF4SGVpZ2h0OiA1MDApLAogICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGggdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnbGlnaHQgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUubGlnaHQsCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdkYXJrIC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmRhcmssCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICAgICAgICAgICAgICB0aGVtZToKICAgICAgICAgICAgICAgICAgICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKGJhY2tncm91bmRDb2xvcjogQ29sb3IoMHhGRjEyRkYxMiksKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIC8vIFRPRE86IGFkZCBtb3JlIHNjZW5hcmlvcwogICAgICAgIF0sCiAgICAgICksCiAgICApOwogIH0pOwp9e3svbGludXh9fXt7I21hY29zfX1pbXBvcnQgJ3BhY2thZ2U6YWxjaGVtaXN0L2FsY2hlbWlzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZU1vZGU7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV9tYWNvcy9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX0uZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX21hY29zL3NyYy97e25hbWUuc25ha2VDYXNlKCl9fV90aGVtZS5kYXJ0JzsKCmltcG9ydCAnaGVscGVycy9oZWxwZXJzLmRhcnQnOwoKe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0gX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lPyB0aGVtZSwKfSkgewogIHJldHVybiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgIHRoZW1lOiB0aGVtZSwKICApOwp9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19JywgKCkgewogICAgZ29sZGVuVGVzdCgKICAgICAgJ3JlbmRlcnMgY29ycmVjdGx5JywKICAgICAgZmlsZU5hbWU6ICd7e25hbWUuc25ha2VDYXNlKCl9fScsCiAgICAgIGJ1aWxkZXI6ICgpID0+IEdvbGRlblRlc3RHcm91cCgKICAgICAgICBzY2VuYXJpb0NvbnN0cmFpbnRzOgogICAgICAgICAgICBjb25zdCBCb3hDb25zdHJhaW50cyhtaW5XaWR0aDogMjUwLCBtYXhIZWlnaHQ6IDUwMCksCiAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2xpZ2h0IC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmxpZ2h0LAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgICAgICAgICAgICAgdGhlbWU6CiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZShiYWNrZ3JvdW5kQ29sb3I6IENvbG9yKDB4RkYxMkZGMTIpLCksCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRoIHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnZGFyayAtIHdpdGhvdXQgdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5kYXJrLAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KCksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgLy8gVE9ETzogYWRkIG1vcmUgc2NlbmFyaW9zCiAgICAgICAgXSwKICAgICAgKSwKICAgICk7CiAgfSk7Cn17ey9tYWNvc319e3sjd2VifX1pbXBvcnQgJ3BhY2thZ2U6YWxjaGVtaXN0L2FsY2hlbWlzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZU1vZGU7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV93ZWIvc3JjL3t7bmFtZS5zbmFrZUNhc2UoKX19LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV93ZWIvc3JjL3t7bmFtZS5zbmFrZUNhc2UoKX19X3RoZW1lLmRhcnQnOwoKaW1wb3J0ICdoZWxwZXJzL2hlbHBlcnMuZGFydCc7Cgp7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWU/IHRoZW1lLAp9KSB7CiAgcmV0dXJuIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgdGhlbWU6IHRoZW1lLAogICk7Cn0KCnZvaWQgbWFpbigpIHsKICBncm91cCgne3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0nLCAoKSB7CiAgICBnb2xkZW5UZXN0KAogICAgICAncmVuZGVycyBjb3JyZWN0bHknLAogICAgICBmaWxlTmFtZTogJ3t7bmFtZS5zbmFrZUNhc2UoKX19JywKICAgICAgYnVpbGRlcjogKCkgPT4gR29sZGVuVGVzdEdyb3VwKAogICAgICAgIHNjZW5hcmlvQ29uc3RyYWludHM6CiAgICAgICAgICAgIGNvbnN0IEJveENvbnN0cmFpbnRzKG1pbldpZHRoOiAyNTAsIG1heEhlaWdodDogNTAwKSwKICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnbGlnaHQgLSB3aXRoIHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUubGlnaHQsCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICAgICAgICAgICAgICB0aGVtZToKICAgICAgICAgICAgICAgICAgICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKGJhY2tncm91bmRDb2xvcjogQ29sb3IoMHhGRjEyRkYxMiksKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2xpZ2h0IC0gd2l0aG91dCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmxpZ2h0LAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KCksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnZGFyayAtIHdpdGggdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5kYXJrLAogICAgICAgICAgICAgIHdpZGdldDogX2dldHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19KAogICAgICAgICAgICAgICAgdGhlbWU6CiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZShiYWNrZ3JvdW5kQ29sb3I6IENvbG9yKDB4RkYxMkZGMTIpLCksCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdkYXJrIC0gd2l0aG91dCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmRhcmssCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICAvLyBUT0RPOiBhZGQgbW9yZSBzY2VuYXJpb3MKICAgICAgICBdLAogICAgICApLAogICAgKTsKICB9KTsKfXt7L3dlYn19e3sjd2luZG93c319aW1wb3J0ICdwYWNrYWdlOmFsY2hlbWlzdC9hbGNoZW1pc3QuZGFydCc7aW1wb3J0ICdwYWNrYWdlOmZsdWVudF91aS9mbHVlbnRfdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWUuc25ha2VDYXNlKCl9fV91aV93aW5kb3dzL3NyYy97e25hbWUuc25ha2VDYXNlKCl9fS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lLnNuYWtlQ2FzZSgpfX1fdWlfd2luZG93cy9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgppbXBvcnQgJ2hlbHBlcnMvaGVscGVycy5kYXJ0JzsKCnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWUsCn0pIHsKICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICB0aGVtZTogdGhlbWUsCiAgKTsKfQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCd7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fScsICgpIHsKICAgIGdvbGRlblRlc3QoCiAgICAgICdyZW5kZXJzIGNvcnJlY3RseScsCiAgICAgIGZpbGVOYW1lOiAne3tuYW1lLnNuYWtlQ2FzZSgpfX0nLAogICAgICBidWlsZGVyOiAoKSA9PiBHb2xkZW5UZXN0R3JvdXAoCiAgICAgICAgc2NlbmFyaW9Db25zdHJhaW50czoKICAgICAgICAgICAgY29uc3QgQm94Q29uc3RyYWludHMobWluV2lkdGg6IDI1MCwgbWF4SGVpZ2h0OiA1MDApLAogICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGggdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnbGlnaHQgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUubGlnaHQsCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdkYXJrIC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmRhcmssCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICAgICAgICAgICAgICB0aGVtZToKICAgICAgICAgICAgICAgICAgICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKGJhY2tncm91bmRDb2xvcjogQ29sb3IoMHhGRjEyRkYxMiksKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIC8vIFRPRE86IGFkZCBtb3JlIHNjZW5hcmlvcwogICAgICAgIF0sCiAgICAgICksCiAgICApOwogIH0pOwp9e3svd2luZG93c319e3sjbW9iaWxlfX1pbXBvcnQgJ3BhY2thZ2U6YWxjaGVtaXN0L2FsY2hlbWlzdC5kYXJ0JztpbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX21vYmlsZS9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX0uZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZS5zbmFrZUNhc2UoKX19X3VpX21vYmlsZS9zcmMve3tuYW1lLnNuYWtlQ2FzZSgpfX1fdGhlbWUuZGFydCc7CgppbXBvcnQgJ2hlbHBlcnMvaGVscGVycy5kYXJ0JzsKCnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX1UaGVtZT8gdGhlbWUsCn0pIHsKICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICB0aGVtZTogdGhlbWUsCiAgKTsKfQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCd7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fScsICgpIHsKICAgIGdvbGRlblRlc3QoCiAgICAgICdyZW5kZXJzIGNvcnJlY3RseScsCiAgICAgIGZpbGVOYW1lOiAne3tuYW1lLnNuYWtlQ2FzZSgpfX0nLAogICAgICBidWlsZGVyOiAoKSA9PiBHb2xkZW5UZXN0R3JvdXAoCiAgICAgICAgc2NlbmFyaW9Db25zdHJhaW50czoKICAgICAgICAgICAgY29uc3QgQm94Q29uc3RyYWludHMobWluV2lkdGg6IDI1MCwgbWF4SGVpZ2h0OiA1MDApLAogICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdsaWdodCAtIHdpdGggdGhlbWUnLAogICAgICAgICAgICBjaGlsZDogYXBwV3JhcHBlcigKICAgICAgICAgICAgICB0aGVtZU1vZGU6IFRoZW1lTW9kZS5saWdodCwKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgKICAgICAgICAgICAgICAgIHRoZW1lOgogICAgICAgICAgICAgICAgICAgIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19e3tuYW1lLnBhc2NhbENhc2UoKX19VGhlbWUoYmFja2dyb3VuZENvbG9yOiBDb2xvcigweEZGMTJGRjEyKSwpLAogICAgICAgICAgICAgICksCiAgICAgICAgICAgICksCiAgICAgICAgICApLAogICAgICAgICAgR29sZGVuVGVzdFNjZW5hcmlvKAogICAgICAgICAgICBuYW1lOiAnbGlnaHQgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUubGlnaHQsCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICksCiAgICAgICAgICBHb2xkZW5UZXN0U2NlbmFyaW8oCiAgICAgICAgICAgIG5hbWU6ICdkYXJrIC0gd2l0aCB0aGVtZScsCiAgICAgICAgICAgIGNoaWxkOiBhcHBXcmFwcGVyKAogICAgICAgICAgICAgIHRoZW1lTW9kZTogVGhlbWVNb2RlLmRhcmssCiAgICAgICAgICAgICAgd2lkZ2V0OiBfZ2V0e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX17e25hbWUucGFzY2FsQ2FzZSgpfX0oCiAgICAgICAgICAgICAgICB0aGVtZToKICAgICAgICAgICAgICAgICAgICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fVRoZW1lKGJhY2tncm91bmRDb2xvcjogQ29sb3IoMHhGRjEyRkYxMiksKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIEdvbGRlblRlc3RTY2VuYXJpbygKICAgICAgICAgICAgbmFtZTogJ2RhcmsgLSB3aXRob3V0IHRoZW1lJywKICAgICAgICAgICAgY2hpbGQ6IGFwcFdyYXBwZXIoCiAgICAgICAgICAgICAgdGhlbWVNb2RlOiBUaGVtZU1vZGUuZGFyaywKICAgICAgICAgICAgICB3aWRnZXQ6IF9nZXR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fXt7bmFtZS5wYXNjYWxDYXNlKCl9fSgpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICAgIC8vIFRPRE86IGFkZCBtb3JlIHNjZW5hcmlvcwogICAgICAgIF0sCiAgICAgICksCiAgICApOwogIH0pOwp9e3svbW9iaWxlfX0K",
      "type": "text"
    },
    {
      "path": "test/src/{{name.snakeCase()}}_theme_test.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "themed_widget",
  "description":
      "A brick generating a themed widget of a ui package of a Rapid project.",
  "version": "0.1.0",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyB0aGVtZWRfd2lkZ2V0CgpUT0RP",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMAoKLSBUT0RPOiBEZXNjcmliZSBpbml0aWFsIHJlbGVhc2UuCg==",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string"},
    "name": {"type": "string"},
    "platform": {"type": "string"},
    "android": {"type": "boolean"},
    "ios": {"type": "boolean"},
    "linux": {"type": "boolean"},
    "macos": {"type": "boolean"},
    "web": {"type": "boolean"},
    "windows": {"type": "boolean"},
    "mobile": {"type": "boolean"}
  }
});
