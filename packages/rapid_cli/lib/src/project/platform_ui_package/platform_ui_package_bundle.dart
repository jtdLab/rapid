// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final platformUiPackageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCiMgTGlicmFyaWVzIHNob3VsZCBub3QgaW5jbHVkZSBwdWJzcGVjLmxvY2ssIHBlciBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9saWJyYXJpZXMvcHJpdmF0ZS1maWxlcyNwdWJzcGVjbG9jay4KL3B1YnNwZWMubG9jawoqKi9kb2MvYXBpLwouZGFydF90b29sLwoucGFja2FnZXMKYnVpbGQvCg==",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogcGFja2FnZTpmbHV0dGVyX2xpbnRzL2ZsdXR0ZXIueWFtbAoKIyBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgZmlsZSBjYW4gYmUgZm91bmQgYXQKIyBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9sYW5ndWFnZS9hbmFseXNpcy1vcHRpb25zCg==",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4wLjEKCiogVE9ETzogRGVzY3JpYmUgaW5pdGlhbCByZWxlYXNlLgo=",
      "type": "text"
    },
    {
      "path": "lib/src/app.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQvc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgZmluYWwge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lPyB0aGVtZTsKICBmaW5hbCBXaWRnZXQgYm9keTsKCiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogICAgcmVxdWlyZWQgdGhpcy5ib2R5LAogIH0pOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRoZW1lID0KICAgICAgICB0aGlzLnRoZW1lID8/IFRoZW1lLm9mKGNvbnRleHQpLmV4dGVuc2lvbjx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU+KCkhOwogICAgZmluYWwgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuYmFja2dyb3VuZENvbG9yOwoKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICAgIGJvZHk6IGJvZHksCiAgICApOwogIH0KfQp7ey9hbmRyb2lkfX17eyNpb3N9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIHNob3cgVGhlbWU7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2lvcy9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkIGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwogIGZpbmFsIFdpZGdldCBib2R5OwoKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgICByZXF1aXJlZCB0aGlzLmJvZHksCiAgfSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPQogICAgICAgIHRoaXMudGhlbWUgPz8gVGhlbWUub2YoY29udGV4dCkuZXh0ZW5zaW9uPHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT4oKSE7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgcmV0dXJuIEN1cGVydGlub1BhZ2VTY2FmZm9sZCgKICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3IsCiAgICAgIGNoaWxkOiBib2R5LAogICAgKTsKICB9Cn0Ke3svaW9zfX17eyNsaW51eH19CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9saW51eC9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkIGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwogIGZpbmFsIFdpZGdldCBib2R5OwoKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgICByZXF1aXJlZCB0aGlzLmJvZHksCiAgfSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPQogICAgICAgIHRoaXMudGhlbWUgPz8gVGhlbWUub2YoY29udGV4dCkuZXh0ZW5zaW9uPHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT4oKSE7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICAgYm9keTogYm9keSwKICAgICk7CiAgfQp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL2N1cGVydGluby5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgc2hvdyBUaGVtZTsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbWFjb3Mvc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWFjb3NfdWkvbWFjb3NfdWkuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkIGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwogIGZpbmFsIExpc3Q8V2lkZ2V0PiBjaGlsZHJlbjsKCiAgY29uc3Qge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCh7CiAgICBzdXBlci5rZXksCiAgICB0aGlzLnRoZW1lLAogICAgcmVxdWlyZWQgdGhpcy5jaGlsZHJlbiwKICB9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9CiAgICAgICAgdGhpcy50aGVtZSA/PyBUaGVtZS5vZihjb250ZXh0KS5leHRlbnNpb248e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lPigpITsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICByZXR1cm4gUGxhdGZvcm1NZW51QmFyKAogICAgICBtZW51czogY29uc3QgW10sCiAgICAgIGNoaWxkOiBNYWNvc1dpbmRvdygKICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICAgICBjaGlsZDogTWFjb3NTY2FmZm9sZCgKICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLAogICAgICAgICksCiAgICAgICksCiAgICApOwogIH0KfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dlYi9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkIGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBmaW5hbCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWU/IHRoZW1lOwogIGZpbmFsIFdpZGdldCBib2R5OwoKICBjb25zdCB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkKHsKICAgIHN1cGVyLmtleSwKICAgIHRoaXMudGhlbWUsCiAgICByZXF1aXJlZCB0aGlzLmJvZHksCiAgfSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGhlbWUgPQogICAgICAgIHRoaXMudGhlbWUgPz8gVGhlbWUub2YoY29udGV4dCkuZXh0ZW5zaW9uPHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT4oKSE7CiAgICBmaW5hbCBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5iYWNrZ3JvdW5kQ29sb3I7CgogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmRDb2xvciwKICAgICAgYm9keTogYm9keSwKICAgICk7CiAgfQp9Cnt7L3dlYn19e3sjd2luZG93c319CmltcG9ydCAncGFja2FnZTpmbHVlbnRfdWkvZmx1ZW50X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBzaG93IFRoZW1lOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV93aW5kb3dzL3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQgZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGZpbmFsIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZT8gdGhlbWU7CiAgZmluYWwgV2lkZ2V0IGJvZHk7CgogIGNvbnN0IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoewogICAgc3VwZXIua2V5LAogICAgdGhpcy50aGVtZSwKICAgIHJlcXVpcmVkIHRoaXMuYm9keSwKICB9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aGVtZSA9CiAgICAgICAgdGhpcy50aGVtZSA/PyBUaGVtZS5vZihjb250ZXh0KS5leHRlbnNpb248e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lPigpITsKICAgIGZpbmFsIGJhY2tncm91bmRDb2xvciA9IHRoZW1lLmJhY2tncm91bmRDb2xvcjsKCiAgICByZXR1cm4gTmF2aWdhdGlvblZpZXcoCiAgICAgIGNvbnRlbnQ6IENvbnRhaW5lcigKICAgICAgICBjb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICAgIGNoaWxkOiBib2R5LAogICAgICApLAogICAgKTsKICB9Cn0Ke3svd2luZG93c319",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold_theme.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3NjYWZmb2xkX3RoZW1lLnRhaWxvci5kYXJ0JzsKCkB0YWlsb3JDb21wb25lbnQKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQucHJpbWFyeSwKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLnByaW1hcnkKICBdOwp9Cnt7L2FuZHJvaWR9fXt7I2lvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICdzY2FmZm9sZF90aGVtZS50YWlsb3IuZGFydCc7CgpAdGFpbG9yQ29tcG9uZW50CmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5CiAgXTsKfQp7ey9pb3N9fXt7I2xpbnV4fX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3NjYWZmb2xkX3RoZW1lLnRhaWxvci5kYXJ0JzsKCkB0YWlsb3JDb21wb25lbnQKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQucHJpbWFyeSwKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLnByaW1hcnkKICBdOwp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICdzY2FmZm9sZF90aGVtZS50YWlsb3IuZGFydCc7CgpAdGFpbG9yQ29tcG9uZW50CmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5CiAgXTsKfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0aGVtZV90YWlsb3JfYW5ub3RhdGlvbi90aGVtZV90YWlsb3JfYW5ub3RhdGlvbi5kYXJ0JzsKCnBhcnQgJ3NjYWZmb2xkX3RoZW1lLnRhaWxvci5kYXJ0JzsKCkB0YWlsb3JDb21wb25lbnQKY2xhc3MgXyR7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUgewogIHN0YXRpYyBMaXN0PENvbG9yPiBiYWNrZ3JvdW5kQ29sb3IgPSBbCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQucHJpbWFyeSwKICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLnByaW1hcnkKICBdOwp9Cnt7L3dlYn19e3sjd2luZG93c319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6dGhlbWVfdGFpbG9yX2Fubm90YXRpb24vdGhlbWVfdGFpbG9yX2Fubm90YXRpb24uZGFydCc7CgpwYXJ0ICdzY2FmZm9sZF90aGVtZS50YWlsb3IuZGFydCc7CgpAdGFpbG9yQ29tcG9uZW50CmNsYXNzIF8ke3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lIHsKICBzdGF0aWMgTGlzdDxDb2xvcj4gYmFja2dyb3VuZENvbG9yID0gWwogICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LnByaW1hcnksCiAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyay5wcmltYXJ5CiAgXTsKfQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/scaffold_theme.tailor.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/theme_extensions.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC97e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQuZGFydCc7CgpmaW5hbCBsaWdodEV4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+ewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5saWdodCwKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCn07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj57CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmRhcmssCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCn07Cnt7L2FuZHJvaWR9fXt7I2lvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9pb3Mve3twcm9qZWN0X25hbWV9fV91aV9pb3MuZGFydCc7CgpmaW5hbCBsaWdodEV4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+ewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5saWdodCwKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCn07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj57CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmRhcmssCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCn07Cnt7L2lvc319e3sjbGludXh9fQppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9saW51eC97e3Byb2plY3RfbmFtZX19X3VpX2xpbnV4LmRhcnQnOwoKZmluYWwgbGlnaHRFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPnsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUubGlnaHQsCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0LAp9OwoKZmluYWwgZGFya0V4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+ewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5kYXJrLAogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5kYXJrLAp9Owp7ey9saW51eH19e3sjbWFjb3N9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbWFjb3Mve3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy5kYXJ0JzsKCmZpbmFsIGxpZ2h0RXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj57CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LAogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5saWdodCwKfTsKCmZpbmFsIGRhcmtFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPnsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyaywKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyaywKfTsKe3svbWFjb3N9fXt7I3dlYn19CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dlYi97e3Byb2plY3RfbmFtZX19X3VpX3dlYi5kYXJ0JzsKCmZpbmFsIGxpZ2h0RXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj57CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmxpZ2h0LAogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5saWdodCwKfTsKCmZpbmFsIGRhcmtFeHRlbnNpb25zID0gPFRoZW1lRXh0ZW5zaW9uPnsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUNvbG9yVGhlbWUuZGFyaywKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyaywKfTsKe3svd2VifX17eyN3aW5kb3dzfX0KaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy97e3Byb2plY3RfbmFtZX19X3VpX3dpbmRvd3MuZGFydCc7CgpmaW5hbCBsaWdodEV4dGVuc2lvbnMgPSA8VGhlbWVFeHRlbnNpb24+ewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19Q29sb3JUaGVtZS5saWdodCwKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQsCn07CgpmaW5hbCBkYXJrRXh0ZW5zaW9ucyA9IDxUaGVtZUV4dGVuc2lvbj57CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Db2xvclRoZW1lLmRhcmssCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcmssCn07Cnt7L3dpbmRvd3N9fQ==",
      "type": "text"
    },
    {
      "path":
          "lib/{{project_name}}_ui_{{#android}}android{{/android}}{{#ios}}ios{{/ios}}{{#linux}}linux{{/linux}}{{#macos}}macos{{/macos}}{{#web}}web{{/web}}{{#windows}}windows{{/windows}}.dart",
      "data":
          "e3sjYW5kcm9pZH19Ly8vIFdpZGdldHMgYW5kIHRoZW1lcyBpbXBsZW1lbnRpbmcge3twcm9qZWN0X25hbWUudGl0bGVDYXNlKCl9fSBkZXNpZ24gbGFuZ3VhZ2UgZm9yIEFuZHJvaWQuCi8vLwovLy8gVG8gdXNlLCBpbXBvcnQgYHBhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9hbmRyb2lkL3t7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC5kYXJ0YC4KbGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQ7CgpleHBvcnQgJ3NyYy9hcHAuZGFydCc7CmV4cG9ydCAnc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZC5kYXJ0JzsKCmV4cG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkuZGFydCc7CmV4cG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIGhpZGUgUm91dGVyOwp7ey9hbmRyb2lkfX17eyNpb3N9fQovLy8gV2lkZ2V0cyBhbmQgdGhlbWVzIGltcGxlbWVudGluZyB7e3Byb2plY3RfbmFtZS50aXRsZUNhc2UoKX19IGRlc2lnbiBsYW5ndWFnZSBmb3IgaU9TLgovLy8KLy8vIFRvIHVzZSwgaW1wb3J0IGBwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfaW9zL3t7cHJvamVjdF9uYW1lfX1fdWlfaW9zLmRhcnRgLgpsaWJyYXJ5IHt7cHJvamVjdF9uYW1lfX1fdWlfaW9zOwoKZXhwb3J0ICdzcmMvYXBwLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKZXhwb3J0ICdzcmMvc2NhZmZvbGQuZGFydCc7CgpleHBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwpleHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9jdXBlcnRpbm8uZGFydCcgaGlkZSBSb3V0ZXI7CmV4cG9ydCAncGFja2FnZTpjdXBlcnRpbm9faWNvbnMvY3VwZXJ0aW5vX2ljb25zLmRhcnQnOwp7ey9pb3N9fXt7I2xpbnV4fX0KLy8vIFdpZGdldHMgYW5kIHRoZW1lcyBpbXBsZW1lbnRpbmcge3twcm9qZWN0X25hbWUudGl0bGVDYXNlKCl9fSBkZXNpZ24gbGFuZ3VhZ2UgZm9yIExpbnV4LgovLy8KLy8vIFRvIHVzZSwgaW1wb3J0IGBwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbGludXgve3twcm9qZWN0X25hbWV9fV91aV9saW51eC5kYXJ0YC4KbGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3VpX2xpbnV4OwoKZXhwb3J0ICdzcmMvYXBwLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKZXhwb3J0ICdzcmMvc2NhZmZvbGQuZGFydCc7CgpleHBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwpleHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBoaWRlIFJvdXRlcjsKe3svbGludXh9fXt7I21hY29zfX0KLy8vIFdpZGdldHMgYW5kIHRoZW1lcyBpbXBsZW1lbnRpbmcge3twcm9qZWN0X25hbWUudGl0bGVDYXNlKCl9fSBkZXNpZ24gbGFuZ3VhZ2UgZm9yIG1hY09TLgovLy8KLy8vIFRvIHVzZSwgaW1wb3J0IGBwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbWFjb3Mve3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy5kYXJ0YC4KbGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3VpX21hY29zOwoKZXhwb3J0ICdzcmMvYXBwLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKZXhwb3J0ICdzcmMvc2NhZmZvbGQuZGFydCc7CgpleHBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwpleHBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnIGhpZGUgUm91dGVyOwpleHBvcnQgJ3BhY2thZ2U6bWFjb3NfdWkvbWFjb3NfdWkuZGFydCc7CmV4cG9ydCAncGFja2FnZTpjdXBlcnRpbm9faWNvbnMvY3VwZXJ0aW5vX2ljb25zLmRhcnQnOwp7ey9tYWNvc319e3sjd2VifX0KLy8vIFdpZGdldHMgYW5kIHRoZW1lcyBpbXBsZW1lbnRpbmcge3twcm9qZWN0X25hbWUudGl0bGVDYXNlKCl9fSBkZXNpZ24gbGFuZ3VhZ2UgZm9yIFdlYi4KLy8vCi8vLyBUbyB1c2UsIGltcG9ydCBgcGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dlYi97e3Byb2plY3RfbmFtZX19X3VpX3dlYi5kYXJ0YC4KbGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3VpX3dlYjsKCmV4cG9ydCAnc3JjL2FwcC5kYXJ0JzsKZXhwb3J0ICdzcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7CmV4cG9ydCAnc3JjL3NjYWZmb2xkLmRhcnQnOwoKZXhwb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWkve3twcm9qZWN0X25hbWV9fV91aS5kYXJ0JzsKZXhwb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgaGlkZSBSb3V0ZXI7Cnt7L3dlYn19e3sjd2luZG93c319Ci8vLyBXaWRnZXRzIGFuZCB0aGVtZXMgaW1wbGVtZW50aW5nIHt7cHJvamVjdF9uYW1lLnRpdGxlQ2FzZSgpfX0gZGVzaWduIGxhbmd1YWdlIGZvciBXaW5kb3dzLgovLy8KLy8vIFRvIHVzZSwgaW1wb3J0IGBwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy97e3Byb2plY3RfbmFtZX19X3VpX3dpbmRvd3MuZGFydGAuCmxpYnJhcnkge3twcm9qZWN0X25hbWV9fV91aV93aW5kb3dzOwoKZXhwb3J0ICdzcmMvYXBwLmRhcnQnOwpleHBvcnQgJ3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKZXhwb3J0ICdzcmMvc2NhZmZvbGQuZGFydCc7CgpleHBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aS97e3Byb2plY3RfbmFtZX19X3VpLmRhcnQnOwpleHBvcnQgJ3BhY2thZ2U6Zmx1ZW50X3VpL2ZsdWVudF91aS5kYXJ0JyBoaWRlIFJvdXRlcjsKe3svd2luZG93c319",
      "type": "text"
    },
    {
      "path": "LICENSE",
      "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "PCEtLQpUaGlzIFJFQURNRSBkZXNjcmliZXMgdGhlIHBhY2thZ2UuIElmIHlvdSBwdWJsaXNoIHRoaXMgcGFja2FnZSB0byBwdWIuZGV2LAp0aGlzIFJFQURNRSdzIGNvbnRlbnRzIGFwcGVhciBvbiB0aGUgbGFuZGluZyBwYWdlIGZvciB5b3VyIHBhY2thZ2UuCgpGb3IgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHdyaXRlIGEgZ29vZCBwYWNrYWdlIFJFQURNRSwgc2VlIHRoZSBndWlkZSBmb3IKW3dyaXRpbmcgcGFja2FnZSBwYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL3dyaXRpbmctcGFja2FnZS1wYWdlcykuCgpGb3IgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBkZXZlbG9waW5nIHBhY2thZ2VzLCBzZWUgdGhlIERhcnQgZ3VpZGUgZm9yCltjcmVhdGluZyBwYWNrYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL2NyZWF0ZS1saWJyYXJ5LXBhY2thZ2VzKQphbmQgdGhlIEZsdXR0ZXIgZ3VpZGUgZm9yCltkZXZlbG9waW5nIHBhY2thZ2VzIGFuZCBwbHVnaW5zXShodHRwczovL2ZsdXR0ZXIuZGV2L2RldmVsb3BpbmctcGFja2FnZXMpLgotLT4KClRPRE86IFB1dCBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWNrYWdlIGhlcmUgdGhhdCBoZWxwcyBwb3RlbnRpYWwgdXNlcnMKa25vdyB3aGV0aGVyIHRoaXMgcGFja2FnZSBtaWdodCBiZSB1c2VmdWwgZm9yIHRoZW0uCgojIyBGZWF0dXJlcwoKVE9ETzogTGlzdCB3aGF0IHlvdXIgcGFja2FnZSBjYW4gZG8uIE1heWJlIGluY2x1ZGUgaW1hZ2VzLCBnaWZzLCBvciB2aWRlb3MuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKClRPRE86IExpc3QgcHJlcmVxdWlzaXRlcyBhbmQgcHJvdmlkZSBvciBwb2ludCB0byBpbmZvcm1hdGlvbiBvbiBob3cgdG8Kc3RhcnQgdXNpbmcgdGhlIHBhY2thZ2UuCgojIyBVc2FnZQoKVE9ETzogSW5jbHVkZSBzaG9ydCBhbmQgdXNlZnVsIGV4YW1wbGVzIGZvciBwYWNrYWdlIHVzZXJzLiBBZGQgbG9uZ2VyIGV4YW1wbGVzCnRvIGAvZXhhbXBsZWAgZm9sZGVyLgoKYGBgZGFydApjb25zdCBsaWtlID0gJ3NhbXBsZSc7CmBgYAoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKVE9ETzogVGVsbCB1c2VycyBtb3JlIGFib3V0IHRoZSBwYWNrYWdlOiB3aGVyZSB0byBmaW5kIG1vcmUgaW5mb3JtYXRpb24sIGhvdyB0bwpjb250cmlidXRlIHRvIHRoZSBwYWNrYWdlLCBob3cgdG8gZmlsZSBpc3N1ZXMsIHdoYXQgcmVzcG9uc2UgdGhleSBjYW4gZXhwZWN0CmZyb20gdGhlIHBhY2thZ2UgYXV0aG9ycywgYW5kIG1vcmUuCg==",
      "type": "text"
    },
    {
      "path": "test/helpers/pump_app.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9hbmRyb2lkL3NyYy9hcHAuZGFydCc7CgpleHRlbnNpb24gV2lkZ2V0VGVzdGVyWCBvbiBXaWRnZXRUZXN0ZXIgewogIC8vLyBQdW1wIFt3aWRnZXRdIHdyYXBwZWQgd2l0aCBhIFt7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcF0uCiAgRnV0dXJlPHZvaWQ+IHB1bXBBcHAoCiAgICBXaWRnZXQgd2lkZ2V0LCB7CiAgICBMb2NhbGU/IGxvY2FsZSwKICAgIFRoZW1lTW9kZT8gdGhlbWVNb2RlLAogIH0pID0+CiAgICAgIHB1bXBXaWRnZXQoCiAgICAgICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHAoCiAgICAgICAgICBzdXBwb3J0ZWRMb2NhbGVzOiBbbG9jYWxlID8/IGNvbnN0IExvY2FsZSgnZW4nKV0sCiAgICAgICAgICBsb2NhbGU6IGxvY2FsZSwKICAgICAgICAgIHRoZW1lTW9kZTogdGhlbWVNb2RlLAogICAgICAgICAgaG9tZTogd2lkZ2V0LAogICAgICAgICksCiAgICAgICk7Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9pb3Mvc3JjL2FwcC5kYXJ0JzsKCmV4dGVuc2lvbiBXaWRnZXRUZXN0ZXJYIG9uIFdpZGdldFRlc3RlciB7CiAgLy8vIFB1bXAgW3dpZGdldF0gd3JhcHBlZCB3aXRoIGEgW3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwXS4KICBGdXR1cmU8dm9pZD4gcHVtcEFwcCgKICAgIFdpZGdldCB3aWRnZXQsIHsKICAgIExvY2FsZT8gbG9jYWxlLAogICAgQnJpZ2h0bmVzcz8gYnJpZ2h0bmVzcywKICB9KSA9PgogICAgICBwdW1wV2lkZ2V0KAogICAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKAogICAgICAgICAgc3VwcG9ydGVkTG9jYWxlczogW2xvY2FsZSA/PyBjb25zdCBMb2NhbGUoJ2VuJyldLAogICAgICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgICAgICBicmlnaHRuZXNzOiBicmlnaHRuZXNzLAogICAgICAgICAgaG9tZTogd2lkZ2V0LAogICAgICAgICksCiAgICAgICk7Cn0Ke3svaW9zfX17eyNsaW51eH19CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbGludXgvc3JjL2FwcC5kYXJ0JzsKCmV4dGVuc2lvbiBXaWRnZXRUZXN0ZXJYIG9uIFdpZGdldFRlc3RlciB7CiAgLy8vIFB1bXAgW3dpZGdldF0gd3JhcHBlZCB3aXRoIGEgW3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwXS4KICBGdXR1cmU8dm9pZD4gcHVtcEFwcCgKICAgIFdpZGdldCB3aWRnZXQsIHsKICAgIExvY2FsZT8gbG9jYWxlLAogICAgVGhlbWVNb2RlPyB0aGVtZU1vZGUsCiAgfSkgPT4KICAgICAgcHVtcFdpZGdldCgKICAgICAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCgKICAgICAgICAgIHN1cHBvcnRlZExvY2FsZXM6IFtsb2NhbGUgPz8gY29uc3QgTG9jYWxlKCdlbicpXSwKICAgICAgICAgIGxvY2FsZTogbG9jYWxlLAogICAgICAgICAgdGhlbWVNb2RlOiB0aGVtZU1vZGUsCiAgICAgICAgICBob21lOiB3aWRnZXQsCiAgICAgICAgKSwKICAgICAgKTsKfQp7ey9saW51eH19e3sjbWFjb3N9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX21hY29zL3NyYy9hcHAuZGFydCc7CgpleHRlbnNpb24gV2lkZ2V0VGVzdGVyWCBvbiBXaWRnZXRUZXN0ZXIgewogIC8vLyBQdW1wIFt3aWRnZXRdIHdyYXBwZWQgd2l0aCBhIFt7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcF0uCiAgRnV0dXJlPHZvaWQ+IHB1bXBBcHAoCiAgICBXaWRnZXQgd2lkZ2V0LCB7CiAgICBMb2NhbGU/IGxvY2FsZSwKICAgIEJyaWdodG5lc3M/IGJyaWdodG5lc3MsCiAgfSkgPT4KICAgICAgcHVtcFdpZGdldCgKICAgICAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCgKICAgICAgICAgIHN1cHBvcnRlZExvY2FsZXM6IFtsb2NhbGUgPz8gY29uc3QgTG9jYWxlKCdlbicpXSwKICAgICAgICAgIGxvY2FsZTogbG9jYWxlLAogICAgICAgICAgYnJpZ2h0bmVzczogYnJpZ2h0bmVzcywKICAgICAgICAgIGhvbWU6IHdpZGdldCwKICAgICAgICApLAogICAgICApOwp9Cnt7L21hY29zfX17eyN3ZWJ9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dlYi9zcmMvYXBwLmRhcnQnOwoKZXh0ZW5zaW9uIFdpZGdldFRlc3Rlclggb24gV2lkZ2V0VGVzdGVyIHsKICAvLy8gUHVtcCBbd2lkZ2V0XSB3cmFwcGVkIHdpdGggYSBbe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHBdLgogIEZ1dHVyZTx2b2lkPiBwdW1wQXBwKAogICAgV2lkZ2V0IHdpZGdldCwgewogICAgTG9jYWxlPyBsb2NhbGUsCiAgICBUaGVtZU1vZGU/IHRoZW1lTW9kZSwKICB9KSA9PgogICAgICBwdW1wV2lkZ2V0KAogICAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKAogICAgICAgICAgc3VwcG9ydGVkTG9jYWxlczogW2xvY2FsZSA/PyBjb25zdCBMb2NhbGUoJ2VuJyldLAogICAgICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgICAgICB0aGVtZU1vZGU6IHRoZW1lTW9kZSwKICAgICAgICAgIGhvbWU6IHdpZGdldCwKICAgICAgICApLAogICAgICApOwp9Cnt7L3dlYn19e3sjd2luZG93c319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy9zcmMvYXBwLmRhcnQnOwoKZXh0ZW5zaW9uIFdpZGdldFRlc3Rlclggb24gV2lkZ2V0VGVzdGVyIHsKICAvLy8gUHVtcCBbd2lkZ2V0XSB3cmFwcGVkIHdpdGggYSBbe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHBdLgogIEZ1dHVyZTx2b2lkPiBwdW1wQXBwKAogICAgV2lkZ2V0IHdpZGdldCwgewogICAgTG9jYWxlPyBsb2NhbGUsCiAgICBUaGVtZU1vZGU/IHRoZW1lTW9kZSwKICB9KSA9PgogICAgICBwdW1wV2lkZ2V0KAogICAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKAogICAgICAgICAgc3VwcG9ydGVkTG9jYWxlczogW2xvY2FsZSA/PyBjb25zdCBMb2NhbGUoJ2VuJyldLAogICAgICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgICAgICB0aGVtZU1vZGU6IHRoZW1lTW9kZSwKICAgICAgICAgIGhvbWU6IHdpZGdldCwKICAgICAgICApLAogICAgICApOwp9Cnt7L3dpbmRvd3N9fQ==",
      "type": "text"
    },
    {
      "path": "test/src/app_test.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/scaffold_test.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "test/src/scaffold_theme_test.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQvc3JjL3NjYWZmb2xkX3RoZW1lLmRhcnQnOwoKdm9pZCBtYWluKCkgewogIGdyb3VwKCd7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUnLCAoKSB7CiAgICBncm91cCgnLmxpZ2h0JywgKCkgewogICAgICBmaW5hbCBsaWdodCA9IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5saWdodDsKCiAgICAgIHRlc3QoJ2JhY2tncm91bmRDb2xvciByZXR1cm5zICNGRkZGRkYnLCAoKSB7CiAgICAgICAgZXhwZWN0KGxpZ2h0LmJhY2tncm91bmRDb2xvci52YWx1ZSwgMHhGRkZGRkZGRik7CiAgICAgIH0pOwogICAgfSk7CgogICAgZ3JvdXAoJy5kYXJrJywgKCkgewogICAgICBmaW5hbCBkYXJrID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmRhcms7CgogICAgICB0ZXN0KCdiYWNrZ3JvdW5kQ29sb3IgcmV0dXJucyAjMjIyMjIyJywgKCkgewogICAgICAgIGV4cGVjdChkYXJrLmJhY2tncm91bmRDb2xvci52YWx1ZSwgMHhGRjIyMjIyMik7CiAgICAgIH0pOwogICAgfSk7CiAgfSk7Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2lvcy9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZScsICgpIHsKICAgIGdyb3VwKCcubGlnaHQnLCAoKSB7CiAgICAgIGZpbmFsIGxpZ2h0ID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0OwoKICAgICAgdGVzdCgnYmFja2dyb3VuZENvbG9yIHJldHVybnMgI0ZGRkZGRicsICgpIHsKICAgICAgICBleHBlY3QobGlnaHQuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGRkZGRkZGKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBncm91cCgnLmRhcmsnLCAoKSB7CiAgICAgIGZpbmFsIGRhcmsgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyazsKCiAgICAgIHRlc3QoJ2JhY2tncm91bmRDb2xvciByZXR1cm5zICMyMjIyMjInLCAoKSB7CiAgICAgICAgZXhwZWN0KGRhcmsuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGMjIyMjIyKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQp7ey9pb3N9fXt7I2xpbnV4fX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2xpbnV4L3NyYy9zY2FmZm9sZF90aGVtZS5kYXJ0JzsKCnZvaWQgbWFpbigpIHsKICBncm91cCgne3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lJywgKCkgewogICAgZ3JvdXAoJy5saWdodCcsICgpIHsKICAgICAgZmluYWwgbGlnaHQgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUubGlnaHQ7CgogICAgICB0ZXN0KCdiYWNrZ3JvdW5kQ29sb3IgcmV0dXJucyAjRkZGRkZGJywgKCkgewogICAgICAgIGV4cGVjdChsaWdodC5iYWNrZ3JvdW5kQ29sb3IudmFsdWUsIDB4RkZGRkZGRkYpOwogICAgICB9KTsKICAgIH0pOwoKICAgIGdyb3VwKCcuZGFyaycsICgpIHsKICAgICAgZmluYWwgZGFyayA9IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZS5kYXJrOwoKICAgICAgdGVzdCgnYmFja2dyb3VuZENvbG9yIHJldHVybnMgIzIyMjIyMicsICgpIHsKICAgICAgICBleHBlY3QoZGFyay5iYWNrZ3JvdW5kQ29sb3IudmFsdWUsIDB4RkYyMjIyMjIpOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZScsICgpIHsKICAgIGdyb3VwKCcubGlnaHQnLCAoKSB7CiAgICAgIGZpbmFsIGxpZ2h0ID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0OwoKICAgICAgdGVzdCgnYmFja2dyb3VuZENvbG9yIHJldHVybnMgI0ZGRkZGRicsICgpIHsKICAgICAgICBleHBlY3QobGlnaHQuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGRkZGRkZGKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBncm91cCgnLmRhcmsnLCAoKSB7CiAgICAgIGZpbmFsIGRhcmsgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyazsKCiAgICAgIHRlc3QoJ2JhY2tncm91bmRDb2xvciByZXR1cm5zICMyMjIyMjInLCAoKSB7CiAgICAgICAgZXhwZWN0KGRhcmsuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGMjIyMjIyKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dlYi9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZScsICgpIHsKICAgIGdyb3VwKCcubGlnaHQnLCAoKSB7CiAgICAgIGZpbmFsIGxpZ2h0ID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0OwoKICAgICAgdGVzdCgnYmFja2dyb3VuZENvbG9yIHJldHVybnMgI0ZGRkZGRicsICgpIHsKICAgICAgICBleHBlY3QobGlnaHQuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGRkZGRkZGKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBncm91cCgnLmRhcmsnLCAoKSB7CiAgICAgIGZpbmFsIGRhcmsgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyazsKCiAgICAgIHRlc3QoJ2JhY2tncm91bmRDb2xvciByZXR1cm5zICMyMjIyMjInLCAoKSB7CiAgICAgICAgZXhwZWN0KGRhcmsuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGMjIyMjIyKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQp7ey93ZWJ9fXt7I3dpbmRvd3N9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy9zcmMvc2NhZmZvbGRfdGhlbWUuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGRUaGVtZScsICgpIHsKICAgIGdyb3VwKCcubGlnaHQnLCAoKSB7CiAgICAgIGZpbmFsIGxpZ2h0ID0ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZFRoZW1lLmxpZ2h0OwoKICAgICAgdGVzdCgnYmFja2dyb3VuZENvbG9yIHJldHVybnMgI0ZGRkZGRicsICgpIHsKICAgICAgICBleHBlY3QobGlnaHQuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGRkZGRkZGKTsKICAgICAgfSk7CiAgICB9KTsKCiAgICBncm91cCgnLmRhcmsnLCAoKSB7CiAgICAgIGZpbmFsIGRhcmsgPSB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkVGhlbWUuZGFyazsKCiAgICAgIHRlc3QoJ2JhY2tncm91bmRDb2xvciByZXR1cm5zICMyMjIyMjInLCAoKSB7CiAgICAgICAgZXhwZWN0KGRhcmsuYmFja2dyb3VuZENvbG9yLnZhbHVlLCAweEZGMjIyMjIyKTsKICAgICAgfSk7CiAgICB9KTsKICB9KTsKfQp7ey93aW5kb3dzfX0=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "platform_ui_package",
  "description": "A brick generating a platform ui package of a Rapid project.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0-dev.41 <0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBwbGF0Zm9ybV91aV9wYWNrYWdlCgpbIVtQb3dlcmVkIGJ5IE1hc29uXShodHRwczovL2ltZy5zaGllbGRzLmlvL2VuZHBvaW50P3VybD1odHRwcyUzQSUyRiUyRnRpbnl1cmwuY29tJTJGbWFzb24tYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24pCgpBIG5ldyBicmljayBjcmVhdGVkIHdpdGggdGhlIE1hc29uIENMSS4KCl9HZW5lcmF0ZWQgYnkgW21hc29uXVsxXSDwn6exXwoKIyMgR2V0dGluZyBTdGFydGVkIPCfmoAKClRoaXMgaXMgYSBzdGFydGluZyBwb2ludCBmb3IgYSBuZXcgYnJpY2suCkEgZmV3IHJlc291cmNlcyB0byBnZXQgeW91IHN0YXJ0ZWQgaWYgdGhpcyBpcyB5b3VyIGZpcnN0IGJyaWNrIHRlbXBsYXRlOgoKLSBbT2ZmaWNpYWwgTWFzb24gRG9jdW1lbnRhdGlvbl1bMl0KLSBbQ29kZSBnZW5lcmF0aW9uIHdpdGggTWFzb24gQmxvZ11bM10KLSBbVmVyeSBHb29kIExpdmVzdHJlYW06IEZlbGl4IEFuZ2Vsb3YgRGVtb3MgTWFzb25dWzRdCgpbMV06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbgpbMl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbi90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXNvbl9jbGkjcmVhZG1lClszXTogaHR0cHM6Ly92ZXJ5Z29vZC52ZW50dXJlcy9ibG9nL2NvZGUtZ2VuZXJhdGlvbi13aXRoLW1hc29uCls0XTogaHR0cHM6Ly95b3V0dS5iZS9HNFBUakE2dHBUVQo=",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string", "description": "The project name"},
    "example": {
      "type": "boolean",
      "description":
          "Wheter the project contains example features and their tests"
    },
    "android": {
      "type": "boolean",
      "description": "The project supports the Android platform"
    },
    "ios": {
      "type": "boolean",
      "description": "The project supports the iOS platform"
    },
    "web": {
      "type": "boolean",
      "description": "The project supports the Web platform"
    },
    "linux": {
      "type": "boolean",
      "description": "The project supports the Linux platform"
    },
    "macos": {
      "type": "boolean",
      "description": "The project supports the macOS platform"
    },
    "windows": {
      "type": "boolean",
      "description": "The project supports the Windows platform"
    }
  }
});
