// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final platformCustomFeaturePackageBundle =
    MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCiMgTGlicmFyaWVzIHNob3VsZCBub3QgaW5jbHVkZSBwdWJzcGVjLmxvY2ssIHBlciBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9saWJyYXJpZXMvcHJpdmF0ZS1maWxlcyNwdWJzcGVjbG9jay4KL3B1YnNwZWMubG9jawoqKi9kb2MvYXBpLwouZGFydF90b29sLwoucGFja2FnZXMKYnVpbGQvCg==",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogcGFja2FnZTpmbHV0dGVyX2xpbnRzL2ZsdXR0ZXIueWFtbAoKIyBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgZmlsZSBjYW4gYmUgZm91bmQgYXQKIyBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9sYW5ndWFnZS9hbmFseXNpcy1vcHRpb25zCg==",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4wLjEKCiogVE9ETzogRGVzY3JpYmUgaW5pdGlhbCByZWxlYXNlLgo=",
      "type": "text"
    },
    {
      "path": "l10n.yaml",
      "data":
          "e3sjYW5kcm9pZH19YXJiLWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbi9hcmIKb3V0cHV0LWNsYXNzOiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFuZHJvaWR7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zCm91dHB1dC1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4KdGVtcGxhdGUtYXJiLWZpbGU6IHt7bmFtZX19X2VuLmFyYgpvdXRwdXQtbG9jYWxpemF0aW9uLWZpbGU6IHt7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF97e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQKbnVsbGFibGUtZ2V0dGVyOiBmYWxzZQpzeW50aGV0aWMtcGFja2FnZTogZmFsc2UKe3svYW5kcm9pZH19e3sjaW9zfX0KYXJiLWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbi9hcmIKb3V0cHV0LWNsYXNzOiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMKb3V0cHV0LWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbgp0ZW1wbGF0ZS1hcmItZmlsZToge3tuYW1lfX1fZW4uYXJiCm91dHB1dC1sb2NhbGl6YXRpb24tZmlsZToge3twcm9qZWN0X25hbWV9fV9pb3Nfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L2lvc319e3sjbGludXh9fQphcmItZGlyOiBsaWIvc3JjL3ByZXNlbnRhdGlvbi9sMTBuL2FyYgpvdXRwdXQtY2xhc3M6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TGludXh7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zCm91dHB1dC1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4KdGVtcGxhdGUtYXJiLWZpbGU6IHt7bmFtZX19X2VuLmFyYgpvdXRwdXQtbG9jYWxpemF0aW9uLWZpbGU6IHt7cHJvamVjdF9uYW1lfX1fbGludXhfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L2xpbnV4fX17eyNtYWNvc319CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1NYWNvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMKb3V0cHV0LWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbgp0ZW1wbGF0ZS1hcmItZmlsZToge3tuYW1lfX1fZW4uYXJiCm91dHB1dC1sb2NhbGl6YXRpb24tZmlsZToge3twcm9qZWN0X25hbWV9fV9tYWNvc197e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQKbnVsbGFibGUtZ2V0dGVyOiBmYWxzZQpzeW50aGV0aWMtcGFja2FnZTogZmFsc2UKe3svbWFjb3N9fXt7I3dlYn19CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XZWJ7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zCm91dHB1dC1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4KdGVtcGxhdGUtYXJiLWZpbGU6IHt7bmFtZX19X2VuLmFyYgpvdXRwdXQtbG9jYWxpemF0aW9uLWZpbGU6IHt7cHJvamVjdF9uYW1lfX1fd2ViX3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydApudWxsYWJsZS1nZXR0ZXI6IGZhbHNlCnN5bnRoZXRpYy1wYWNrYWdlOiBmYWxzZQp7ey93ZWJ9fXt7I3dpbmRvd3N9fQphcmItZGlyOiBsaWIvc3JjL3ByZXNlbnRhdGlvbi9sMTBuL2FyYgpvdXRwdXQtY2xhc3M6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2luZG93c3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMKb3V0cHV0LWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbgp0ZW1wbGF0ZS1hcmItZmlsZToge3tuYW1lfX1fZW4uYXJiCm91dHB1dC1sb2NhbGl6YXRpb24tZmlsZToge3twcm9qZWN0X25hbWV9fV93aW5kb3dzX3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydApudWxsYWJsZS1nZXR0ZXI6IGZhbHNlCnN5bnRoZXRpYy1wYWNrYWdlOiBmYWxzZQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/injection.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JzsKCi8vLyBTZXR1cCBpbmplY3RhYmxlIHBhY2thZ2Ugd2hpY2ggZ2VuZXJhdGVzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvZGUuCi8vLwovLy8gRm9yIG1vcmUgaW5mbyBzZWU6IGh0dHBzOi8vcHViLmRldi9wYWNrYWdlcy9pbmplY3RhYmxlCkBJbmplY3RhYmxlSW5pdC5taWNyb1BhY2thZ2UoKQppbml0TWljcm9QYWNrYWdlKCkge30K",
      "type": "text"
    },
    {
      "path": "lib/src/injection.module.dart",
      "data":
          "e3sjYW5kcm9pZH19Ly9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19UGFja2FnZU1vZHVsZTtwYWNrYWdlOmpvbmFzX2RhdmlkX2FuZHJvaWRfe3tuYW1lfX0vc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IG5vX2xlYWRpbmdfdW5kZXJzY29yZXNfZm9yX2xpYnJhcnlfcHJlZml4ZXMKaW1wb3J0ICdkYXJ0OmFzeW5jJyBhcyBfaTI7CgppbXBvcnQgJ3BhY2thZ2U6aW5qZWN0YWJsZS9pbmplY3RhYmxlLmRhcnQnIGFzIF9pMTsKCi8vLyBpZ25vcmVfZm9yX2ZpbGU6IHVubmVjZXNzYXJ5X2xhbWJkYXMKLy8vIGlnbm9yZV9mb3JfZmlsZTogbGluZXNfbG9uZ2VyX3RoYW5fODBfY2hhcnMKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19UGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBbR2V0SXRdCiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7fQp9Cnt7L2FuZHJvaWR9fXt7I2lvc319Ci8vQEdlbmVyYXRlZE1pY3JvTW9kdWxlO3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19SW9ze3tuYW1lLnBhc2NhbENhc2UoKX19UGFja2FnZU1vZHVsZTtwYWNrYWdlOmpvbmFzX2RhdmlkX2lvc197e25hbWV9fS9zcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0Ci8vIEdFTkVSQVRFRCBDT0RFIC0gRE8gTk9UIE1PRElGWSBCWSBIQU5ECi8vIGlnbm9yZV9mb3JfZmlsZTogbm9fbGVhZGluZ191bmRlcnNjb3Jlc19mb3JfbGlicmFyeV9wcmVmaXhlcwppbXBvcnQgJ2RhcnQ6YXN5bmMnIGFzIF9pMjsKCmltcG9ydCAncGFja2FnZTppbmplY3RhYmxlL2luamVjdGFibGUuZGFydCcgYXMgX2kxOwoKLy8vIGlnbm9yZV9mb3JfZmlsZTogdW5uZWNlc3NhcnlfbGFtYmRhcwovLy8gaWdub3JlX2Zvcl9maWxlOiBsaW5lc19sb25nZXJfdGhhbl84MF9jaGFycwpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fVBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLy8gaW5pdGlhbGl6ZXMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBtYWluLXNjb3BlIGRlcGVuZGVuY2llcyBpbnNpZGUgb2YgW0dldEl0XQogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey9pb3N9fXt7I2xpbnV4fX0KLy9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1MaW51eHt7bmFtZS5wYXNjYWxDYXNlKCl9fVBhY2thZ2VNb2R1bGU7cGFja2FnZTpqb25hc19kYXZpZF9saW51eF97e25hbWV9fS9zcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0Ci8vIEdFTkVSQVRFRCBDT0RFIC0gRE8gTk9UIE1PRElGWSBCWSBIQU5ECi8vIGlnbm9yZV9mb3JfZmlsZTogbm9fbGVhZGluZ191bmRlcnNjb3Jlc19mb3JfbGlicmFyeV9wcmVmaXhlcwppbXBvcnQgJ2RhcnQ6YXN5bmMnIGFzIF9pMjsKCmltcG9ydCAncGFja2FnZTppbmplY3RhYmxlL2luamVjdGFibGUuZGFydCcgYXMgX2kxOwoKLy8vIGlnbm9yZV9mb3JfZmlsZTogdW5uZWNlc3NhcnlfbGFtYmRhcwovLy8gaWdub3JlX2Zvcl9maWxlOiBsaW5lc19sb25nZXJfdGhhbl84MF9jaGFycwpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxpbnV4e3tuYW1lLnBhc2NhbENhc2UoKX19UGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBbR2V0SXRdCiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7fQp9Cnt7L2xpbnV4fX17eyNtYWNvc319Ci8vQEdlbmVyYXRlZE1pY3JvTW9kdWxlO3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TWFjb3N7e25hbWUucGFzY2FsQ2FzZSgpfX1QYWNrYWdlTW9kdWxlO3BhY2thZ2U6am9uYXNfZGF2aWRfbWFjb3Nfe3tuYW1lfX0vc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IG5vX2xlYWRpbmdfdW5kZXJzY29yZXNfZm9yX2xpYnJhcnlfcHJlZml4ZXMKaW1wb3J0ICdkYXJ0OmFzeW5jJyBhcyBfaTI7CgppbXBvcnQgJ3BhY2thZ2U6aW5qZWN0YWJsZS9pbmplY3RhYmxlLmRhcnQnIGFzIF9pMTsKCi8vLyBpZ25vcmVfZm9yX2ZpbGU6IHVubmVjZXNzYXJ5X2xhbWJkYXMKLy8vIGlnbm9yZV9mb3JfZmlsZTogbGluZXNfbG9uZ2VyX3RoYW5fODBfY2hhcnMKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1NYWNvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fVBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLy8gaW5pdGlhbGl6ZXMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBtYWluLXNjb3BlIGRlcGVuZGVuY2llcyBpbnNpZGUgb2YgW0dldEl0XQogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey9tYWNvc319e3sjd2VifX0KLy9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XZWJ7e25hbWUucGFzY2FsQ2FzZSgpfX1QYWNrYWdlTW9kdWxlO3BhY2thZ2U6am9uYXNfZGF2aWRfd2ViX3t7bmFtZX19L3NyYy9pbmplY3Rpb24ubW9kdWxlLmRhcnQKLy8gR0VORVJBVEVEIENPREUgLSBETyBOT1QgTU9ESUZZIEJZIEhBTkQKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgovLy8gaWdub3JlX2Zvcl9maWxlOiB1bm5lY2Vzc2FyeV9sYW1iZGFzCi8vLyBpZ25vcmVfZm9yX2ZpbGU6IGxpbmVzX2xvbmdlcl90aGFuXzgwX2NoYXJzCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2Vie3tuYW1lLnBhc2NhbENhc2UoKX19UGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBbR2V0SXRdCiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7fQp9Cnt7L3dlYn19e3sjd2luZG93c319Ci8vQEdlbmVyYXRlZE1pY3JvTW9kdWxlO3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2luZG93c3t7bmFtZS5wYXNjYWxDYXNlKCl9fVBhY2thZ2VNb2R1bGU7cGFja2FnZTpqb25hc19kYXZpZF93aW5kb3dzX3t7bmFtZX19L3NyYy9pbmplY3Rpb24ubW9kdWxlLmRhcnQKLy8gR0VORVJBVEVEIENPREUgLSBETyBOT1QgTU9ESUZZIEJZIEhBTkQKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgovLy8gaWdub3JlX2Zvcl9maWxlOiB1bm5lY2Vzc2FyeV9sYW1iZGFzCi8vLyBpZ25vcmVfZm9yX2ZpbGU6IGxpbmVzX2xvbmdlcl90aGFuXzgwX2NoYXJzCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2luZG93c3t7bmFtZS5wYXNjYWxDYXNlKCl9fVBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLy8gaW5pdGlhbGl6ZXMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBtYWluLXNjb3BlIGRlcGVuZGVuY2llcyBpbnNpZGUgb2YgW0dldEl0XQogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/l10n/arb/{{name}}_en.arb",
      "data":
          "ewogICJAQGxvY2FsZSI6ICJlbiIsCiAgInRpdGxlIjogInt7bmFtZS50aXRsZUNhc2UoKX19IHRpdGxlIGluIGVuZ2xpc2giLAogICJAdGl0bGUiOiB7CiAgICAiZGVzY3JpcHRpb24iOiAiVGl0bGUgdGV4dCBzaG93biBpbiB0aGUge3tuYW1lLnRpdGxlQ2FzZSgpfX0iCiAgfQp9",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/l10n/l10n.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKCmltcG9ydCAne3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydCc7CgpleHRlbnNpb24ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9uc1ggb24gQnVpbGRDb250ZXh0IHsKICAvLy8gVGhlIGwxMG4gb2JqZWN0IHdoaWNoIGhvbGRzIGFsbCBsb2NhbGl6ZWQgc3RyaW5ncy4KICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFuZHJvaWR7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zIGdldCBsMTBuID0+CiAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QW5kcm9pZHt7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMub2YodGhpcyk7Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKCmltcG9ydCAne3twcm9qZWN0X25hbWV9fV9pb3Nfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKCmV4dGVuc2lvbiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnNYIG9uIEJ1aWxkQ29udGV4dCB7CiAgLy8vIFRoZSBsMTBuIG9iamVjdCB3aGljaCBob2xkcyBhbGwgbG9jYWxpemVkIHN0cmluZ3MuCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Jb3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zIGdldCBsMTBuID0+CiAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19SW9ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucy5vZih0aGlzKTsKfQp7ey9pb3N9fXt7I2xpbnV4fX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKCmltcG9ydCAne3twcm9qZWN0X25hbWV9fV9saW51eF97e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwoKZXh0ZW5zaW9uIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TGludXh7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zWCBvbiBCdWlsZENvbnRleHQgewogIC8vLyBUaGUgbDEwbiBvYmplY3Qgd2hpY2ggaG9sZHMgYWxsIGxvY2FsaXplZCBzdHJpbmdzLgogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TGludXh7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zIGdldCBsMTBuID0+CiAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TGludXh7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zLm9mKHRoaXMpOwp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL3dpZGdldHMuZGFydCc7CgppbXBvcnQgJ3t7cHJvamVjdF9uYW1lfX1fbWFjb3Nfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKCmV4dGVuc2lvbiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9uc1ggb24gQnVpbGRDb250ZXh0IHsKICAvLy8gVGhlIGwxMG4gb2JqZWN0IHdoaWNoIGhvbGRzIGFsbCBsb2NhbGl6ZWQgc3RyaW5ncy4KICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucyBnZXQgbDEwbiA9PgogICAgICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucy5vZih0aGlzKTsKfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKCmltcG9ydCAne3twcm9qZWN0X25hbWV9fV93ZWJfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKCmV4dGVuc2lvbiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdlYnt7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnNYIG9uIEJ1aWxkQ29udGV4dCB7CiAgLy8vIFRoZSBsMTBuIG9iamVjdCB3aGljaCBob2xkcyBhbGwgbG9jYWxpemVkIHN0cmluZ3MuCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XZWJ7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zIGdldCBsMTBuID0+CiAgICAgIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2Vie3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucy5vZih0aGlzKTsKfQp7ey93ZWJ9fXt7I3dpbmRvd3N9fQppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci93aWRnZXRzLmRhcnQnOwoKaW1wb3J0ICd7e3Byb2plY3RfbmFtZX19X3dpbmRvd3Nfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKCmV4dGVuc2lvbiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zWCBvbiBCdWlsZENvbnRleHQgewogIC8vLyBUaGUgbDEwbiBvYmplY3Qgd2hpY2ggaG9sZHMgYWxsIGxvY2FsaXplZCBzdHJpbmdzLgogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2luZG93c3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMgZ2V0IGwxMG4gPT4KICAgICAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XaW5kb3dze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucy5vZih0aGlzKTsKfQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path":
          "lib/src/presentation/l10n/{{project_name}}_{{#android}}android{{/android}}{{#ios}}ios{{/ios}}{{#linux}}linux{{/linux}}{{#macos}}macos{{/macos}}{{#web}}web{{/web}}{{#windows}}windows{{/windows}}_{{name}}_localizations.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path":
          "lib/src/presentation/l10n/{{project_name}}_{{#android}}android{{/android}}{{#ios}}ios{{/ios}}{{#linux}}linux{{/linux}}{{#macos}}macos{{/macos}}{{#web}}web{{/web}}{{#windows}}windows{{/windows}}_{{name}}_localizations_en.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICd7e3Byb2plY3RfbmFtZX19X2FuZHJvaWRfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKCi8vLyBUaGUgdHJhbnNsYXRpb25zIGZvciBFbmdsaXNoIChgZW5gKS4KY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9uc0VuIGV4dGVuZHMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucyB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lke3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9uc0VuKFtTdHJpbmcgbG9jYWxlID0gJ2VuJ10pIDogc3VwZXIobG9jYWxlKTsKCiAgQG92ZXJyaWRlCiAgU3RyaW5nIGdldCB0aXRsZSA9PiAne3tuYW1lLnRpdGxlQ2FzZSgpfX0gdGl0bGUgaW4gZW5nbGlzaCc7Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0KaW1wb3J0ICd7e3Byb2plY3RfbmFtZX19X2lvc197e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwoKLy8vIFRoZSB0cmFuc2xhdGlvbnMgZm9yIEVuZ2xpc2ggKGBlbmApLgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnNFbiBleHRlbmRzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19SW9ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucyB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Jb3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4oW1N0cmluZyBsb2NhbGUgPSAnZW4nXSkgOiBzdXBlcihsb2NhbGUpOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IHRpdGxlID0+ICd7e25hbWUudGl0bGVDYXNlKCl9fSB0aXRsZSBpbiBlbmdsaXNoJzsKfQp7ey9pb3N9fXt7I2xpbnV4fX0KaW1wb3J0ICd7e3Byb2plY3RfbmFtZX19X2xpbnV4X3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydCc7CgovLy8gVGhlIHRyYW5zbGF0aW9ucyBmb3IgRW5nbGlzaCAoYGVuYCkuCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TGludXh7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4gZXh0ZW5kcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxpbnV4e3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucyB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1MaW51eHt7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnNFbihbU3RyaW5nIGxvY2FsZSA9ICdlbiddKSA6IHN1cGVyKGxvY2FsZSk7CgogIEBvdmVycmlkZQogIFN0cmluZyBnZXQgdGl0bGUgPT4gJ3t7bmFtZS50aXRsZUNhc2UoKX19IHRpdGxlIGluIGVuZ2xpc2gnOwp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAne3twcm9qZWN0X25hbWV9fV9tYWNvc197e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwoKLy8vIFRoZSB0cmFuc2xhdGlvbnMgZm9yIEVuZ2xpc2ggKGBlbmApLgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29ze3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9uc0VuIGV4dGVuZHMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1NYWNvc3t7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMgewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TWFjb3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4oW1N0cmluZyBsb2NhbGUgPSAnZW4nXSkgOiBzdXBlcihsb2NhbGUpOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IHRpdGxlID0+ICd7e25hbWUudGl0bGVDYXNlKCl9fSB0aXRsZSBpbiBlbmdsaXNoJzsKfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICd7e3Byb2plY3RfbmFtZX19X3dlYl97e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwoKLy8vIFRoZSB0cmFuc2xhdGlvbnMgZm9yIEVuZ2xpc2ggKGBlbmApLgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdlYnt7bmFtZS5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnNFbiBleHRlbmRzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2Vie3tuYW1lLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucyB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XZWJ7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4oW1N0cmluZyBsb2NhbGUgPSAnZW4nXSkgOiBzdXBlcihsb2NhbGUpOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IHRpdGxlID0+ICd7e25hbWUudGl0bGVDYXNlKCl9fSB0aXRsZSBpbiBlbmdsaXNoJzsKfQp7ey93ZWJ9fXt7I3dpbmRvd3N9fQppbXBvcnQgJ3t7cHJvamVjdF9uYW1lfX1fd2luZG93c197e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwoKLy8vIFRoZSB0cmFuc2xhdGlvbnMgZm9yIEVuZ2xpc2ggKGBlbmApLgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4gZXh0ZW5kcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zIHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3N7e25hbWUucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zRW4oW1N0cmluZyBsb2NhbGUgPSAnZW4nXSkgOiBzdXBlcihsb2NhbGUpOwoKICBAb3ZlcnJpZGUKICBTdHJpbmcgZ2V0IHRpdGxlID0+ICd7e25hbWUudGl0bGVDYXNlKCl9fSB0aXRsZSBpbiBlbmdsaXNoJzsKfQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/presentation.dart",
      "data":
          "e3sjYW5kcm9pZH19ZXhwb3J0ICd7e25hbWV9fS5kYXJ0JzsKZXhwb3J0ICdsMTBuL3t7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF97e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwp7ey9hbmRyb2lkfX17eyNpb3N9fQpleHBvcnQgJ3t7bmFtZX19LmRhcnQnOwpleHBvcnQgJ2wxMG4ve3twcm9qZWN0X25hbWV9fV9pb3Nfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKe3svaW9zfX17eyNsaW51eH19CmV4cG9ydCAne3tuYW1lfX0uZGFydCc7CmV4cG9ydCAnbDEwbi97e3Byb2plY3RfbmFtZX19X2xpbnV4X3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydCc7Cnt7L2xpbnV4fX17eyNtYWNvc319CmV4cG9ydCAne3tuYW1lfX0uZGFydCc7CmV4cG9ydCAnbDEwbi97e3Byb2plY3RfbmFtZX19X21hY29zX3t7bmFtZX19X2xvY2FsaXphdGlvbnMuZGFydCc7Cnt7L21hY29zfX17eyN3ZWJ9fQpleHBvcnQgJ3t7bmFtZX19LmRhcnQnOwpleHBvcnQgJ2wxMG4ve3twcm9qZWN0X25hbWV9fV93ZWJfe3tuYW1lfX1fbG9jYWxpemF0aW9ucy5kYXJ0JzsKe3svd2VifX17eyN3aW5kb3dzfX0KZXhwb3J0ICd7e25hbWV9fS5kYXJ0JzsKZXhwb3J0ICdsMTBuL3t7cHJvamVjdF9uYW1lfX1fd2luZG93c197e25hbWV9fV9sb2NhbGl6YXRpb25zLmRhcnQnOwp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/{{name}}.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF97e25hbWV9fS9zcmMvcHJlc2VudGF0aW9uL2wxMG4vbDEwbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC97e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQuZGFydCc7CgpjbGFzcyB7e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7c3VwZXIua2V5fSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGl0bGUgPSBjb250ZXh0LmwxMG4udGl0bGU7CgogICAgcmV0dXJuIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoCiAgICAgIGJvZHk6IENlbnRlcigKICAgICAgICBjaGlsZDogVGV4dCh0aXRsZSksCiAgICAgICksCiAgICApOwogIH0KfQp7ey9hbmRyb2lkfX17eyNpb3N9fQppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9pb3Nfe3tuYW1lfX0vc3JjL3ByZXNlbnRhdGlvbi9sMTBuL2wxMG4uZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2lvcy97e3Byb2plY3RfbmFtZX19X3VpX2lvcy5kYXJ0JzsKCmNsYXNzIHt7bmFtZS5wYXNjYWxDYXNlKCl9fSBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3tuYW1lLnBhc2NhbENhc2UoKX19KHtzdXBlci5rZXl9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aXRsZSA9IGNvbnRleHQubDEwbi50aXRsZTsKCiAgICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCgKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBUZXh0KHRpdGxlKSwKICAgICAgKSwKICAgICk7CiAgfQp9Cnt7L2lvc319e3sjbGludXh9fQppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9saW51eF97e25hbWV9fS9zcmMvcHJlc2VudGF0aW9uL2wxMG4vbDEwbi5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbGludXgve3twcm9qZWN0X25hbWV9fV91aV9saW51eC5kYXJ0JzsKCmNsYXNzIHt7bmFtZS5wYXNjYWxDYXNlKCl9fSBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3tuYW1lLnBhc2NhbENhc2UoKX19KHtzdXBlci5rZXl9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aXRsZSA9IGNvbnRleHQubDEwbi50aXRsZTsKCiAgICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCgKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBUZXh0KHRpdGxlKSwKICAgICAgKSwKICAgICk7CiAgfQp9Cnt7L2xpbnV4fX17eyNtYWNvc319CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X21hY29zX3t7bmFtZX19L3NyYy9wcmVzZW50YXRpb24vbDEwbi9sMTBuLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy97e3Byb2plY3RfbmFtZX19X3VpX21hY29zLmRhcnQnOwoKY2xhc3Mge3tuYW1lLnBhc2NhbENhc2UoKX19IGV4dGVuZHMgU3RhdGVsZXNzV2lkZ2V0IHsKICBjb25zdCB7e25hbWUucGFzY2FsQ2FzZSgpfX0oe3N1cGVyLmtleX0pOwoKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIGZpbmFsIHRpdGxlID0gY29udGV4dC5sMTBuLnRpdGxlOwoKICAgIHJldHVybiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVNjYWZmb2xkKAogICAgICBjaGlsZHJlbjogWwogICAgICAgIENvbnRlbnRBcmVhKAogICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQsIGNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgcmV0dXJuIENlbnRlcigKICAgICAgICAgICAgICBjaGlsZDogVGV4dCh0aXRsZSksCiAgICAgICAgICAgICk7CiAgICAgICAgICB9LAogICAgICAgICksCiAgICAgIF0sCiAgICApOwogIH0KfQp7ey9tYWNvc319e3sjd2VifX0KaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2ViL3t7cHJvamVjdF9uYW1lfX1fdWlfd2ViLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV93ZWJfe3tuYW1lfX0vc3JjL3ByZXNlbnRhdGlvbi9sMTBuL2wxMG4uZGFydCc7CgpjbGFzcyB7e25hbWUucGFzY2FsQ2FzZSgpfX0gZXh0ZW5kcyBTdGF0ZWxlc3NXaWRnZXQgewogIGNvbnN0IHt7bmFtZS5wYXNjYWxDYXNlKCl9fSh7c3VwZXIua2V5fSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgZmluYWwgdGl0bGUgPSBjb250ZXh0LmwxMG4udGl0bGU7CgogICAgcmV0dXJuIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19U2NhZmZvbGQoCiAgICAgIGJvZHk6IENlbnRlcigKICAgICAgICBjaGlsZDogVGV4dCh0aXRsZSksCiAgICAgICksCiAgICApOwogIH0KfQp7ey93ZWJ9fXt7I3dpbmRvd3N9fQppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV93aW5kb3dzL3t7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2luZG93c197e25hbWV9fS9zcmMvcHJlc2VudGF0aW9uL2wxMG4vbDEwbi5kYXJ0JzsKCmNsYXNzIHt7bmFtZS5wYXNjYWxDYXNlKCl9fSBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3Qge3tuYW1lLnBhc2NhbENhc2UoKX19KHtzdXBlci5rZXl9KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICBmaW5hbCB0aXRsZSA9IGNvbnRleHQubDEwbi50aXRsZTsKCiAgICByZXR1cm4ge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1TY2FmZm9sZCgKICAgICAgYm9keTogQ2VudGVyKAogICAgICAgIGNoaWxkOiBUZXh0KHRpdGxlKSwKICAgICAgKSwKICAgICk7CiAgfQp9Cnt7L3dpbmRvd3N9fQ==",
      "type": "text"
    },
    {
      "path":
          "lib/{{project_name}}_{{#android}}android{{/android}}{{#ios}}ios{{/ios}}{{#linux}}linux{{/linux}}{{#macos}}macos{{/macos}}{{#web}}web{{/web}}{{#windows}}windows{{/windows}}_{{name}}.dart",
      "data":
          "Ly8gVE9ETzogZG9jCnt7I2FuZHJvaWR9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX3t7bmFtZX19O3t7L2FuZHJvaWR9fXt7I2lvc319bGlicmFyeSB7e3Byb2plY3RfbmFtZX19X2lvc197e25hbWV9fTt7ey9pb3N9fXt7I2xpbnV4fX1saWJyYXJ5IHt7cHJvamVjdF9uYW1lfX1fbGludXhfe3tuYW1lfX07e3svbGludXh9fXt7I21hY29zfX1saWJyYXJ5IHt7cHJvamVjdF9uYW1lfX1fbWFjb3Nfe3tuYW1lfX07e3svbWFjb3N9fXt7I3dlYn19bGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3dlYl97e25hbWV9fTt7ey93ZWJ9fXt7I3dpbmRvd3N9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV93aW5kb3dzX3t7bmFtZX19O3t7L3dpbmRvd3N9fQoKZXhwb3J0ICdzcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0JzsKZXhwb3J0ICdzcmMvcHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbi5kYXJ0JzsK",
      "type": "text"
    },
    {
      "path": "LICENSE",
      "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "PCEtLQpUaGlzIFJFQURNRSBkZXNjcmliZXMgdGhlIHBhY2thZ2UuIElmIHlvdSBwdWJsaXNoIHRoaXMgcGFja2FnZSB0byBwdWIuZGV2LAp0aGlzIFJFQURNRSdzIGNvbnRlbnRzIGFwcGVhciBvbiB0aGUgbGFuZGluZyBwYWdlIGZvciB5b3VyIHBhY2thZ2UuCgpGb3IgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHdyaXRlIGEgZ29vZCBwYWNrYWdlIFJFQURNRSwgc2VlIHRoZSBndWlkZSBmb3IKW3dyaXRpbmcgcGFja2FnZSBwYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL3dyaXRpbmctcGFja2FnZS1wYWdlcykuCgpGb3IgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBkZXZlbG9waW5nIHBhY2thZ2VzLCBzZWUgdGhlIERhcnQgZ3VpZGUgZm9yCltjcmVhdGluZyBwYWNrYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL2NyZWF0ZS1saWJyYXJ5LXBhY2thZ2VzKQphbmQgdGhlIEZsdXR0ZXIgZ3VpZGUgZm9yCltkZXZlbG9waW5nIHBhY2thZ2VzIGFuZCBwbHVnaW5zXShodHRwczovL2ZsdXR0ZXIuZGV2L2RldmVsb3BpbmctcGFja2FnZXMpLgotLT4KClRPRE86IFB1dCBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWNrYWdlIGhlcmUgdGhhdCBoZWxwcyBwb3RlbnRpYWwgdXNlcnMKa25vdyB3aGV0aGVyIHRoaXMgcGFja2FnZSBtaWdodCBiZSB1c2VmdWwgZm9yIHRoZW0uCgojIyBGZWF0dXJlcwoKVE9ETzogTGlzdCB3aGF0IHlvdXIgcGFja2FnZSBjYW4gZG8uIE1heWJlIGluY2x1ZGUgaW1hZ2VzLCBnaWZzLCBvciB2aWRlb3MuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKClRPRE86IExpc3QgcHJlcmVxdWlzaXRlcyBhbmQgcHJvdmlkZSBvciBwb2ludCB0byBpbmZvcm1hdGlvbiBvbiBob3cgdG8Kc3RhcnQgdXNpbmcgdGhlIHBhY2thZ2UuCgojIyBVc2FnZQoKVE9ETzogSW5jbHVkZSBzaG9ydCBhbmQgdXNlZnVsIGV4YW1wbGVzIGZvciBwYWNrYWdlIHVzZXJzLiBBZGQgbG9uZ2VyIGV4YW1wbGVzCnRvIGAvZXhhbXBsZWAgZm9sZGVyLgoKYGBgZGFydApjb25zdCBsaWtlID0gJ3NhbXBsZSc7CmBgYAoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKVE9ETzogVGVsbCB1c2VycyBtb3JlIGFib3V0IHRoZSBwYWNrYWdlOiB3aGVyZSB0byBmaW5kIG1vcmUgaW5mb3JtYXRpb24sIGhvdyB0bwpjb250cmlidXRlIHRvIHRoZSBwYWNrYWdlLCBob3cgdG8gZmlsZSBpc3N1ZXMsIHdoYXQgcmVzcG9uc2UgdGhleSBjYW4gZXhwZWN0CmZyb20gdGhlIHBhY2thZ2UgYXV0aG9ycywgYW5kIG1vcmUuCg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "platform_custom_feature_package",
  "description":
      "A brick generating a platform custom feature package of a Rapid project.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0-dev.39 <0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBwbGF0Zm9ybV9jdXN0b21fZmVhdHVyZV9wYWNrYWdlCgpbIVtQb3dlcmVkIGJ5IE1hc29uXShodHRwczovL2ltZy5zaGllbGRzLmlvL2VuZHBvaW50P3VybD1odHRwcyUzQSUyRiUyRnRpbnl1cmwuY29tJTJGbWFzb24tYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24pCgpBIG5ldyBicmljayBjcmVhdGVkIHdpdGggdGhlIE1hc29uIENMSS4KCl9HZW5lcmF0ZWQgYnkgW21hc29uXVsxXSDwn6exXwoKIyMgR2V0dGluZyBTdGFydGVkIPCfmoAKClRoaXMgaXMgYSBzdGFydGluZyBwb2ludCBmb3IgYSBuZXcgYnJpY2suCkEgZmV3IHJlc291cmNlcyB0byBnZXQgeW91IHN0YXJ0ZWQgaWYgdGhpcyBpcyB5b3VyIGZpcnN0IGJyaWNrIHRlbXBsYXRlOgoKLSBbT2ZmaWNpYWwgTWFzb24gRG9jdW1lbnRhdGlvbl1bMl0KLSBbQ29kZSBnZW5lcmF0aW9uIHdpdGggTWFzb24gQmxvZ11bM10KLSBbVmVyeSBHb29kIExpdmVzdHJlYW06IEZlbGl4IEFuZ2Vsb3YgRGVtb3MgTWFzb25dWzRdCgpbMV06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbgpbMl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbi90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXNvbl9jbGkjcmVhZG1lClszXTogaHR0cHM6Ly92ZXJ5Z29vZC52ZW50dXJlcy9ibG9nL2NvZGUtZ2VuZXJhdGlvbi13aXRoLW1hc29uCls0XTogaHR0cHM6Ly95b3V0dS5iZS9HNFBUakE2dHBUVQo=",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
    "type": "text"
  },
  "vars": {
    "name": {"type": "string", "description": "The feature name"},
    "description": {"type": "string", "description": "The feature description"},
    "project_name": {"type": "string", "description": "The project name"},
    "example": {
      "type": "boolean",
      "description":
          "Wheter the project contains example features and their tests"
    },
    "android": {
      "type": "boolean",
      "description": "The project supports the Android platform"
    },
    "ios": {
      "type": "boolean",
      "description": "The project supports the iOS platform"
    },
    "web": {
      "type": "boolean",
      "description": "The project supports the Web platform"
    },
    "linux": {
      "type": "boolean",
      "description": "The project supports the Linux platform"
    },
    "macos": {
      "type": "boolean",
      "description": "The project supports the macOS platform"
    },
    "windows": {
      "type": "boolean",
      "description": "The project supports the Windows platform"
    }
  }
});
