// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final platformAppFeaturePackageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCioqL2RvYy9hcGkvCioqL2lvcy9GbHV0dGVyLy5sYXN0X2J1aWxkX2lkCi5kYXJ0X3Rvb2wvCi5mbHV0dGVyLXBsdWdpbnMKLmZsdXR0ZXItcGx1Z2lucy1kZXBlbmRlbmNpZXMKLnBhY2thZ2VzCi5wdWItY2FjaGUvCi5wdWIvCi9idWlsZC8KL2NvdmVyYWdlCg==",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogLi4vLi4vLi4vLi4vLi4vYW5hbHlzaXNfb3B0aW9ucy55YW1sCiMgVW5jb21tZW50IHRoZSBmb2xsb3dpbmcgc2VjdGlvbiB0byBzcGVjaWZ5IGFkZGl0aW9uYWwgcnVsZXMuCgojIGxpbnRlcjoKIyAgIHJ1bGVzOgojICAgICAtIGNhbWVsX2Nhc2VfdHlwZXMK",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4wLjEKCiogVE9ETzogRGVzY3JpYmUgaW5pdGlhbCByZWxlYXNlLgo=",
      "type": "text"
    },
    {
      "path": "dart_test.yaml",
      "data":
          "dGFnczoKICBidWlsZF92ZXJpZnk6CiAgICBza2lwOiAiQnVpbGQgdmVyaWZ5IHRlc3Qgc2hvdWxkIGJlIHJ1biBpbiBwYXJhbGxlbCB3aXRoIG90aGVyIHVuaXQgdGVzdHMiCg==",
      "type": "text"
    },
    {
      "path": "lib/src/injection.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JzsKCi8vLyBTZXR1cCBpbmplY3RhYmxlIHBhY2thZ2Ugd2hpY2ggZ2VuZXJhdGVzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvZGUuCi8vLwovLy8gRm9yIG1vcmUgaW5mbyBzZWU6IGh0dHBzOi8vcHViLmRldi9wYWNrYWdlcy9pbmplY3RhYmxlI2luY2x1ZGluZy1taWNyb3BhY2thZ2VzLWFuZC1leHRlcm5hbC1tb2R1bGVzCkBJbmplY3RhYmxlSW5pdC5taWNyb1BhY2thZ2UoKQp2b2lkIGluaXRNaWNyb1BhY2thZ2UoKSB7fQo=",
      "type": "text"
    },
    {
      "path": "lib/src/injection.module.dart",
      "data":
          "e3sjYW5kcm9pZH19Ly9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lkQXBwUGFja2FnZU1vZHVsZTtwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF9hcHAvc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IHR5cGU9bGludAovLyBjb3ZlcmFnZTppZ25vcmUtZmlsZQoKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFuZHJvaWRBcHBQYWNrYWdlTW9kdWxlIGV4dGVuZHMgX2kxLk1pY3JvUGFja2FnZU1vZHVsZSB7CiAgLy8gaW5pdGlhbGl6ZXMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBtYWluLXNjb3BlIGRlcGVuZGVuY2llcyBpbnNpZGUgb2YgR2V0SXQKICBAb3ZlcnJpZGUKICBfaTIuRnV0dXJlT3I8dm9pZD4gaW5pdChfaTEuR2V0SXRIZWxwZXIgZ2gpIHt9Cn0Ke3svYW5kcm9pZH19e3sjaW9zfX0vL0BHZW5lcmF0ZWRNaWNyb01vZHVsZTt7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc0FwcFBhY2thZ2VNb2R1bGU7cGFja2FnZTp7e3Byb2plY3RfbmFtZX19X2lvc19hcHAvc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IHR5cGU9bGludAovLyBjb3ZlcmFnZTppZ25vcmUtZmlsZQoKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc0FwcFBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBHZXRJdAogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey9pb3N9fXt7I2xpbnV4fX0vL0BHZW5lcmF0ZWRNaWNyb01vZHVsZTt7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxpbnV4QXBwUGFja2FnZU1vZHVsZTtwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fbGludXhfYXBwL3NyYy9pbmplY3Rpb24ubW9kdWxlLmRhcnQKLy8gR0VORVJBVEVEIENPREUgLSBETyBOT1QgTU9ESUZZIEJZIEhBTkQKLy8gaWdub3JlX2Zvcl9maWxlOiB0eXBlPWxpbnQKLy8gY292ZXJhZ2U6aWdub3JlLWZpbGUKCi8vIGlnbm9yZV9mb3JfZmlsZTogbm9fbGVhZGluZ191bmRlcnNjb3Jlc19mb3JfbGlicmFyeV9wcmVmaXhlcwppbXBvcnQgJ2RhcnQ6YXN5bmMnIGFzIF9pMjsKCmltcG9ydCAncGFja2FnZTppbmplY3RhYmxlL2luamVjdGFibGUuZGFydCcgYXMgX2kxOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1MaW51eEFwcFBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBHZXRJdAogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey9saW51eH19e3sjbWFjb3N9fS8vQEdlbmVyYXRlZE1pY3JvTW9kdWxlO3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TWFjb3NBcHBQYWNrYWdlTW9kdWxlO3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9tYWNvc19hcHAvc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IHR5cGU9bGludAovLyBjb3ZlcmFnZTppZ25vcmUtZmlsZQoKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29zQXBwUGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vIGluaXRpYWxpemVzIHRoZSByZWdpc3RyYXRpb24gb2YgbWFpbi1zY29wZSBkZXBlbmRlbmNpZXMgaW5zaWRlIG9mIEdldEl0CiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7fQp9Cnt7L21hY29zfX17eyN3ZWJ9fS8vQEdlbmVyYXRlZE1pY3JvTW9kdWxlO3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2ViQXBwUGFja2FnZU1vZHVsZTtwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2ViX2FwcC9zcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0Ci8vIEdFTkVSQVRFRCBDT0RFIC0gRE8gTk9UIE1PRElGWSBCWSBIQU5ECi8vIGlnbm9yZV9mb3JfZmlsZTogdHlwZT1saW50Ci8vIGNvdmVyYWdlOmlnbm9yZS1maWxlCgovLyBpZ25vcmVfZm9yX2ZpbGU6IG5vX2xlYWRpbmdfdW5kZXJzY29yZXNfZm9yX2xpYnJhcnlfcHJlZml4ZXMKaW1wb3J0ICdkYXJ0OmFzeW5jJyBhcyBfaTI7CgppbXBvcnQgJ3BhY2thZ2U6aW5qZWN0YWJsZS9pbmplY3RhYmxlLmRhcnQnIGFzIF9pMTsKCmNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2ViQXBwUGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vIGluaXRpYWxpemVzIHRoZSByZWdpc3RyYXRpb24gb2YgbWFpbi1zY29wZSBkZXBlbmRlbmNpZXMgaW5zaWRlIG9mIEdldEl0CiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7fQp9Cnt7L3dlYn19e3sjd2luZG93c319Ly9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XaW5kb3dzQXBwUGFja2FnZU1vZHVsZTtwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2luZG93c19hcHAvc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IHR5cGU9bGludAovLyBjb3ZlcmFnZTppZ25vcmUtZmlsZQoKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3NBcHBQYWNrYWdlTW9kdWxlIGV4dGVuZHMgX2kxLk1pY3JvUGFja2FnZU1vZHVsZSB7CiAgLy8gaW5pdGlhbGl6ZXMgdGhlIHJlZ2lzdHJhdGlvbiBvZiBtYWluLXNjb3BlIGRlcGVuZGVuY2llcyBpbnNpZGUgb2YgR2V0SXQKICBAb3ZlcnJpZGUKICBfaTIuRnV0dXJlT3I8dm9pZD4gaW5pdChfaTEuR2V0SXRIZWxwZXIgZ2gpIHt9Cn0Ke3svd2luZG93c319e3sjbW9iaWxlfX0vL0BHZW5lcmF0ZWRNaWNyb01vZHVsZTt7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1vYmlsZUFwcFBhY2thZ2VNb2R1bGU7cGFja2FnZTp7e3Byb2plY3RfbmFtZX19X21vYmlsZV9hcHAvc3JjL2luamVjdGlvbi5tb2R1bGUuZGFydAovLyBHRU5FUkFURUQgQ09ERSAtIERPIE5PVCBNT0RJRlkgQlkgSEFORAovLyBpZ25vcmVfZm9yX2ZpbGU6IHR5cGU9bGludAovLyBjb3ZlcmFnZTppZ25vcmUtZmlsZQoKLy8gaWdub3JlX2Zvcl9maWxlOiBub19sZWFkaW5nX3VuZGVyc2NvcmVzX2Zvcl9saWJyYXJ5X3ByZWZpeGVzCmltcG9ydCAnZGFydDphc3luYycgYXMgX2kyOwoKaW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JyBhcyBfaTE7CgpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1vYmlsZUFwcFBhY2thZ2VNb2R1bGUgZXh0ZW5kcyBfaTEuTWljcm9QYWNrYWdlTW9kdWxlIHsKICAvLyBpbml0aWFsaXplcyB0aGUgcmVnaXN0cmF0aW9uIG9mIG1haW4tc2NvcGUgZGVwZW5kZW5jaWVzIGluc2lkZSBvZiBHZXRJdAogIEBvdmVycmlkZQogIF9pMi5GdXR1cmVPcjx2b2lkPiBpbml0KF9pMS5HZXRJdEhlbHBlciBnaCkge30KfQp7ey9tb2JpbGV9fQ==",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/app.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/presentation.dart",
      "data": "ZXhwb3J0ICdhcHAuZGFydCc7Cg==",
      "type": "text"
    },
    {
      "path": "lib/{{project_name}}_{{platform}}_app.dart",
      "data":
          "Ly8vIFRoZSBBcHAgZmVhdHVyZSBvZiB7e3Byb2plY3RfbmFtZS50aXRsZUNhc2UoKX19IGZvciB7eyNhbmRyb2lkfX1BbmRyb2lke3svYW5kcm9pZH19e3sjaW9zfX1pT1N7ey9pb3N9fXt7I2xpbnV4fX1MaW51eHt7L2xpbnV4fX17eyNtYWNvc319bWFjT1N7ey9tYWNvc319e3sjd2VifX1XZWJ7ey93ZWJ9fXt7I3dpbmRvd3N9fVdpbmRvd3N7ey93aW5kb3dzfX17eyNtb2JpbGV9fU1vYmlsZXt7L21vYmlsZX19LgovLy8KLy8vIFRvIHVzZSwgaW1wb3J0IGBwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fe3twbGF0Zm9ybX19X2FwcC97e3Byb2plY3RfbmFtZX19X3t7cGxhdGZvcm19fV9hcHAuZGFydGAuCmxpYnJhcnkge3twcm9qZWN0X25hbWV9fV97e3BsYXRmb3JtfX1fYXBwOwoKZXhwb3J0ICdzcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0JzsKZXhwb3J0ICdzcmMvcHJlc2VudGF0aW9uL3ByZXNlbnRhdGlvbi5kYXJ0JzsK",
      "type": "text"
    },
    {
      "path": "LICENSE",
      "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZToge3twcm9qZWN0X25hbWV9fV97e3BsYXRmb3JtfX1fYXBwCmRlc2NyaXB0aW9uOiBUaGUgQXBwIGZlYXR1cmUuCnZlcnNpb246IDAuMC4xCnB1Ymxpc2hfdG86IG5vbmUKCmVudmlyb25tZW50OgogIHNkazogIj49My4xLjAgPDQuMC4wIgogIGZsdXR0ZXI6ICI+PTMuMTMuMCIKCmRlcGVuZGVuY2llczoKICBmbHV0dGVyOgogICAgc2RrOiBmbHV0dGVyCiAgbWV0YTogXjEuOS4xCiAgYmxvYzogXjguMS4yCiAgZnJlZXplZF9hbm5vdGF0aW9uOiBeMi40LjEKICBmbHV0dGVyX2Jsb2M6IF44LjEuMwogIGluamVjdGFibGU6IF4yLjMuMAogIGF1dG9fcm91dGU6IF43LjguMgogIHt7cHJvamVjdF9uYW1lfX1fZGk6CiAge3twcm9qZWN0X25hbWV9fV9kb21haW46CiAge3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX06CiAge3twcm9qZWN0X25hbWV9fV97e3BsYXRmb3JtfX1fbG9jYWxpemF0aW9uOgoKZGV2X2RlcGVuZGVuY2llczoKICBmbHV0dGVyX3Rlc3Q6CiAgICBzZGs6IGZsdXR0ZXIKICBibG9jX3Rlc3Q6IF45LjEuNAogIG1vY2t0YWlsOiBeMS4wLjAKICBidWlsZF9ydW5uZXI6IF4yLjQuNgogIGZyZWV6ZWQ6IF4yLjQuMQogIGluamVjdGFibGVfZ2VuZXJhdG9yOiBeMi40LjAKICBmbHV0dGVyX2dlbl9ydW5uZXI6IF41LjMuMQogIGJ1aWxkX3ZlcmlmeTogXjMuMS4wCgojIFRoZSBmb2xsb3dpbmcgc2VjdGlvbiBpcyBzcGVjaWZpYyB0byB0aGUgRmx1dHRlckdlbiBwYWNrYWdlLgojIFNlZTogaHR0cHM6Ly9wdWIuZGV2L3BhY2thZ2VzL2ZsdXR0ZXJfZ2VuI2NvbmZpZ3VyYXRpb24tZmlsZQpmbHV0dGVyX2dlbjoKICBvdXRwdXQ6IGxpYi9zcmMvCiAgIyBUbyBhZGQgc3VwcG9ydCBmb3Igc3ZnIHZpYSBmbHV0dGVyX3N2ZyBwYWNrYWdlCiAgIyBpbnRlZ3JhdGlvbnM6CiAgIyAgIGZsdXR0ZXJfc3ZnOiB0cnVlCgogIGFzc2V0czoKICAgIG91dHB1dHM6CiAgICAgIHBhY2thZ2VfcGFyYW1ldGVyX2VuYWJsZWQ6IHRydWUKCiMgVGhlIGZvbGxvd2luZyBzZWN0aW9uIGlzIHNwZWNpZmljIHRvIEZsdXR0ZXIgcGFja2FnZXMuCmZsdXR0ZXI6Cnt7Xmlvc319e3tebWFjb3N9fSAgIyBUaGUgZm9sbG93aW5nIGxpbmUgZW5zdXJlcyB0aGF0IHRoZSBNYXRlcmlhbCBJY29ucyBmb250IGlzCiAgIyBpbmNsdWRlZCB3aXRoIHlvdXIgYXBwbGljYXRpb24sIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhlIGljb25zIGluCiAgIyB0aGUgbWF0ZXJpYWwgSWNvbnMgY2xhc3MuCiAgdXNlcy1tYXRlcmlhbC1kZXNpZ246IHRydWUKe3svbWFjb3N9fXt7L2lvc319ICAjIFRvIGFkZCBhc3NldHMgdG8geW91ciBwYWNrYWdlLCBhZGQgYW4gYXNzZXRzIHNlY3Rpb24sIGxpa2UgdGhpczoKICAjIGFzc2V0czoKICAjICAgLSBpbWFnZXMvYV9kb3RfYnVyci5qcGVnCiAgIyAgIC0gaW1hZ2VzL2FfZG90X2hhbS5qcGVnCiAgIwogICMgRm9yIGRldGFpbHMgcmVnYXJkaW5nIGFzc2V0cyBpbiBwYWNrYWdlcywgc2VlCiAgIyBodHRwczovL2ZsdXR0ZXIuZGV2L2Fzc2V0cy1hbmQtaW1hZ2VzLyNmcm9tLXBhY2thZ2VzCiAgIwogICMgQW4gaW1hZ2UgYXNzZXQgY2FuIHJlZmVyIHRvIG9uZSBvciBtb3JlIHJlc29sdXRpb24tc3BlY2lmaWMgInZhcmlhbnRzIiwgc2VlCiAgIyBodHRwczovL2ZsdXR0ZXIuZGV2L2Fzc2V0cy1hbmQtaW1hZ2VzLyNyZXNvbHV0aW9uLWF3YXJlCgogICMgVG8gYWRkIGN1c3RvbSBmb250cyB0byB5b3VyIHBhY2thZ2UsIGFkZCBhIGZvbnRzIHNlY3Rpb24gaGVyZSwKICAjIGluIHRoaXMgImZsdXR0ZXIiIHNlY3Rpb24uIEVhY2ggZW50cnkgaW4gdGhpcyBsaXN0IHNob3VsZCBoYXZlIGEKICAjICJmYW1pbHkiIGtleSB3aXRoIHRoZSBmb250IGZhbWlseSBuYW1lLCBhbmQgYSAiZm9udHMiIGtleSB3aXRoIGEKICAjIGxpc3QgZ2l2aW5nIHRoZSBhc3NldCBhbmQgb3RoZXIgZGVzY3JpcHRvcnMgZm9yIHRoZSBmb250LiBGb3IKICAjIGV4YW1wbGU6CiAgIyBmb250czoKICAjICAgLSBmYW1pbHk6IFNjaHlsZXIKICAjICAgICBmb250czoKICAjICAgICAgIC0gYXNzZXQ6IGZvbnRzL1NjaHlsZXItUmVndWxhci50dGYKICAjICAgICAgIC0gYXNzZXQ6IGZvbnRzL1NjaHlsZXItSXRhbGljLnR0ZgogICMgICAgICAgICBzdHlsZTogaXRhbGljCiAgIyAgIC0gZmFtaWx5OiBUcmFqYW4gUHJvCiAgIyAgICAgZm9udHM6CiAgIyAgICAgICAtIGFzc2V0OiBmb250cy9UcmFqYW5Qcm8udHRmCiAgIyAgICAgICAtIGFzc2V0OiBmb250cy9UcmFqYW5Qcm9fQm9sZC50dGYKICAjICAgICAgICAgd2VpZ2h0OiA3MDAKICAjCiAgIyBGb3IgZGV0YWlscyByZWdhcmRpbmcgZm9udHMgaW4gcGFja2FnZXMsIHNlZQogICMgaHR0cHM6Ly9mbHV0dGVyLmRldi9jdXN0b20tZm9udHMvI2Zyb20tcGFja2FnZXMK",
      "type": "text"
    },
    {
      "path": "pubspec_overrides.yaml",
      "data":
          "IyBtZWxvc19tYW5hZ2VkX2RlcGVuZGVuY3lfb3ZlcnJpZGVzOiB7e3Byb2plY3RfbmFtZX19X2RpLHt7cHJvamVjdF9uYW1lfX1fZG9tYWluLHt7cHJvamVjdF9uYW1lfX1fdWkse3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX0se3twcm9qZWN0X25hbWV9fV97e3BsYXRmb3JtfX1fbG9jYWxpemF0aW9uCmRlcGVuZGVuY3lfb3ZlcnJpZGVzOgogIHt7cHJvamVjdF9uYW1lfX1fZGk6CiAgICBwYXRoOiAuLi8uLi8uLi97e3Byb2plY3RfbmFtZX19X2RpCiAge3twcm9qZWN0X25hbWV9fV9kb21haW46CiAgICBwYXRoOiAuLi8uLi8uLi97e3Byb2plY3RfbmFtZX19X2RvbWFpbi97e3Byb2plY3RfbmFtZX19X2RvbWFpbgogIHt7cHJvamVjdF9uYW1lfX1fdWk6CiAgICBwYXRoOiAuLi8uLi8uLi8uLi97e3Byb2plY3RfbmFtZX19X3VpL3t7cHJvamVjdF9uYW1lfX1fdWkKICB7e3Byb2plY3RfbmFtZX19X3VpX3t7cGxhdGZvcm19fToKICAgIHBhdGg6IC4uLy4uLy4uLy4uL3t7cHJvamVjdF9uYW1lfX1fdWkve3twcm9qZWN0X25hbWV9fV91aV97e3BsYXRmb3JtfX0KICB7e3Byb2plY3RfbmFtZX19X3t7cGxhdGZvcm19fV9sb2NhbGl6YXRpb246CiAgICBwYXRoOiAuLi8uLi97e3Byb2plY3RfbmFtZX19X3t7cGxhdGZvcm19fV9sb2NhbGl6YXRpb24K",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "PCEtLQpUaGlzIFJFQURNRSBkZXNjcmliZXMgdGhlIHBhY2thZ2UuIElmIHlvdSBwdWJsaXNoIHRoaXMgcGFja2FnZSB0byBwdWIuZGV2LAp0aGlzIFJFQURNRSdzIGNvbnRlbnRzIGFwcGVhciBvbiB0aGUgbGFuZGluZyBwYWdlIGZvciB5b3VyIHBhY2thZ2UuCgpGb3IgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHdyaXRlIGEgZ29vZCBwYWNrYWdlIFJFQURNRSwgc2VlIHRoZSBndWlkZSBmb3IKW3dyaXRpbmcgcGFja2FnZSBwYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL3dyaXRpbmctcGFja2FnZS1wYWdlcykuCgpGb3IgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBkZXZlbG9waW5nIHBhY2thZ2VzLCBzZWUgdGhlIERhcnQgZ3VpZGUgZm9yCltjcmVhdGluZyBwYWNrYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL2NyZWF0ZS1saWJyYXJ5LXBhY2thZ2VzKQphbmQgdGhlIEZsdXR0ZXIgZ3VpZGUgZm9yCltkZXZlbG9waW5nIHBhY2thZ2VzIGFuZCBwbHVnaW5zXShodHRwczovL2ZsdXR0ZXIuZGV2L2RldmVsb3BpbmctcGFja2FnZXMpLgotLT4KClRPRE86IFB1dCBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWNrYWdlIGhlcmUgdGhhdCBoZWxwcyBwb3RlbnRpYWwgdXNlcnMKa25vdyB3aGV0aGVyIHRoaXMgcGFja2FnZSBtaWdodCBiZSB1c2VmdWwgZm9yIHRoZW0uCgojIyBGZWF0dXJlcwoKVE9ETzogTGlzdCB3aGF0IHlvdXIgcGFja2FnZSBjYW4gZG8uIE1heWJlIGluY2x1ZGUgaW1hZ2VzLCBnaWZzLCBvciB2aWRlb3MuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKClRPRE86IExpc3QgcHJlcmVxdWlzaXRlcyBhbmQgcHJvdmlkZSBvciBwb2ludCB0byBpbmZvcm1hdGlvbiBvbiBob3cgdG8Kc3RhcnQgdXNpbmcgdGhlIHBhY2thZ2UuCgojIyBVc2FnZQoKVE9ETzogSW5jbHVkZSBzaG9ydCBhbmQgdXNlZnVsIGV4YW1wbGVzIGZvciBwYWNrYWdlIHVzZXJzLiBBZGQgbG9uZ2VyIGV4YW1wbGVzCnRvIGAvZXhhbXBsZWAgZm9sZGVyLgoKYGBgZGFydApjb25zdCBsaWtlID0gJ3NhbXBsZSc7CmBgYAoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKVE9ETzogVGVsbCB1c2VycyBtb3JlIGFib3V0IHRoZSBwYWNrYWdlOiB3aGVyZSB0byBmaW5kIG1vcmUgaW5mb3JtYXRpb24sIGhvdyB0bwpjb250cmlidXRlIHRvIHRoZSBwYWNrYWdlLCBob3cgdG8gZmlsZSBpc3N1ZXMsIHdoYXQgcmVzcG9uc2UgdGhleSBjYW4gZXhwZWN0CmZyb20gdGhlIHBhY2thZ2UgYXV0aG9ycywgYW5kIG1vcmUuCg==",
      "type": "text"
    },
    {
      "path": "test/ensure_build_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmJ1aWxkX3ZlcmlmeS9idWlsZF92ZXJpZnkuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwoKdm9pZCBtYWluKCkgewogIHRlc3QoCiAgICAnZW5zdXJlX2J1aWxkJywKICAgICgpIGFzeW5jID0+IGV4cGVjdEJ1aWxkQ2xlYW4oCiAgICAgIHBhY2thZ2VSZWxhdGl2ZURpcmVjdG9yeToKICAgICAgICAgICdwYWNrYWdlcy97e3Byb2plY3RfbmFtZX19L3t7cHJvamVjdF9uYW1lfX1fe3twbGF0Zm9ybX19L3t7cHJvamVjdF9uYW1lfX1fe3twbGF0Zm9ybX19X2ZlYXR1cmVzL3t7cHJvamVjdF9uYW1lfX1fe3twbGF0Zm9ybX19X2FwcCcsCiAgICApLAogICAgdGltZW91dDogY29uc3QgVGltZW91dC5mYWN0b3IoNCksCiAgICB0YWdzOiBbJ2J1aWxkX3ZlcmlmeSddLAogICk7Cn0K",
      "type": "text"
    },
    {
      "path": "test/mocks.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF1dG9fcm91dGUvYXV0b19yb3V0ZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvd2lkZ2V0cy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwoKY2xhc3MgRmFrZVBhZ2VSb3V0ZUluZm8gZXh0ZW5kcyBQYWdlUm91dGVJbmZvIHsKICBjb25zdCBGYWtlUGFnZVJvdXRlSW5mbygpIDogc3VwZXIoJ3Rlc3QnKTsKfQoKY2xhc3MgRmFrZVJvdXRlciBleHRlbmRzIFJvb3RTdGFja1JvdXRlciB7CiAgQG92ZXJyaWRlCiAgTGlzdDxBdXRvUm91dGU+IGdldCByb3V0ZXMgPT4gWwogICAgICAgIEF1dG9Sb3V0ZShwYWdlOiBjb25zdCBQYWdlSW5mbygndGVzdCcpLCBwYXRoOiAnLycpLAogICAgICBdOwoKICBAb3ZlcnJpZGUKICBNYXA8U3RyaW5nLCBQYWdlRmFjdG9yeT4gZ2V0IHBhZ2VzTWFwID0+IHsKICAgICAgICAndGVzdCc6IChyb3V0ZURhdGEpID0+IEF1dG9Sb3V0ZVBhZ2UoCiAgICAgICAgICAgICAgcm91dGVEYXRhOiByb3V0ZURhdGEsCiAgICAgICAgICAgICAgY2hpbGQ6IENvbnRhaW5lcigpLAogICAgICAgICAgICApLAogICAgICB9Owp9CgpjbGFzcyBNb2NrQXV0b1JvdXRlck9ic2VydmVyIGV4dGVuZHMgTW9jayBpbXBsZW1lbnRzIEF1dG9Sb3V0ZXJPYnNlcnZlciB7fQoKLy8gVE9ETzogYWRkIG1vY2tzIGFuZCBmYWtlcyBoZXJlCg==",
      "type": "text"
    },
    {
      "path": "test/src/presentation/app_test.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "platform_app_feature_package",
  "description":
      "A brick generating a platform app package of a Rapid project.",
  "version": "0.1.0",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyBwbGF0Zm9ybV9hcHBfZmVhdHVyZV9wYWNrYWdlCgpUT0RP",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMAoKLSBUT0RPOiBEZXNjcmliZSBpbml0aWFsIHJlbGVhc2UuCg==",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string"},
    "platform": {"type": "string"},
    "android": {"type": "boolean"},
    "ios": {"type": "boolean"},
    "linux": {"type": "boolean"},
    "macos": {"type": "boolean"},
    "web": {"type": "boolean"},
    "windows": {"type": "boolean"},
    "mobile": {"type": "boolean"}
  }
});
