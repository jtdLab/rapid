// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final platformAppFeaturePackageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIFRoZSAudnNjb2RlIGZvbGRlciBjb250YWlucyBsYXVuY2ggY29uZmlndXJhdGlvbiBhbmQgdGFza3MgeW91IGNvbmZpZ3VyZSBpbgojIFZTIENvZGUgd2hpY2ggeW91IG1heSB3aXNoIHRvIGJlIGluY2x1ZGVkIGluIHZlcnNpb24gY29udHJvbCwgc28gdGhpcyBsaW5lCiMgaXMgY29tbWVudGVkIG91dCBieSBkZWZhdWx0LgojLnZzY29kZS8KCiMgRmx1dHRlci9EYXJ0L1B1YiByZWxhdGVkCiMgTGlicmFyaWVzIHNob3VsZCBub3QgaW5jbHVkZSBwdWJzcGVjLmxvY2ssIHBlciBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9saWJyYXJpZXMvcHJpdmF0ZS1maWxlcyNwdWJzcGVjbG9jay4KL3B1YnNwZWMubG9jawoqKi9kb2MvYXBpLwouZGFydF90b29sLwoucGFja2FnZXMKYnVpbGQvCg==",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data":
          "aW5jbHVkZTogcGFja2FnZTpmbHV0dGVyX2xpbnRzL2ZsdXR0ZXIueWFtbAoKIyBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgZmlsZSBjYW4gYmUgZm91bmQgYXQKIyBodHRwczovL2RhcnQuZGV2L2d1aWRlcy9sYW5ndWFnZS9hbmFseXNpcy1vcHRpb25zCg==",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4wLjEKCiogVE9ETzogRGVzY3JpYmUgaW5pdGlhbCByZWxlYXNlLgo=",
      "type": "text"
    },
    {
      "path": "l10n.yaml",
      "data":
          "e3sjYW5kcm9pZH19YXJiLWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbi9hcmIKb3V0cHV0LWNsYXNzOiB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFuZHJvaWR7e2FwcC5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMKb3V0cHV0LWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbgp0ZW1wbGF0ZS1hcmItZmlsZTogYXBwX3t7ZGVmYXVsdF9sYW5ndWFnZX19LmFyYgpvdXRwdXQtbG9jYWxpemF0aW9uLWZpbGU6IHt7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF9hcHBfbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L2FuZHJvaWR9fXt7I2lvc319CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Jb3N7e2FwcC5wYXNjYWxDYXNlKCl9fUxvY2FsaXphdGlvbnMKb3V0cHV0LWRpcjogbGliL3NyYy9wcmVzZW50YXRpb24vbDEwbgp0ZW1wbGF0ZS1hcmItZmlsZTogYXBwX3t7ZGVmYXVsdF9sYW5ndWFnZX19LmFyYgpvdXRwdXQtbG9jYWxpemF0aW9uLWZpbGU6IHt7cHJvamVjdF9uYW1lfX1faW9zX2FwcF9sb2NhbGl6YXRpb25zLmRhcnQKbnVsbGFibGUtZ2V0dGVyOiBmYWxzZQpzeW50aGV0aWMtcGFja2FnZTogZmFsc2UKe3svaW9zfX17eyNsaW51eH19CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1MaW51eHt7YXBwLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucwpvdXRwdXQtZGlyOiBsaWIvc3JjL3ByZXNlbnRhdGlvbi9sMTBuCnRlbXBsYXRlLWFyYi1maWxlOiBhcHBfe3tkZWZhdWx0X2xhbmd1YWdlfX0uYXJiCm91dHB1dC1sb2NhbGl6YXRpb24tZmlsZToge3twcm9qZWN0X25hbWV9fV9saW51eF9hcHBfbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L2xpbnV4fX17eyNtYWNvc319CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1NYWNvc3t7YXBwLnBhc2NhbENhc2UoKX19TG9jYWxpemF0aW9ucwpvdXRwdXQtZGlyOiBsaWIvc3JjL3ByZXNlbnRhdGlvbi9sMTBuCnRlbXBsYXRlLWFyYi1maWxlOiBhcHBfe3tkZWZhdWx0X2xhbmd1YWdlfX0uYXJiCm91dHB1dC1sb2NhbGl6YXRpb24tZmlsZToge3twcm9qZWN0X25hbWV9fV9tYWNvc19hcHBfbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L21hY29zfX17eyN3ZWJ9fQphcmItZGlyOiBsaWIvc3JjL3ByZXNlbnRhdGlvbi9sMTBuL2FyYgpvdXRwdXQtY2xhc3M6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19V2Vie3thcHAucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zCm91dHB1dC1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4KdGVtcGxhdGUtYXJiLWZpbGU6IGFwcF97e2RlZmF1bHRfbGFuZ3VhZ2V9fS5hcmIKb3V0cHV0LWxvY2FsaXphdGlvbi1maWxlOiB7e3Byb2plY3RfbmFtZX19X3dlYl9hcHBfbG9jYWxpemF0aW9ucy5kYXJ0Cm51bGxhYmxlLWdldHRlcjogZmFsc2UKc3ludGhldGljLXBhY2thZ2U6IGZhbHNlCnt7L3dlYn19e3sjd2luZG93c319CmFyYi1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4vYXJiCm91dHB1dC1jbGFzczoge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XaW5kb3dze3thcHAucGFzY2FsQ2FzZSgpfX1Mb2NhbGl6YXRpb25zCm91dHB1dC1kaXI6IGxpYi9zcmMvcHJlc2VudGF0aW9uL2wxMG4KdGVtcGxhdGUtYXJiLWZpbGU6IGFwcF97e2RlZmF1bHRfbGFuZ3VhZ2V9fS5hcmIKb3V0cHV0LWxvY2FsaXphdGlvbi1maWxlOiB7e3Byb2plY3RfbmFtZX19X3dpbmRvd3NfYXBwX2xvY2FsaXphdGlvbnMuZGFydApudWxsYWJsZS1nZXR0ZXI6IGZhbHNlCnN5bnRoZXRpYy1wYWNrYWdlOiBmYWxzZQp7ey93aW5kb3dzfX0=",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/app.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/src/presentation/localizations.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fYW5kcm9pZF9ob21lX3BhZ2Uve3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX2hvbWVfcGFnZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC97e3Byb2plY3RfbmFtZX19X3VpX2FuZHJvaWQuZGFydCc7Cgpjb25zdCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzID0gPExvY2FsaXphdGlvbnNEZWxlZ2F0ZT5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BbmRyb2lkSG9tZVBhZ2VMb2NhbGl6YXRpb25zLmRlbGVnYXRlLApdOwoKY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IFsKICBMb2NhbGUoJ3t7ZGVmYXVsdF9sYW5ndWFnZX19JyksCl07Cnt7L2FuZHJvaWR9fXt7I2lvc319aW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1faW9zX2hvbWVfcGFnZS97e3Byb2plY3RfbmFtZX19X2lvc19ob21lX3BhZ2UuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2lvcy97e3Byb2plY3RfbmFtZX19X3VpX2lvcy5kYXJ0JzsKCmNvbnN0IGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMgPSA8TG9jYWxpemF0aW9uc0RlbGVnYXRlPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUlvc0hvbWVQYWdlTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKXTsKCmNvbnN0IHN1cHBvcnRlZExvY2FsZXMgPSBbCiAgTG9jYWxlKCd7e2RlZmF1bHRfbGFuZ3VhZ2V9fScpLApdOwp7ey9pb3N9fXt7I2xpbnV4fX1pbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9saW51eF9ob21lX3BhZ2Uve3twcm9qZWN0X25hbWV9fV9saW51eF9ob21lX3BhZ2UuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2xpbnV4L3t7cHJvamVjdF9uYW1lfX1fdWlfbGludXguZGFydCc7Cgpjb25zdCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzID0gPExvY2FsaXphdGlvbnNEZWxlZ2F0ZT5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1MaW51eEhvbWVQYWdlTG9jYWxpemF0aW9ucy5kZWxlZ2F0ZSwKXTsKCmNvbnN0IHN1cHBvcnRlZExvY2FsZXMgPSBbCiAgTG9jYWxlKCd7e2RlZmF1bHRfbGFuZ3VhZ2V9fScpLApdOwp7ey9saW51eH19e3sjbWFjb3N9fWltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X21hY29zX2hvbWVfcGFnZS97e3Byb2plY3RfbmFtZX19X21hY29zX2hvbWVfcGFnZS5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbWFjb3Mve3twcm9qZWN0X25hbWV9fV91aV9tYWNvcy5kYXJ0JzsKCmNvbnN0IGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMgPSA8TG9jYWxpemF0aW9uc0RlbGVnYXRlPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fU1hY29zSG9tZVBhZ2VMb2NhbGl6YXRpb25zLmRlbGVnYXRlLApdOwoKY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IFsKICBMb2NhbGUoJ3t7ZGVmYXVsdF9sYW5ndWFnZX19JyksCl07Cnt7L21hY29zfX17eyN3ZWJ9fWltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3dlYl9ob21lX3BhZ2Uve3twcm9qZWN0X25hbWV9fV93ZWJfaG9tZV9wYWdlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV93ZWIve3twcm9qZWN0X25hbWV9fV91aV93ZWIuZGFydCc7Cgpjb25zdCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzID0gPExvY2FsaXphdGlvbnNEZWxlZ2F0ZT5bCiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1XZWJIb21lUGFnZUxvY2FsaXphdGlvbnMuZGVsZWdhdGUsCl07Cgpjb25zdCBzdXBwb3J0ZWRMb2NhbGVzID0gWwogIExvY2FsZSgne3tkZWZhdWx0X2xhbmd1YWdlfX0nKSwKXTsKe3svd2VifX17eyN3aW5kb3dzfX1pbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV93aW5kb3dzX2hvbWVfcGFnZS97e3Byb2plY3RfbmFtZX19X3dpbmRvd3NfaG9tZV9wYWdlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV91aV93aW5kb3dzL3t7cHJvamVjdF9uYW1lfX1fdWlfd2luZG93cy5kYXJ0JzsKCmNvbnN0IGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMgPSA8TG9jYWxpemF0aW9uc0RlbGVnYXRlPlsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fVdpbmRvd3NIb21lUGFnZUxvY2FsaXphdGlvbnMuZGVsZWdhdGUsCl07Cgpjb25zdCBzdXBwb3J0ZWRMb2NhbGVzID0gWwogIExvY2FsZSgne3tkZWZhdWx0X2xhbmd1YWdlfX0nKSwKXTsKe3svd2luZG93c319",
      "type": "text"
    },
    {
      "path":
          "lib/{{project_name}}_{{#android}}android{{/android}}{{#ios}}ios{{/ios}}{{#linux}}linux{{/linux}}{{#macos}}macos{{/macos}}{{#web}}web{{/web}}{{#windows}}windows{{/windows}}_app.dart",
      "data":
          "Ly8gVE9ETzogZG9jCnt7I2FuZHJvaWR9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX2FwcDt7ey9hbmRyb2lkfX17eyNpb3N9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV9pb3NfYXBwO3t7L2lvc319e3sjbGludXh9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV9saW51eF9hcHA7e3svbGludXh9fXt7I21hY29zfX1saWJyYXJ5IHt7cHJvamVjdF9uYW1lfX1fbWFjb3NfYXBwO3t7L21hY29zfX17eyN3ZWJ9fWxpYnJhcnkge3twcm9qZWN0X25hbWV9fV93ZWJfYXBwO3t7L3dlYn19e3sjd2luZG93c319bGlicmFyeSB7e3Byb2plY3RfbmFtZX19X3dpbmRvd3NfYXBwO3t7L3dpbmRvd3N9fQoKZXhwb3J0ICdzcmMvcHJlc2VudGF0aW9uL2FwcC5kYXJ0JzsK",
      "type": "text"
    },
    {
      "path": "LICENSE",
      "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "PCEtLQpUaGlzIFJFQURNRSBkZXNjcmliZXMgdGhlIHBhY2thZ2UuIElmIHlvdSBwdWJsaXNoIHRoaXMgcGFja2FnZSB0byBwdWIuZGV2LAp0aGlzIFJFQURNRSdzIGNvbnRlbnRzIGFwcGVhciBvbiB0aGUgbGFuZGluZyBwYWdlIGZvciB5b3VyIHBhY2thZ2UuCgpGb3IgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIHdyaXRlIGEgZ29vZCBwYWNrYWdlIFJFQURNRSwgc2VlIHRoZSBndWlkZSBmb3IKW3dyaXRpbmcgcGFja2FnZSBwYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL3dyaXRpbmctcGFja2FnZS1wYWdlcykuCgpGb3IgZ2VuZXJhbCBpbmZvcm1hdGlvbiBhYm91dCBkZXZlbG9waW5nIHBhY2thZ2VzLCBzZWUgdGhlIERhcnQgZ3VpZGUgZm9yCltjcmVhdGluZyBwYWNrYWdlc10oaHR0cHM6Ly9kYXJ0LmRldi9ndWlkZXMvbGlicmFyaWVzL2NyZWF0ZS1saWJyYXJ5LXBhY2thZ2VzKQphbmQgdGhlIEZsdXR0ZXIgZ3VpZGUgZm9yCltkZXZlbG9waW5nIHBhY2thZ2VzIGFuZCBwbHVnaW5zXShodHRwczovL2ZsdXR0ZXIuZGV2L2RldmVsb3BpbmctcGFja2FnZXMpLgotLT4KClRPRE86IFB1dCBhIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBwYWNrYWdlIGhlcmUgdGhhdCBoZWxwcyBwb3RlbnRpYWwgdXNlcnMKa25vdyB3aGV0aGVyIHRoaXMgcGFja2FnZSBtaWdodCBiZSB1c2VmdWwgZm9yIHRoZW0uCgojIyBGZWF0dXJlcwoKVE9ETzogTGlzdCB3aGF0IHlvdXIgcGFja2FnZSBjYW4gZG8uIE1heWJlIGluY2x1ZGUgaW1hZ2VzLCBnaWZzLCBvciB2aWRlb3MuCgojIyBHZXR0aW5nIHN0YXJ0ZWQKClRPRE86IExpc3QgcHJlcmVxdWlzaXRlcyBhbmQgcHJvdmlkZSBvciBwb2ludCB0byBpbmZvcm1hdGlvbiBvbiBob3cgdG8Kc3RhcnQgdXNpbmcgdGhlIHBhY2thZ2UuCgojIyBVc2FnZQoKVE9ETzogSW5jbHVkZSBzaG9ydCBhbmQgdXNlZnVsIGV4YW1wbGVzIGZvciBwYWNrYWdlIHVzZXJzLiBBZGQgbG9uZ2VyIGV4YW1wbGVzCnRvIGAvZXhhbXBsZWAgZm9sZGVyLgoKYGBgZGFydApjb25zdCBsaWtlID0gJ3NhbXBsZSc7CmBgYAoKIyMgQWRkaXRpb25hbCBpbmZvcm1hdGlvbgoKVE9ETzogVGVsbCB1c2VycyBtb3JlIGFib3V0IHRoZSBwYWNrYWdlOiB3aGVyZSB0byBmaW5kIG1vcmUgaW5mb3JtYXRpb24sIGhvdyB0bwpjb250cmlidXRlIHRvIHRoZSBwYWNrYWdlLCBob3cgdG8gZmlsZSBpc3N1ZXMsIHdoYXQgcmVzcG9uc2UgdGhleSBjYW4gZXhwZWN0CmZyb20gdGhlIHBhY2thZ2UgYXV0aG9ycywgYW5kIG1vcmUuCg==",
      "type": "text"
    },
    {
      "path": "test/src/presentation/app_test.dart",
      "data":
          "e3sjYW5kcm9pZH19aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCcgaGlkZSBSb3V0ZXI7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX3Rlc3QvZmx1dHRlcl90ZXN0LmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX2FwcC97e3Byb2plY3RfbmFtZX19X2FuZHJvaWRfYXBwLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9hbmRyb2lkX2FwcC9zcmMvcHJlc2VudGF0aW9uL2xvY2FsaXphdGlvbnMuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X2FuZHJvaWRfcm91dGluZy97e3Byb2plY3RfbmFtZX19X2FuZHJvaWRfcm91dGluZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfYW5kcm9pZC9zcmMvYXBwLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bW9ja3RhaWwvbW9ja3RhaWwuZGFydCc7CgpjbGFzcyBfTW9ja1JvdXRlciBleHRlbmRzIE1vY2sgaW1wbGVtZW50cyBSb3V0ZXIge30KCnZvaWQgbWFpbigpIHsKICBncm91cCgnQXBwJywgKCkgewogICAgbGF0ZSBMaXN0PEF1dG9Sb3V0ZXJPYnNlcnZlcj4gRnVuY3Rpb24oKT8gcm91dGVyT2JzZXJ2ZXJCdWlsZGVyOwoKICAgIGxhdGUgTG9jYWxlPyBsb2NhbGU7CgogICAgbGF0ZSBUaGVtZU1vZGU/IHRoZW1lTW9kZTsKCiAgICBsYXRlIFJvdXRlcj8gcm91dGVyOwogICAgbGF0ZSBEZWZhdWx0Um91dGVQYXJzZXIgcm91dGVJbmZvcm1hdGlvblBhcnNlcjsKICAgIGxhdGUgQXV0b1JvdXRlckRlbGVnYXRlIHJvdXRlckRlbGVnYXRlOwoKICAgIGxhdGUgV2lkZ2V0PyBob21lOwoKICAgIHNldFVwKCgpIHsKICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyID0gKCkgPT4gW107CgogICAgICBsb2NhbGUgPSBjb25zdCBMb2NhbGUoJ3t7ZGVmYXVsdF9sYW5ndWFnZX19Jyk7CgogICAgICB0aGVtZU1vZGUgPSBUaGVtZU1vZGUubGlnaHQ7CgogICAgICByb3V0ZXIgPSBfTW9ja1JvdXRlcigpOwogICAgICByb3V0ZUluZm9ybWF0aW9uUGFyc2VyID0gUm91dGVyKCkuZGVmYXVsdFJvdXRlUGFyc2VyKCk7CiAgICAgIHJvdXRlckRlbGVnYXRlID0gUm91dGVyKCkuZGVsZWdhdGUoKTsKICAgICAgd2hlbigoKSA9PiByb3V0ZXI/LmRlZmF1bHRSb3V0ZVBhcnNlcigpKQogICAgICAgICAgLnRoZW5SZXR1cm4ocm91dGVJbmZvcm1hdGlvblBhcnNlcik7CiAgICAgIHdoZW4oKCkgPT4gcm91dGVyPy5kZWxlZ2F0ZSgKICAgICAgICAgICAgICBuYXZpZ2F0b3JPYnNlcnZlcnM6IGFueShuYW1lZDogJ25hdmlnYXRvck9ic2VydmVycycpKSkKICAgICAgICAgIC50aGVuUmV0dXJuKHJvdXRlckRlbGVnYXRlKTsKCiAgICAgIGhvbWUgPSBudWxsOwogICAgfSk7CgogICAgQXBwIGFwcCgpID0+IEFwcCgKICAgICAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlcjogcm91dGVyT2JzZXJ2ZXJCdWlsZGVyLAogICAgICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgICAgICB0aGVtZU1vZGU6IHRoZW1lTW9kZSwKICAgICAgICAgIHJvdXRlcjogcm91dGVyLAogICAgICAgICAgaG9tZTogaG9tZSwKICAgICAgICApOwoKICAgIHRlc3RXaWRnZXRzKCdyZW5kZXJzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwIHdpdGggY29ycmVjdCBwcm9wZXJ0aWVzJywgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIGZpbmFsIHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAgPSB0ZXN0ZXIud2lkZ2V0PHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwPihmaW5kLmJ5VHlwZSh7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGl6YXRpb25zRGVsZWdhdGVzLCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuc3VwcG9ydGVkTG9jYWxlcywgc3VwcG9ydGVkTG9jYWxlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlSW5mb3JtYXRpb25QYXJzZXIsIHJvdXRlSW5mb3JtYXRpb25QYXJzZXIpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZXJEZWxlZ2F0ZSwgcm91dGVyRGVsZWdhdGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGUsIGxvY2FsZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnRoZW1lTW9kZSwgdGhlbWVNb2RlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgbnVsbCk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygndXNlcyBmYWxsYmFjayByb3V0ZXIgd2hlbiByb3V0ZXIgaXMgbnVsbCcsICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICByb3V0ZXIgPSBudWxsOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0gdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgaXNBPERlZmF1bHRSb3V0ZVBhcnNlcj4oKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCBpc0E8QXV0b1JvdXRlckRlbGVnYXRlPigpKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgbnVsbCk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygKICAgICAgICAndXNlcyBmYWxsYmFjayBvYnNlcnZlciBidWlsZGVyIHdoZW4gcm91dGVyT2JzZXJ2ZXJCdWlsZGVyIGlzIG51bGwgJywKICAgICAgICAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyID0gbnVsbDsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgdmVyaWZ5KAogICAgICAgICgpID0+IHJvdXRlciEuZGVsZWdhdGUoCiAgICAgICAgICBuYXZpZ2F0b3JPYnNlcnZlcnM6CiAgICAgICAgICAgICAgQXV0b1JvdXRlckRlbGVnYXRlLmRlZmF1bHROYXZpZ2F0b3JPYnNlcnZlcnNCdWlsZGVyLAogICAgICAgICksCiAgICAgICk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygKICAgICAgICAncmVuZGVycyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fSB3aXRoIGNvcnJlY3QgcHJvcGVydGllcyB3aGVuIGhvbWUgaXMgbm90IG51bGwnLAogICAgICAgICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICBob21lID0gQ29udGFpbmVyKCk7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIGZpbmFsIHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAgPQogICAgICAgICAgdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxpemF0aW9uc0RlbGVnYXRlcywgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnN1cHBvcnRlZExvY2FsZXMsIHN1cHBvcnRlZExvY2FsZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCBudWxsKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIG51bGwpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGUsIGxvY2FsZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnRoZW1lTW9kZSwgdGhlbWVNb2RlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgaG9tZSk7CiAgICB9KTsKICB9KTsKfQp7ey9hbmRyb2lkfX17eyNpb3N9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL2N1cGVydGluby5kYXJ0JyBoaWRlIFJvdXRlcjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X2lvc19hcHAve3twcm9qZWN0X25hbWV9fV9pb3NfYXBwLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9pb3NfYXBwL3NyYy9wcmVzZW50YXRpb24vbG9jYWxpemF0aW9ucy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1faW9zX3JvdXRpbmcve3twcm9qZWN0X25hbWV9fV9pb3Nfcm91dGluZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfaW9zL3NyYy9hcHAuZGFydCc7CmltcG9ydCAncGFja2FnZTptb2NrdGFpbC9tb2NrdGFpbC5kYXJ0JzsKCmNsYXNzIF9Nb2NrUm91dGVyIGV4dGVuZHMgTW9jayBpbXBsZW1lbnRzIFJvdXRlciB7fQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCdBcHAnLCAoKSB7CiAgICBsYXRlIExpc3Q8QXV0b1JvdXRlck9ic2VydmVyPiBGdW5jdGlvbigpPyByb3V0ZXJPYnNlcnZlckJ1aWxkZXI7CgogICAgbGF0ZSBMb2NhbGU/IGxvY2FsZTsKCiAgICBsYXRlIEJyaWdodG5lc3M/IGJyaWdodG5lc3M7CgogICAgbGF0ZSBSb3V0ZXI/IHJvdXRlcjsKICAgIGxhdGUgRGVmYXVsdFJvdXRlUGFyc2VyIHJvdXRlSW5mb3JtYXRpb25QYXJzZXI7CiAgICBsYXRlIEF1dG9Sb3V0ZXJEZWxlZ2F0ZSByb3V0ZXJEZWxlZ2F0ZTsKCiAgICBsYXRlIFdpZGdldD8gaG9tZTsKCiAgICBzZXRVcCgoKSB7CiAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlciA9ICgpID0+IFtdOwoKICAgICAgbG9jYWxlID0gY29uc3QgTG9jYWxlKCd7e2RlZmF1bHRfbGFuZ3VhZ2V9fScpOwoKICAgICAgYnJpZ2h0bmVzcyA9IEJyaWdodG5lc3MubGlnaHQ7CgogICAgICByb3V0ZXIgPSBfTW9ja1JvdXRlcigpOwogICAgICByb3V0ZUluZm9ybWF0aW9uUGFyc2VyID0gUm91dGVyKCkuZGVmYXVsdFJvdXRlUGFyc2VyKCk7CiAgICAgIHJvdXRlckRlbGVnYXRlID0gUm91dGVyKCkuZGVsZWdhdGUoKTsKICAgICAgd2hlbigoKSA9PiByb3V0ZXI/LmRlZmF1bHRSb3V0ZVBhcnNlcigpKQogICAgICAgICAgLnRoZW5SZXR1cm4ocm91dGVJbmZvcm1hdGlvblBhcnNlcik7CiAgICAgIHdoZW4oKCkgPT4gcm91dGVyPy5kZWxlZ2F0ZSgKICAgICAgICAgICAgICBuYXZpZ2F0b3JPYnNlcnZlcnM6IGFueShuYW1lZDogJ25hdmlnYXRvck9ic2VydmVycycpKSkKICAgICAgICAgIC50aGVuUmV0dXJuKHJvdXRlckRlbGVnYXRlKTsKCiAgICAgIGhvbWUgPSBudWxsOwogICAgfSk7CgogICAgQXBwIGFwcCgpID0+IEFwcCgKICAgICAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlcjogcm91dGVyT2JzZXJ2ZXJCdWlsZGVyLAogICAgICAgICAgbG9jYWxlOiBsb2NhbGUsCiAgICAgICAgICBicmlnaHRuZXNzOiBicmlnaHRuZXNzLAogICAgICAgICAgcm91dGVyOiByb3V0ZXIsCiAgICAgICAgICBob21lOiBob21lLAogICAgICAgICk7CgogICAgdGVzdFdpZGdldHMoJ3JlbmRlcnMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHAgd2l0aCBjb3JyZWN0IHByb3BlcnRpZXMnLCAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9IHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMsIGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5zdXBwb3J0ZWRMb2NhbGVzLCBzdXBwb3J0ZWRMb2NhbGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgcm91dGVJbmZvcm1hdGlvblBhcnNlcik7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCByb3V0ZXJEZWxlZ2F0ZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsZSwgbG9jYWxlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuYnJpZ2h0bmVzcywgYnJpZ2h0bmVzcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmhvbWUsIG51bGwpOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoJ3VzZXMgZmFsbGJhY2sgcm91dGVyIHdoZW4gcm91dGVyIGlzIG51bGwnLCAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgcm91dGVyID0gbnVsbDsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9IHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlSW5mb3JtYXRpb25QYXJzZXIsIGlzQTxEZWZhdWx0Um91dGVQYXJzZXI+KCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZXJEZWxlZ2F0ZSwgaXNBPEF1dG9Sb3V0ZXJEZWxlZ2F0ZT4oKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmhvbWUsIG51bGwpOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoCiAgICAgICAgJ3VzZXMgZmFsbGJhY2sgb2JzZXJ2ZXIgYnVpbGRlciB3aGVuIHJvdXRlck9ic2VydmVyQnVpbGRlciBpcyBudWxsICcsCiAgICAgICAgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlciA9IG51bGw7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIHZlcmlmeSgKICAgICAgICAoKSA9PiByb3V0ZXIhLmRlbGVnYXRlKAogICAgICAgICAgbmF2aWdhdG9yT2JzZXJ2ZXJzOgogICAgICAgICAgICAgIEF1dG9Sb3V0ZXJEZWxlZ2F0ZS5kZWZhdWx0TmF2aWdhdG9yT2JzZXJ2ZXJzQnVpbGRlciwKICAgICAgICApLAogICAgICApOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoCiAgICAgICAgJ3JlbmRlcnMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX0gd2l0aCBjb3JyZWN0IHByb3BlcnRpZXMgd2hlbiBob21lIGlzIG5vdCBudWxsJywKICAgICAgICAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgaG9tZSA9IENvbnRhaW5lcigpOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0KICAgICAgICAgIHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMsIGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5zdXBwb3J0ZWRMb2NhbGVzLCBzdXBwb3J0ZWRMb2NhbGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgbnVsbCk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCBudWxsKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxlLCBsb2NhbGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5icmlnaHRuZXNzLCBicmlnaHRuZXNzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgaG9tZSk7CiAgICB9KTsKICB9KTsKfQp7ey9pb3N9fXt7I2xpbnV4fX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBoaWRlIFJvdXRlcjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X2xpbnV4X2FwcC97e3Byb2plY3RfbmFtZX19X2xpbnV4X2FwcC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fbGludXhfYXBwL3NyYy9wcmVzZW50YXRpb24vbG9jYWxpemF0aW9ucy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fbGludXhfcm91dGluZy97e3Byb2plY3RfbmFtZX19X2xpbnV4X3JvdXRpbmcuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX2xpbnV4L3NyYy9hcHAuZGFydCc7CmltcG9ydCAncGFja2FnZTptb2NrdGFpbC9tb2NrdGFpbC5kYXJ0JzsKCmNsYXNzIF9Nb2NrUm91dGVyIGV4dGVuZHMgTW9jayBpbXBsZW1lbnRzIFJvdXRlciB7fQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCdBcHAnLCAoKSB7CiAgICBsYXRlIExpc3Q8QXV0b1JvdXRlck9ic2VydmVyPiBGdW5jdGlvbigpPyByb3V0ZXJPYnNlcnZlckJ1aWxkZXI7CgogICAgbGF0ZSBMb2NhbGU/IGxvY2FsZTsKCiAgICBsYXRlIFRoZW1lTW9kZT8gdGhlbWVNb2RlOwoKICAgIGxhdGUgUm91dGVyPyByb3V0ZXI7CiAgICBsYXRlIERlZmF1bHRSb3V0ZVBhcnNlciByb3V0ZUluZm9ybWF0aW9uUGFyc2VyOwogICAgbGF0ZSBBdXRvUm91dGVyRGVsZWdhdGUgcm91dGVyRGVsZWdhdGU7CgogICAgbGF0ZSBXaWRnZXQ/IGhvbWU7CgogICAgc2V0VXAoKCkgewogICAgICByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgPSAoKSA9PiBbXTsKCiAgICAgIGxvY2FsZSA9IGNvbnN0IExvY2FsZSgne3tkZWZhdWx0X2xhbmd1YWdlfX0nKTsKCiAgICAgIHRoZW1lTW9kZSA9IFRoZW1lTW9kZS5saWdodDsKCiAgICAgIHJvdXRlciA9IF9Nb2NrUm91dGVyKCk7CiAgICAgIHJvdXRlSW5mb3JtYXRpb25QYXJzZXIgPSBSb3V0ZXIoKS5kZWZhdWx0Um91dGVQYXJzZXIoKTsKICAgICAgcm91dGVyRGVsZWdhdGUgPSBSb3V0ZXIoKS5kZWxlZ2F0ZSgpOwogICAgICB3aGVuKCgpID0+IHJvdXRlcj8uZGVmYXVsdFJvdXRlUGFyc2VyKCkpCiAgICAgICAgICAudGhlblJldHVybihyb3V0ZUluZm9ybWF0aW9uUGFyc2VyKTsKICAgICAgd2hlbigoKSA9PiByb3V0ZXI/LmRlbGVnYXRlKAogICAgICAgICAgICAgIG5hdmlnYXRvck9ic2VydmVyczogYW55KG5hbWVkOiAnbmF2aWdhdG9yT2JzZXJ2ZXJzJykpKQogICAgICAgICAgLnRoZW5SZXR1cm4ocm91dGVyRGVsZWdhdGUpOwoKICAgICAgaG9tZSA9IG51bGw7CiAgICB9KTsKCiAgICBBcHAgYXBwKCkgPT4gQXBwKAogICAgICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyOiByb3V0ZXJPYnNlcnZlckJ1aWxkZXIsCiAgICAgICAgICBsb2NhbGU6IGxvY2FsZSwKICAgICAgICAgIHRoZW1lTW9kZTogdGhlbWVNb2RlLAogICAgICAgICAgcm91dGVyOiByb3V0ZXIsCiAgICAgICAgICBob21lOiBob21lLAogICAgICAgICk7CgogICAgdGVzdFdpZGdldHMoJ3JlbmRlcnMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHAgd2l0aCBjb3JyZWN0IHByb3BlcnRpZXMnLCAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9IHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMsIGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5zdXBwb3J0ZWRMb2NhbGVzLCBzdXBwb3J0ZWRMb2NhbGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgcm91dGVJbmZvcm1hdGlvblBhcnNlcik7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCByb3V0ZXJEZWxlZ2F0ZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsZSwgbG9jYWxlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAudGhlbWVNb2RlLCB0aGVtZU1vZGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBudWxsKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKCd1c2VzIGZhbGxiYWNrIHJvdXRlciB3aGVuIHJvdXRlciBpcyBudWxsJywgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIHJvdXRlciA9IG51bGw7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIGZpbmFsIHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAgPSB0ZXN0ZXIud2lkZ2V0PHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwPihmaW5kLmJ5VHlwZSh7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCBpc0E8RGVmYXVsdFJvdXRlUGFyc2VyPigpKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIGlzQTxBdXRvUm91dGVyRGVsZWdhdGU+KCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBudWxsKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKAogICAgICAgICd1c2VzIGZhbGxiYWNrIG9ic2VydmVyIGJ1aWxkZXIgd2hlbiByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgaXMgbnVsbCAnLAogICAgICAgICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgPSBudWxsOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICB2ZXJpZnkoCiAgICAgICAgKCkgPT4gcm91dGVyIS5kZWxlZ2F0ZSgKICAgICAgICAgIG5hdmlnYXRvck9ic2VydmVyczoKICAgICAgICAgICAgICBBdXRvUm91dGVyRGVsZWdhdGUuZGVmYXVsdE5hdmlnYXRvck9ic2VydmVyc0J1aWxkZXIsCiAgICAgICAgKSwKICAgICAgKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKAogICAgICAgICdyZW5kZXJzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19IHdpdGggY29ycmVjdCBwcm9wZXJ0aWVzIHdoZW4gaG9tZSBpcyBub3QgbnVsbCcsCiAgICAgICAgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIGhvbWUgPSBDb250YWluZXIoKTsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9CiAgICAgICAgICB0ZXN0ZXIud2lkZ2V0PHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwPihmaW5kLmJ5VHlwZSh7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGl6YXRpb25zRGVsZWdhdGVzLCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuc3VwcG9ydGVkTG9jYWxlcywgc3VwcG9ydGVkTG9jYWxlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlSW5mb3JtYXRpb25QYXJzZXIsIG51bGwpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZXJEZWxlZ2F0ZSwgbnVsbCk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsZSwgbG9jYWxlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAudGhlbWVNb2RlLCB0aGVtZU1vZGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBob21lKTsKICAgIH0pOwogIH0pOwp9Cnt7L2xpbnV4fX17eyNtYWNvc319aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvY3VwZXJ0aW5vLmRhcnQnIGhpZGUgUm91dGVyOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fbWFjb3NfYXBwL3t7cHJvamVjdF9uYW1lfX1fbWFjb3NfYXBwLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9tYWNvc19hcHAvc3JjL3ByZXNlbnRhdGlvbi9sb2NhbGl6YXRpb25zLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9tYWNvc19yb3V0aW5nL3t7cHJvamVjdF9uYW1lfX1fbWFjb3Nfcm91dGluZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfbWFjb3Mvc3JjL2FwcC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwoKY2xhc3MgX01vY2tSb3V0ZXIgZXh0ZW5kcyBNb2NrIGltcGxlbWVudHMgUm91dGVyIHt9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ0FwcCcsICgpIHsKICAgIGxhdGUgTGlzdDxBdXRvUm91dGVyT2JzZXJ2ZXI+IEZ1bmN0aW9uKCk/IHJvdXRlck9ic2VydmVyQnVpbGRlcjsKCiAgICBsYXRlIExvY2FsZT8gbG9jYWxlOwoKICAgIGxhdGUgQnJpZ2h0bmVzcz8gYnJpZ2h0bmVzczsKCiAgICBsYXRlIFJvdXRlcj8gcm91dGVyOwogICAgbGF0ZSBEZWZhdWx0Um91dGVQYXJzZXIgcm91dGVJbmZvcm1hdGlvblBhcnNlcjsKICAgIGxhdGUgQXV0b1JvdXRlckRlbGVnYXRlIHJvdXRlckRlbGVnYXRlOwoKICAgIGxhdGUgV2lkZ2V0PyBob21lOwoKICAgIHNldFVwKCgpIHsKICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyID0gKCkgPT4gW107CgogICAgICBsb2NhbGUgPSBjb25zdCBMb2NhbGUoJ3t7ZGVmYXVsdF9sYW5ndWFnZX19Jyk7CgogICAgICBicmlnaHRuZXNzID0gQnJpZ2h0bmVzcy5saWdodDsKCiAgICAgIHJvdXRlciA9IF9Nb2NrUm91dGVyKCk7CiAgICAgIHJvdXRlSW5mb3JtYXRpb25QYXJzZXIgPSBSb3V0ZXIoKS5kZWZhdWx0Um91dGVQYXJzZXIoKTsKICAgICAgcm91dGVyRGVsZWdhdGUgPSBSb3V0ZXIoKS5kZWxlZ2F0ZSgpOwogICAgICB3aGVuKCgpID0+IHJvdXRlcj8uZGVmYXVsdFJvdXRlUGFyc2VyKCkpCiAgICAgICAgICAudGhlblJldHVybihyb3V0ZUluZm9ybWF0aW9uUGFyc2VyKTsKICAgICAgd2hlbigoKSA9PiByb3V0ZXI/LmRlbGVnYXRlKAogICAgICAgICAgICAgIG5hdmlnYXRvck9ic2VydmVyczogYW55KG5hbWVkOiAnbmF2aWdhdG9yT2JzZXJ2ZXJzJykpKQogICAgICAgICAgLnRoZW5SZXR1cm4ocm91dGVyRGVsZWdhdGUpOwoKICAgICAgaG9tZSA9IG51bGw7CiAgICB9KTsKCiAgICBBcHAgYXBwKCkgPT4gQXBwKAogICAgICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyOiByb3V0ZXJPYnNlcnZlckJ1aWxkZXIsCiAgICAgICAgICBsb2NhbGU6IGxvY2FsZSwKICAgICAgICAgIGJyaWdodG5lc3M6IGJyaWdodG5lc3MsCiAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgIGhvbWU6IGhvbWUsCiAgICAgICAgKTsKCiAgICB0ZXN0V2lkZ2V0cygncmVuZGVycyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCB3aXRoIGNvcnJlY3QgcHJvcGVydGllcycsICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0gdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxpemF0aW9uc0RlbGVnYXRlcywgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnN1cHBvcnRlZExvY2FsZXMsIHN1cHBvcnRlZExvY2FsZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCByb3V0ZUluZm9ybWF0aW9uUGFyc2VyKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIHJvdXRlckRlbGVnYXRlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxlLCBsb2NhbGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5icmlnaHRuZXNzLCBicmlnaHRuZXNzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgbnVsbCk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygndXNlcyBmYWxsYmFjayByb3V0ZXIgd2hlbiByb3V0ZXIgaXMgbnVsbCcsICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICByb3V0ZXIgPSBudWxsOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0gdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgaXNBPERlZmF1bHRSb3V0ZVBhcnNlcj4oKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCBpc0E8QXV0b1JvdXRlckRlbGVnYXRlPigpKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuaG9tZSwgbnVsbCk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygKICAgICAgICAndXNlcyBmYWxsYmFjayBvYnNlcnZlciBidWlsZGVyIHdoZW4gcm91dGVyT2JzZXJ2ZXJCdWlsZGVyIGlzIG51bGwgJywKICAgICAgICAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyID0gbnVsbDsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgdmVyaWZ5KAogICAgICAgICgpID0+IHJvdXRlciEuZGVsZWdhdGUoCiAgICAgICAgICBuYXZpZ2F0b3JPYnNlcnZlcnM6CiAgICAgICAgICAgICAgQXV0b1JvdXRlckRlbGVnYXRlLmRlZmF1bHROYXZpZ2F0b3JPYnNlcnZlcnNCdWlsZGVyLAogICAgICAgICksCiAgICAgICk7CiAgICB9KTsKCiAgICB0ZXN0V2lkZ2V0cygKICAgICAgICAncmVuZGVycyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fSB3aXRoIGNvcnJlY3QgcHJvcGVydGllcyB3aGVuIGhvbWUgaXMgbm90IG51bGwnLAogICAgICAgICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICBob21lID0gQ29udGFpbmVyKCk7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIGZpbmFsIHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAgPQogICAgICAgICAgdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxpemF0aW9uc0RlbGVnYXRlcywgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnN1cHBvcnRlZExvY2FsZXMsIHN1cHBvcnRlZExvY2FsZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCBudWxsKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIG51bGwpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGUsIGxvY2FsZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmJyaWdodG5lc3MsIGJyaWdodG5lc3MpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBob21lKTsKICAgIH0pOwogIH0pOwp9Cnt7L21hY29zfX17eyN3ZWJ9fWltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnIGhpZGUgUm91dGVyOwppbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlcl90ZXN0L2ZsdXR0ZXJfdGVzdC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fdWlfd2ViL3NyYy9hcHAuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3dlYl9hcHAve3twcm9qZWN0X25hbWV9fV93ZWJfYXBwLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV93ZWJfYXBwL3NyYy9wcmVzZW50YXRpb24vbG9jYWxpemF0aW9ucy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2ViX3JvdXRpbmcve3twcm9qZWN0X25hbWV9fV93ZWJfcm91dGluZy5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwoKY2xhc3MgX01vY2tSb3V0ZXIgZXh0ZW5kcyBNb2NrIGltcGxlbWVudHMgUm91dGVyIHt9Cgp2b2lkIG1haW4oKSB7CiAgZ3JvdXAoJ0FwcCcsICgpIHsKICAgIGxhdGUgTGlzdDxBdXRvUm91dGVyT2JzZXJ2ZXI+IEZ1bmN0aW9uKCk/IHJvdXRlck9ic2VydmVyQnVpbGRlcjsKCiAgICBsYXRlIExvY2FsZT8gbG9jYWxlOwoKICAgIGxhdGUgVGhlbWVNb2RlPyB0aGVtZU1vZGU7CgogICAgbGF0ZSBSb3V0ZXI/IHJvdXRlcjsKICAgIGxhdGUgRGVmYXVsdFJvdXRlUGFyc2VyIHJvdXRlSW5mb3JtYXRpb25QYXJzZXI7CiAgICBsYXRlIEF1dG9Sb3V0ZXJEZWxlZ2F0ZSByb3V0ZXJEZWxlZ2F0ZTsKCiAgICBsYXRlIFdpZGdldD8gaG9tZTsKCiAgICBzZXRVcCgoKSB7CiAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlciA9ICgpID0+IFtdOwoKICAgICAgbG9jYWxlID0gY29uc3QgTG9jYWxlKCd7e2RlZmF1bHRfbGFuZ3VhZ2V9fScpOwoKICAgICAgdGhlbWVNb2RlID0gVGhlbWVNb2RlLmxpZ2h0OwoKICAgICAgcm91dGVyID0gX01vY2tSb3V0ZXIoKTsKICAgICAgcm91dGVJbmZvcm1hdGlvblBhcnNlciA9IFJvdXRlcigpLmRlZmF1bHRSb3V0ZVBhcnNlcigpOwogICAgICByb3V0ZXJEZWxlZ2F0ZSA9IFJvdXRlcigpLmRlbGVnYXRlKCk7CiAgICAgIHdoZW4oKCkgPT4gcm91dGVyPy5kZWZhdWx0Um91dGVQYXJzZXIoKSkKICAgICAgICAgIC50aGVuUmV0dXJuKHJvdXRlSW5mb3JtYXRpb25QYXJzZXIpOwogICAgICB3aGVuKCgpID0+IHJvdXRlcj8uZGVsZWdhdGUoCiAgICAgICAgICAgICAgbmF2aWdhdG9yT2JzZXJ2ZXJzOiBhbnkobmFtZWQ6ICduYXZpZ2F0b3JPYnNlcnZlcnMnKSkpCiAgICAgICAgICAudGhlblJldHVybihyb3V0ZXJEZWxlZ2F0ZSk7CgogICAgICBob21lID0gbnVsbDsKICAgIH0pOwoKICAgIEFwcCBhcHAoKSA9PiBBcHAoCiAgICAgICAgICByb3V0ZXJPYnNlcnZlckJ1aWxkZXI6IHJvdXRlck9ic2VydmVyQnVpbGRlciwKICAgICAgICAgIGxvY2FsZTogbG9jYWxlLAogICAgICAgICAgdGhlbWVNb2RlOiB0aGVtZU1vZGUsCiAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgIGhvbWU6IGhvbWUsCiAgICAgICAgKTsKCiAgICB0ZXN0V2lkZ2V0cygncmVuZGVycyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCB3aXRoIGNvcnJlY3QgcHJvcGVydGllcycsICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0gdGVzdGVyLndpZGdldDx7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcD4oZmluZC5ieVR5cGUoe3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHApKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxpemF0aW9uc0RlbGVnYXRlcywgbG9jYWxpemF0aW9uc0RlbGVnYXRlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnN1cHBvcnRlZExvY2FsZXMsIHN1cHBvcnRlZExvY2FsZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCByb3V0ZUluZm9ybWF0aW9uUGFyc2VyKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIHJvdXRlckRlbGVnYXRlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxlLCBsb2NhbGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC50aGVtZU1vZGUsIHRoZW1lTW9kZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmhvbWUsIG51bGwpOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoJ3VzZXMgZmFsbGJhY2sgcm91dGVyIHdoZW4gcm91dGVyIGlzIG51bGwnLCAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgcm91dGVyID0gbnVsbDsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9IHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlSW5mb3JtYXRpb25QYXJzZXIsIGlzQTxEZWZhdWx0Um91dGVQYXJzZXI+KCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZXJEZWxlZ2F0ZSwgaXNBPEF1dG9Sb3V0ZXJEZWxlZ2F0ZT4oKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmhvbWUsIG51bGwpOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoCiAgICAgICAgJ3VzZXMgZmFsbGJhY2sgb2JzZXJ2ZXIgYnVpbGRlciB3aGVuIHJvdXRlck9ic2VydmVyQnVpbGRlciBpcyBudWxsICcsCiAgICAgICAgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIHJvdXRlck9ic2VydmVyQnVpbGRlciA9IG51bGw7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIHZlcmlmeSgKICAgICAgICAoKSA9PiByb3V0ZXIhLmRlbGVnYXRlKAogICAgICAgICAgbmF2aWdhdG9yT2JzZXJ2ZXJzOgogICAgICAgICAgICAgIEF1dG9Sb3V0ZXJEZWxlZ2F0ZS5kZWZhdWx0TmF2aWdhdG9yT2JzZXJ2ZXJzQnVpbGRlciwKICAgICAgICApLAogICAgICApOwogICAgfSk7CgogICAgdGVzdFdpZGdldHMoCiAgICAgICAgJ3JlbmRlcnMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX0gd2l0aCBjb3JyZWN0IHByb3BlcnRpZXMgd2hlbiBob21lIGlzIG5vdCBudWxsJywKICAgICAgICAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFycmFuZ2UKICAgICAgaG9tZSA9IENvbnRhaW5lcigpOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICBmaW5hbCB7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwID0KICAgICAgICAgIHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMsIGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5zdXBwb3J0ZWRMb2NhbGVzLCBzdXBwb3J0ZWRMb2NhbGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgbnVsbCk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCBudWxsKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAubG9jYWxlLCBsb2NhbGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC50aGVtZU1vZGUsIHRoZW1lTW9kZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmhvbWUsIGhvbWUpOwogICAgfSk7CiAgfSk7Cn0Ke3svd2VifX17eyN3aW5kb3dzfX1pbXBvcnQgJ3BhY2thZ2U6Zmx1dHRlci9tYXRlcmlhbC5kYXJ0JyBoaWRlIFJvdXRlcjsKaW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXJfdGVzdC9mbHV0dGVyX3Rlc3QuZGFydCc7CmltcG9ydCAncGFja2FnZTp7e3Byb2plY3RfbmFtZX19X3VpX3dpbmRvd3Mvc3JjL2FwcC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2luZG93c19hcHAve3twcm9qZWN0X25hbWV9fV93aW5kb3dzX2FwcC5kYXJ0JzsKaW1wb3J0ICdwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fd2luZG93c19hcHAvc3JjL3ByZXNlbnRhdGlvbi9sb2NhbGl6YXRpb25zLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV93aW5kb3dzX3JvdXRpbmcve3twcm9qZWN0X25hbWV9fV93aW5kb3dzX3JvdXRpbmcuZGFydCc7CmltcG9ydCAncGFja2FnZTptb2NrdGFpbC9tb2NrdGFpbC5kYXJ0JzsKCmNsYXNzIF9Nb2NrUm91dGVyIGV4dGVuZHMgTW9jayBpbXBsZW1lbnRzIFJvdXRlciB7fQoKdm9pZCBtYWluKCkgewogIGdyb3VwKCdBcHAnLCAoKSB7CiAgICBsYXRlIExpc3Q8QXV0b1JvdXRlck9ic2VydmVyPiBGdW5jdGlvbigpPyByb3V0ZXJPYnNlcnZlckJ1aWxkZXI7CgogICAgbGF0ZSBMb2NhbGU/IGxvY2FsZTsKCiAgICBsYXRlIFRoZW1lTW9kZT8gdGhlbWVNb2RlOwoKICAgIGxhdGUgUm91dGVyPyByb3V0ZXI7CiAgICBsYXRlIERlZmF1bHRSb3V0ZVBhcnNlciByb3V0ZUluZm9ybWF0aW9uUGFyc2VyOwogICAgbGF0ZSBBdXRvUm91dGVyRGVsZWdhdGUgcm91dGVyRGVsZWdhdGU7CgogICAgbGF0ZSBXaWRnZXQ/IGhvbWU7CgogICAgc2V0VXAoKCkgewogICAgICByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgPSAoKSA9PiBbXTsKCiAgICAgIGxvY2FsZSA9IGNvbnN0IExvY2FsZSgne3tkZWZhdWx0X2xhbmd1YWdlfX0nKTsKCiAgICAgIHRoZW1lTW9kZSA9IFRoZW1lTW9kZS5saWdodDsKCiAgICAgIHJvdXRlciA9IF9Nb2NrUm91dGVyKCk7CiAgICAgIHJvdXRlSW5mb3JtYXRpb25QYXJzZXIgPSBSb3V0ZXIoKS5kZWZhdWx0Um91dGVQYXJzZXIoKTsKICAgICAgcm91dGVyRGVsZWdhdGUgPSBSb3V0ZXIoKS5kZWxlZ2F0ZSgpOwogICAgICB3aGVuKCgpID0+IHJvdXRlcj8uZGVmYXVsdFJvdXRlUGFyc2VyKCkpCiAgICAgICAgICAudGhlblJldHVybihyb3V0ZUluZm9ybWF0aW9uUGFyc2VyKTsKICAgICAgd2hlbigoKSA9PiByb3V0ZXI/LmRlbGVnYXRlKAogICAgICAgICAgICAgIG5hdmlnYXRvck9ic2VydmVyczogYW55KG5hbWVkOiAnbmF2aWdhdG9yT2JzZXJ2ZXJzJykpKQogICAgICAgICAgLnRoZW5SZXR1cm4ocm91dGVyRGVsZWdhdGUpOwoKICAgICAgaG9tZSA9IG51bGw7CiAgICB9KTsKCiAgICBBcHAgYXBwKCkgPT4gQXBwKAogICAgICAgICAgcm91dGVyT2JzZXJ2ZXJCdWlsZGVyOiByb3V0ZXJPYnNlcnZlckJ1aWxkZXIsCiAgICAgICAgICBsb2NhbGU6IGxvY2FsZSwKICAgICAgICAgIHRoZW1lTW9kZTogdGhlbWVNb2RlLAogICAgICAgICAgcm91dGVyOiByb3V0ZXIsCiAgICAgICAgICBob21lOiBob21lLAogICAgICAgICk7CgogICAgdGVzdFdpZGdldHMoJ3JlbmRlcnMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHAgd2l0aCBjb3JyZWN0IHByb3BlcnRpZXMnLCAodGVzdGVyKSBhc3luYyB7CiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9IHRlc3Rlci53aWRnZXQ8e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1BcHA+KGZpbmQuYnlUeXBlKHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwKSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMsIGxvY2FsaXphdGlvbnNEZWxlZ2F0ZXMpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5zdXBwb3J0ZWRMb2NhbGVzLCBzdXBwb3J0ZWRMb2NhbGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVJbmZvcm1hdGlvblBhcnNlciwgcm91dGVJbmZvcm1hdGlvblBhcnNlcik7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlckRlbGVnYXRlLCByb3V0ZXJEZWxlZ2F0ZSk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsZSwgbG9jYWxlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAudGhlbWVNb2RlLCB0aGVtZU1vZGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBudWxsKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKCd1c2VzIGZhbGxiYWNrIHJvdXRlciB3aGVuIHJvdXRlciBpcyBudWxsJywgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIHJvdXRlciA9IG51bGw7CgogICAgICAvLyBBY3QKICAgICAgYXdhaXQgdGVzdGVyLnB1bXBXaWRnZXQoYXBwKCkpOwoKICAgICAgLy8gQXNzZXJ0CiAgICAgIGZpbmFsIHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAgPSB0ZXN0ZXIud2lkZ2V0PHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwPihmaW5kLmJ5VHlwZSh7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZUluZm9ybWF0aW9uUGFyc2VyLCBpc0E8RGVmYXVsdFJvdXRlUGFyc2VyPigpKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAucm91dGVyRGVsZWdhdGUsIGlzQTxBdXRvUm91dGVyRGVsZWdhdGU+KCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBudWxsKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKAogICAgICAgICd1c2VzIGZhbGxiYWNrIG9ic2VydmVyIGJ1aWxkZXIgd2hlbiByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgaXMgbnVsbCAnLAogICAgICAgICh0ZXN0ZXIpIGFzeW5jIHsKICAgICAgLy8gQXJyYW5nZQogICAgICByb3V0ZXJPYnNlcnZlckJ1aWxkZXIgPSBudWxsOwoKICAgICAgLy8gQWN0CiAgICAgIGF3YWl0IHRlc3Rlci5wdW1wV2lkZ2V0KGFwcCgpKTsKCiAgICAgIC8vIEFzc2VydAogICAgICB2ZXJpZnkoCiAgICAgICAgKCkgPT4gcm91dGVyIS5kZWxlZ2F0ZSgKICAgICAgICAgIG5hdmlnYXRvck9ic2VydmVyczoKICAgICAgICAgICAgICBBdXRvUm91dGVyRGVsZWdhdGUuZGVmYXVsdE5hdmlnYXRvck9ic2VydmVyc0J1aWxkZXIsCiAgICAgICAgKSwKICAgICAgKTsKICAgIH0pOwoKICAgIHRlc3RXaWRnZXRzKAogICAgICAgICdyZW5kZXJzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19IHdpdGggY29ycmVjdCBwcm9wZXJ0aWVzIHdoZW4gaG9tZSBpcyBub3QgbnVsbCcsCiAgICAgICAgKHRlc3RlcikgYXN5bmMgewogICAgICAvLyBBcnJhbmdlCiAgICAgIGhvbWUgPSBDb250YWluZXIoKTsKCiAgICAgIC8vIEFjdAogICAgICBhd2FpdCB0ZXN0ZXIucHVtcFdpZGdldChhcHAoKSk7CgogICAgICAvLyBBc3NlcnQKICAgICAgZmluYWwge3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcCA9CiAgICAgICAgICB0ZXN0ZXIud2lkZ2V0PHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19QXBwPihmaW5kLmJ5VHlwZSh7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUFwcCkpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5sb2NhbGl6YXRpb25zRGVsZWdhdGVzLCBsb2NhbGl6YXRpb25zRGVsZWdhdGVzKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAuc3VwcG9ydGVkTG9jYWxlcywgc3VwcG9ydGVkTG9jYWxlcyk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLnJvdXRlSW5mb3JtYXRpb25QYXJzZXIsIG51bGwpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5yb3V0ZXJEZWxlZ2F0ZSwgbnVsbCk7CiAgICAgIGV4cGVjdCh7e3Byb2plY3RfbmFtZS5jYW1lbENhc2UoKX19QXBwLmxvY2FsZSwgbG9jYWxlKTsKICAgICAgZXhwZWN0KHt7cHJvamVjdF9uYW1lLmNhbWVsQ2FzZSgpfX1BcHAudGhlbWVNb2RlLCB0aGVtZU1vZGUpOwogICAgICBleHBlY3Qoe3twcm9qZWN0X25hbWUuY2FtZWxDYXNlKCl9fUFwcC5ob21lLCBob21lKTsKICAgIH0pOwogIH0pOwp9Cnt7L3dpbmRvd3N9fQ==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "platform_app_feature_package",
  "description":
      "A brick generating a platform app package of a Rapid project.",
  "version": "0.1.0+1",
  "environment": {"mason": ">=0.1.0-dev.41 <0.1.0"},
  "readme": {
    "path": "README.md",
    "data":
        "IyBwbGF0Zm9ybV9hcHBfZmVhdHVyZV9wYWNrYWdlCgpbIVtQb3dlcmVkIGJ5IE1hc29uXShodHRwczovL2ltZy5zaGllbGRzLmlvL2VuZHBvaW50P3VybD1odHRwcyUzQSUyRiUyRnRpbnl1cmwuY29tJTJGbWFzb24tYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20vZmVsYW5nZWwvbWFzb24pCgpBIG5ldyBicmljayBjcmVhdGVkIHdpdGggdGhlIE1hc29uIENMSS4KCl9HZW5lcmF0ZWQgYnkgW21hc29uXVsxXSDwn6exXwoKIyMgR2V0dGluZyBTdGFydGVkIPCfmoAKClRoaXMgaXMgYSBzdGFydGluZyBwb2ludCBmb3IgYSBuZXcgYnJpY2suCkEgZmV3IHJlc291cmNlcyB0byBnZXQgeW91IHN0YXJ0ZWQgaWYgdGhpcyBpcyB5b3VyIGZpcnN0IGJyaWNrIHRlbXBsYXRlOgoKLSBbT2ZmaWNpYWwgTWFzb24gRG9jdW1lbnRhdGlvbl1bMl0KLSBbQ29kZSBnZW5lcmF0aW9uIHdpdGggTWFzb24gQmxvZ11bM10KLSBbVmVyeSBHb29kIExpdmVzdHJlYW06IEZlbGl4IEFuZ2Vsb3YgRGVtb3MgTWFzb25dWzRdCgpbMV06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbgpbMl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mZWxhbmdlbC9tYXNvbi90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXNvbl9jbGkjcmVhZG1lClszXTogaHR0cHM6Ly92ZXJ5Z29vZC52ZW50dXJlcy9ibG9nL2NvZGUtZ2VuZXJhdGlvbi13aXRoLW1hc29uCls0XTogaHR0cHM6Ly95b3V0dS5iZS9HNFBUakE2dHBUVQo=",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMCsxCgotIFRPRE86IERlc2NyaWJlIGluaXRpYWwgcmVsZWFzZS4K",
    "type": "text"
  },
  "license": {
    "path": "LICENSE",
    "data": "VE9ETzogQWRkIHlvdXIgbGljZW5zZSBoZXJlLgo=",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string", "description": "The project name"},
    "example": {
      "type": "boolean",
      "description":
          "Wheter the project contains example features and their tests"
    },
    "android": {
      "type": "boolean",
      "description": "The project supports the Android platform"
    },
    "ios": {
      "type": "boolean",
      "description": "The project supports the iOS platform"
    },
    "web": {
      "type": "boolean",
      "description": "The project supports the Web platform"
    },
    "linux": {
      "type": "boolean",
      "description": "The project supports the Linux platform"
    },
    "macos": {
      "type": "boolean",
      "description": "The project supports the macOS platform"
    },
    "windows": {
      "type": "boolean",
      "description": "The project supports the Windows platform"
    },
    "default_language": {
      "type": "string",
      "description": "The default language of the feature"
    },
    "languages": {
      "type": "array",
      "description": "The languages of the feature"
    }
  }
});
