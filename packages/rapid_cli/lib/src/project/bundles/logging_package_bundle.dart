// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final loggingPackageBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": ".gitignore",
      "data":
          "IyBNaXNjZWxsYW5lb3VzCiouY2xhc3MKKi5sb2cKKi5weWMKKi5zd3AKLkRTX1N0b3JlCi5hdG9tLwouYnVpbGRsb2cvCi5oaXN0b3J5Ci5zdm4vCm1pZ3JhdGVfd29ya2luZ19kaXIvCgojIEludGVsbGlKIHJlbGF0ZWQKKi5pbWwKKi5pcHIKKi5pd3MKLmlkZWEvCgojIEZpbGVzIGFuZCBkaXJlY3RvcmllcyBjcmVhdGVkIGJ5IHB1Yi4KLmRhcnRfdG9vbC8KLnBhY2thZ2VzCgojIENvbnZlbnRpb25hbCBkaXJlY3RvcnkgZm9yIGJ1aWxkIG91dHB1dHMuCmJ1aWxkLwoKIyBDb252ZW50aW9uYWwgZGlyZWN0b3J5IGZvciBjb3ZlcmFnZSBvdXRwdXRzLgovY292ZXJhZ2UK",
      "type": "text"
    },
    {
      "path": "analysis_options.yaml",
      "data": "aW5jbHVkZTogLi4vLi4vLi4vYW5hbHlzaXNfb3B0aW9ucy55YW1sCg==",
      "type": "text"
    },
    {
      "path": "CHANGELOG.md",
      "data": "IyMgMC4xLjAKCi0gSW5pdGlhbCB2ZXJzaW9uLgo=",
      "type": "text"
    },
    {
      "path": "dart_test.yaml",
      "data":
          "dGFnczoKICBidWlsZF92ZXJpZnk6CiAgICBza2lwOiAiQnVpbGQgdmVyaWZ5IHRlc3Qgc2hvdWxkIGJlIHJ1biBpbiBwYXJhbGxlbCB3aXRoIG90aGVyIHVuaXQgdGVzdHMiCg==",
      "type": "text"
    },
    {
      "path": "lib/src/injection.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmluamVjdGFibGUvaW5qZWN0YWJsZS5kYXJ0JzsKCi8vLyBTZXR1cCBpbmplY3RhYmxlIHBhY2thZ2Ugd2hpY2ggZ2VuZXJhdGVzIGRlcGVuZGVuY3kgaW5qZWN0aW9uIGNvZGUuCi8vLwovLy8gRm9yIG1vcmUgaW5mbyBzZWU6IGh0dHBzOi8vcHViLmRldi9wYWNrYWdlcy9pbmplY3RhYmxlI2luY2x1ZGluZy1taWNyb3BhY2thZ2VzLWFuZC1leHRlcm5hbC1tb2R1bGVzCkBJbmplY3RhYmxlSW5pdC5taWNyb1BhY2thZ2UoKQp2b2lkIGluaXRNaWNyb1BhY2thZ2UoKSB7fQo=",
      "type": "text"
    },
    {
      "path": "lib/src/injection.module.dart",
      "data":
          "Ly9AR2VuZXJhdGVkTWljcm9Nb2R1bGU7e3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnaW5nUGFja2FnZU1vZHVsZTtwYWNrYWdlOnt7cHJvamVjdF9uYW1lfX1fbG9nZ2luZy9zcmMvaW5qZWN0aW9uLm1vZHVsZS5kYXJ0Ci8vIEdFTkVSQVRFRCBDT0RFIC0gRE8gTk9UIE1PRElGWSBCWSBIQU5ECi8vIGlnbm9yZV9mb3JfZmlsZTogdHlwZT1saW50Ci8vIGNvdmVyYWdlOmlnbm9yZS1maWxlCgovLyBpZ25vcmVfZm9yX2ZpbGU6IG5vX2xlYWRpbmdfdW5kZXJzY29yZXNfZm9yX2xpYnJhcnlfcHJlZml4ZXMKaW1wb3J0ICdkYXJ0OmFzeW5jJyBhcyBfaTI7CgppbXBvcnQgJ3BhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9sb2dnaW5nL3NyYy9sb2dnZXIuZGFydCcgYXMgX2kzOwppbXBvcnQgJ3BhY2thZ2U6aW5qZWN0YWJsZS9pbmplY3RhYmxlLmRhcnQnIGFzIF9pMTsKCmNvbnN0IFN0cmluZyBfZGV2ID0gJ2Rldic7CmNvbnN0IFN0cmluZyBfdGVzdCA9ICd0ZXN0JzsKY29uc3QgU3RyaW5nIF9wcm9kID0gJ3Byb2QnOwoKY2xhc3Mge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnaW5nUGFja2FnZU1vZHVsZSBleHRlbmRzIF9pMS5NaWNyb1BhY2thZ2VNb2R1bGUgewogIC8vIGluaXRpYWxpemVzIHRoZSByZWdpc3RyYXRpb24gb2YgbWFpbi1zY29wZSBkZXBlbmRlbmNpZXMgaW5zaWRlIG9mIEdldEl0CiAgQG92ZXJyaWRlCiAgX2kyLkZ1dHVyZU9yPHZvaWQ+IGluaXQoX2kxLkdldEl0SGVscGVyIGdoKSB7CiAgICBnaC5sYXp5U2luZ2xldG9uPF9pMy57e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlcj4oCiAgICAgICgpID0+IF9pMy57e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlckRldmVsb3BtZW50KCksCiAgICAgIHJlZ2lzdGVyRm9yOiB7X2Rldn0sCiAgICApOwogICAgZ2gubGF6eVNpbmdsZXRvbjxfaTMue3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnZXI+KAogICAgICAoKSA9PiBfaTMue3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnZXJUZXN0KCksCiAgICAgIHJlZ2lzdGVyRm9yOiB7X3Rlc3R9LAogICAgKTsKICAgIGdoLmxhenlTaW5nbGV0b248X2kzLnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyPigKICAgICAgKCkgPT4gX2kzLnt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyUHJvZHVjdGlvbigpLAogICAgICByZWdpc3RlckZvcjoge19wcm9kfSwKICAgICk7CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/src/logger.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmRldmVsb3Blcic7CgppbXBvcnQgJ3BhY2thZ2U6aW5qZWN0YWJsZS9pbmplY3RhYmxlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6bWV0YS9tZXRhLmRhcnQnOwoKLy8vIFRoZSBsb2cgbGV2ZWwgb2YgYW4gW3t7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyXS4KZW51bSBMZXZlbCB7CiAgdmVyYm9zZSgwKSwKICBkZWJ1Zyg1MDApLAogIGluZm8oODAwKSwKICB3YXJuaW5nKDkwMCksCiAgZXJyb3IoMTAwMCksCiAgd3RmKDEyMDApLAogIG5vdGhpbmcoMjAwMCk7CgogIGNvbnN0IExldmVsKHRoaXMudmFsdWUpOwoKICBmaW5hbCBpbnQgdmFsdWU7CgogIGJvb2wgb3BlcmF0b3IgPj0oTGV2ZWwgbGV2ZWwpID0+IHZhbHVlID49IGxldmVsLnZhbHVlOwp9CgovLy8gU2lnbmF0dXJlIG9mIFtsb2ddLgp0eXBlZGVmIExvZ0NvbW1hbmQgPSB2b2lkIEZ1bmN0aW9uKAogIFN0cmluZyBtZXNzYWdlLCB7CiAgaW50IGxldmVsLAogIE9iamVjdD8gZXJyb3IsCiAgU3RhY2tUcmFjZT8gc3RhY2tUcmFjZSwKfSk7CgovLy8gVGhlIGxvZ2dlciBvZiB0aGUgYXBwbGljYXRpb24uCmFic3RyYWN0IGNsYXNzIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyIHsKICB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlcih0aGlzLmxldmVsKTsKCiAgZmluYWwgTGV2ZWwgbGV2ZWw7CgogIEB2aXNpYmxlRm9yVGVzdGluZwogIExvZ0NvbW1hbmQ/IGxvZ0NvbW1hbmRPdmVycmlkZXM7CgogIExvZ0NvbW1hbmQgZ2V0IF9sb2dDb21tYW5kID0+IGxvZ0NvbW1hbmRPdmVycmlkZXMgPz8gbG9nOwoKICAvLy8gTG9nIGEgbWVzc2FnZSBhdCBsZXZlbCBbTGV2ZWwudmVyYm9zZV0uCiAgdm9pZCB2ZXJib3NlKGR5bmFtaWMgbWVzc2FnZSwgW2R5bmFtaWMgZXJyb3IsIFN0YWNrVHJhY2U/IHN0YWNrVHJhY2VdKSB7CiAgICBpZiAoTGV2ZWwudmVyYm9zZSA+PSBsZXZlbCkgewogICAgICBfbG9nQ29tbWFuZCgKICAgICAgICAnW3ZlcmJvc2VdICRtZXNzYWdlJywKICAgICAgICBsZXZlbDogTGV2ZWwudmVyYm9zZS52YWx1ZSwKICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgc3RhY2tUcmFjZTogc3RhY2tUcmFjZSwKICAgICAgKTsKICAgIH0KICB9CgogIC8vLyBMb2cgYSBtZXNzYWdlIGF0IGxldmVsIFtMZXZlbC5kZWJ1Z10uCiAgdm9pZCBkZWJ1ZyhkeW5hbWljIG1lc3NhZ2UsIFtkeW5hbWljIGVycm9yLCBTdGFja1RyYWNlPyBzdGFja1RyYWNlXSkgewogICAgaWYgKExldmVsLmRlYnVnID49IGxldmVsKSB7CiAgICAgIF9sb2dDb21tYW5kKAogICAgICAgICdbZGVidWddICRtZXNzYWdlJywKICAgICAgICBsZXZlbDogTGV2ZWwuZGVidWcudmFsdWUsCiAgICAgICAgZXJyb3I6IGVycm9yLAogICAgICAgIHN0YWNrVHJhY2U6IHN0YWNrVHJhY2UsCiAgICAgICk7CiAgICB9CiAgfQoKICAvLy8gTG9nIGEgbWVzc2FnZSBhdCBsZXZlbCBbTGV2ZWwuaW5mb10uCiAgdm9pZCBpbmZvKGR5bmFtaWMgbWVzc2FnZSwgW2R5bmFtaWMgZXJyb3IsIFN0YWNrVHJhY2U/IHN0YWNrVHJhY2VdKSB7CiAgICBpZiAoTGV2ZWwuaW5mbyA+PSBsZXZlbCkgewogICAgICBfbG9nQ29tbWFuZCgKICAgICAgICAnW2luZm9dICRtZXNzYWdlJywKICAgICAgICBsZXZlbDogTGV2ZWwuaW5mby52YWx1ZSwKICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgc3RhY2tUcmFjZTogc3RhY2tUcmFjZSwKICAgICAgKTsKICAgIH0KICB9CgogIC8vLyBMb2cgYSBtZXNzYWdlIGF0IGxldmVsIFtMZXZlbC53YXJuaW5nXS4KICB2b2lkIHdhcm5pbmcoZHluYW1pYyBtZXNzYWdlLCBbZHluYW1pYyBlcnJvciwgU3RhY2tUcmFjZT8gc3RhY2tUcmFjZV0pIHsKICAgIGlmIChMZXZlbC53YXJuaW5nID49IGxldmVsKSB7CiAgICAgIF9sb2dDb21tYW5kKAogICAgICAgICdbd2FybmluZ10gJG1lc3NhZ2UnLAogICAgICAgIGxldmVsOiBMZXZlbC53YXJuaW5nLnZhbHVlLAogICAgICAgIGVycm9yOiBlcnJvciwKICAgICAgICBzdGFja1RyYWNlOiBzdGFja1RyYWNlLAogICAgICApOwogICAgfQogIH0KCiAgLy8vIExvZyBhIG1lc3NhZ2UgYXQgbGV2ZWwgW0xldmVsLmVycm9yXS4KICB2b2lkIGVycm9yKGR5bmFtaWMgbWVzc2FnZSwgW2R5bmFtaWMgZXJyb3IsIFN0YWNrVHJhY2U/IHN0YWNrVHJhY2VdKSB7CiAgICBpZiAoTGV2ZWwuZXJyb3IgPj0gbGV2ZWwpIHsKICAgICAgX2xvZ0NvbW1hbmQoCiAgICAgICAgJ1tlcnJvcl0gJG1lc3NhZ2UnLAogICAgICAgIGxldmVsOiBMZXZlbC5lcnJvci52YWx1ZSwKICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgc3RhY2tUcmFjZTogc3RhY2tUcmFjZSwKICAgICAgKTsKICAgIH0KICB9CgogIC8vLyBMb2cgYSBtZXNzYWdlIGF0IGxldmVsIFtMZXZlbC53dGZdLgogIHZvaWQgd3RmKGR5bmFtaWMgbWVzc2FnZSwgW2R5bmFtaWMgZXJyb3IsIFN0YWNrVHJhY2U/IHN0YWNrVHJhY2VdKSB7CiAgICBpZiAoTGV2ZWwud3RmID49IGxldmVsKSB7CiAgICAgIF9sb2dDb21tYW5kKAogICAgICAgICdbd3RmXSAkbWVzc2FnZScsCiAgICAgICAgbGV2ZWw6IExldmVsLnd0Zi52YWx1ZSwKICAgICAgICBlcnJvcjogZXJyb3IsCiAgICAgICAgc3RhY2tUcmFjZTogc3RhY2tUcmFjZSwKICAgICAgKTsKICAgIH0KICB9Cn0KCi8vLyBJbiBkZXZlbG9wbWVudCBtb2RlIHdlIGxvZyBkZWJ1ZyBsZXZlbCBtZXNzYWdlcyB0bwovLy8gcHJvdmlkZSB0aGUgZGV2ZWxvcGVyIGEgZ29vZCBvdmVydmlldyBvZiB0aGUgYXBwbGljYXRpb24uCkBkZXYKQExhenlTaW5nbGV0b24oYXM6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyKQpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlckRldmVsb3BtZW50IGV4dGVuZHMge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnZXIgewogIHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyRGV2ZWxvcG1lbnQoKSA6IHN1cGVyKExldmVsLmRlYnVnKTsKfQoKLy8vIEluIHRlc3QgbW9kZSB3ZSBsb2cgZXZlcnl0aGluZyB0byBnZXQgYSBsb3cgbGV2ZWwgb3ZlcnZpZXcKLy8vIG9mIHRoZSBhcHBsaWNhdGlvbiBpbiBhIHByb2R1Y3Rpb24tbGlrZSBlbnZpcm9ubWVudC4KQHRlc3QKQExhenlTaW5nbGV0b24oYXM6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyKQpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlclRlc3QgZXh0ZW5kcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlciB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnZXJUZXN0KCkgOiBzdXBlcihMZXZlbC52ZXJib3NlKTsKfQoKLy8vIEluIHByb2R1Y3Rpb24gbW9kZSB3ZSBsb2cgbm90aGluZyBmb3Igc2VjdXJpdHkgcmVhc29ucy4KQHByb2QKQExhenlTaW5nbGV0b24oYXM6IHt7cHJvamVjdF9uYW1lLnBhc2NhbENhc2UoKX19TG9nZ2VyKQpjbGFzcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlclByb2R1Y3Rpb24gZXh0ZW5kcyB7e3Byb2plY3RfbmFtZS5wYXNjYWxDYXNlKCl9fUxvZ2dlciB7CiAge3twcm9qZWN0X25hbWUucGFzY2FsQ2FzZSgpfX1Mb2dnZXJQcm9kdWN0aW9uKCkgOiBzdXBlcihMZXZlbC5kZWJ1Zyk7Cn0K",
      "type": "text"
    },
    {
      "path": "lib/{{project_name}}_logging.dart",
      "data":
          "Ly8vIExvZ2dpbmcgZm9yIHt7cHJvamVjdF9uYW1lLnRpdGxlQ2FzZSgpfX0uCi8vLwovLy8gVG8gdXNlLCBpbXBvcnQgYHBhY2thZ2U6e3twcm9qZWN0X25hbWV9fV9sb2dnaW5nL3t7cHJvamVjdF9uYW1lfX1fbG9nZ2luZy5kYXJ0YC4KbGlicmFyeSB7e3Byb2plY3RfbmFtZX19X2xvZ2dpbmc7CgpleHBvcnQgJ3NyYy9pbmplY3Rpb24ubW9kdWxlLmRhcnQnOwpleHBvcnQgJ3NyYy9sb2dnZXIuZGFydCc7Cg==",
      "type": "text"
    },
    {
      "path": "pubspec.yaml",
      "data":
          "bmFtZToge3twcm9qZWN0X25hbWV9fV9sb2dnaW5nCmRlc2NyaXB0aW9uOiBMb2dnaW5nIG9mIHt7cHJvamVjdF9uYW1lLnRpdGxlQ2FzZSgpfX0uCnZlcnNpb246IDAuMS4wCnB1Ymxpc2hfdG86IG5vbmUKCmVudmlyb25tZW50OgogIHNkazogIj49My4xLjAgPDQuMC4wIgoKZGVwZW5kZW5jaWVzOgogIGluamVjdGFibGU6IF4yLjMuMAogIG1ldGE6IF4xLjkuMQoKZGV2X2RlcGVuZGVuY2llczoKICBidWlsZF9ydW5uZXI6IF4yLjQuNgogIGJ1aWxkX3ZlcmlmeTogXjMuMS4wCiAgaW5qZWN0YWJsZV9nZW5lcmF0b3I6IF4yLjQuMAogIG1vY2t0YWlsOiBeMS4wLjAKICB0ZXN0OiBeMS4yNC42Cg==",
      "type": "text"
    },
    {
      "path": "README.md",
      "data":
          "IyMgTG9nZ2luZyBQYWNrYWdlCgojIyMgUmVzcG9uc2liaWxpdGllcwoK8J+OryBQcm92aWRlIGEgbG9nZ2VyLgoKRm9yIG1vcmUgaW5mb3JtYXRpb24gY2xpY2sgW2hlcmVdWzFdLgoKWzFdOiBodHRwczovL2RvY3MucGFnZS9qdGRMYWIvcmFwaWQvYXJjaGl0ZWN0dXJlL2FwcC1tb2R1bGUjbG9nZ2luZy1wYWNrYWdlCg==",
      "type": "text"
    },
    {
      "path": "test/ensure_build_test.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmJ1aWxkX3ZlcmlmeS9idWlsZF92ZXJpZnkuZGFydCc7CmltcG9ydCAncGFja2FnZTp0ZXN0L3Rlc3QuZGFydCc7Cgp2b2lkIG1haW4oKSB7CiAgdGVzdCgKICAgICdlbnN1cmVfYnVpbGQnLAogICAgKCkgYXN5bmMgPT4gZXhwZWN0QnVpbGRDbGVhbigKICAgICAgcGFja2FnZVJlbGF0aXZlRGlyZWN0b3J5OgogICAgICAgICAgJ3BhY2thZ2VzL3t7cHJvamVjdF9uYW1lfX0ve3twcm9qZWN0X25hbWV9fV9sb2dnaW5nJywKICAgICksCiAgICB0aW1lb3V0OiBjb25zdCBUaW1lb3V0LmZhY3Rvcig0KSwKICAgIHRhZ3M6IFsnYnVpbGRfdmVyaWZ5J10sCiAgKTsKfQo=",
      "type": "text"
    },
    {
      "path": "test/mocks.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOm1vY2t0YWlsL21vY2t0YWlsLmRhcnQnOwoKLy8gaWdub3JlOiBvbmVfbWVtYmVyX2Fic3RyYWN0cwphYnN0cmFjdCBjbGFzcyBfTG9nQ29tbWFuZCB7CiAgdm9pZCBjYWxsKAogICAgU3RyaW5nIG1lc3NhZ2UsIHsKICAgIGludCBsZXZlbCwKICAgIE9iamVjdD8gZXJyb3IsCiAgICBTdGFja1RyYWNlPyBzdGFja1RyYWNlLAogIH0pOwp9CgpjbGFzcyBNb2NrTG9nQ29tbWFuZCBleHRlbmRzIE1vY2sgaW1wbGVtZW50cyBfTG9nQ29tbWFuZCB7CiAgTW9ja0xvZ0NvbW1hbmQoKSB7CiAgICB3aGVuKAogICAgICAoKSA9PiBjYWxsKAogICAgICAgIGFueSgpLAogICAgICAgIGxldmVsOiBhbnkobmFtZWQ6ICdsZXZlbCcpLAogICAgICAgIGVycm9yOiBhbnkobmFtZWQ6ICdlcnJvcicpLAogICAgICAgIHN0YWNrVHJhY2U6IGFueShuYW1lZDogJ3N0YWNrVHJhY2UnKSwKICAgICAgKSwKICAgICkudGhlblJldHVybihudWxsKTsKICB9Cn0KCmNsYXNzIE1vY2tTdGFja1RyYWNlIGV4dGVuZHMgTW9jayBpbXBsZW1lbnRzIFN0YWNrVHJhY2Uge30K",
      "type": "text"
    },
    {
      "path": "test/src/logger_test.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "logging_package",
  "description": "A brick generating the logging package of a Rapid project.",
  "version": "0.1.0",
  "environment": {"mason": ">=0.1.0-dev <0.1.0"},
  "readme": {
    "path": "README.md",
    "data": "IyBsb2dnaW5nX3BhY2thZ2UKClRPRE8K",
    "type": "text"
  },
  "changelog": {
    "path": "CHANGELOG.md",
    "data": "IyAwLjEuMAoKLSBUT0RPOiBEZXNjcmliZSBpbml0aWFsIHJlbGVhc2UuCg==",
    "type": "text"
  },
  "vars": {
    "project_name": {"type": "string"}
  }
});
