name: project_web

packages:
  - packages/**

command:
  bootstrap:
    # https://github.com/dart-lang/pub/issues/3404)
    runPubGetInParallel: false

ide:
  intellij: false

# TODO clean scripts and update to melos 3.0.0 via https://melos.invertase.dev/guides/migrations
scripts:
  #  postbootstrap: melos run setup-pre-commit-hook
  postclean: |
    melos exec -c 3 -- "flutter clean"

#    rm -r node_modules && \
#    rm commitlint.config.js && \
#    rm package-lock.json && \
#    rm package.json && \
#    melos exec -c 3 -- "flutter clean"

#   setup-pre-commit-hook:
#     run: |
#       npm install --save-dev @commitlint/{cli,config-conventional} && \
#       echo "module.exports = { extends: ['@commitlint/config-conventional'] };" > commitlint.config.js && \
#       npm install husky --save-dev
#       npx husky install
#     description: |
#       Set up pre commit hook to ensure Conventional Commits (https://www.conventionalcommits.org/en/v1.0.0/) via commitlint (https://www.npmjs.com/package/commitlint).
#        - Requires `node` (can be installed via Brew on macOS).

  analyze:
    run: flutter analyze
    description: |
      Analyze all packages.

  format:
    run: dart format . --fix
    description: |
      Format all packages.

  build:all:
    run: |
      melos run build --no-select
    description: |
      Run code gen in all packages.

  build:
    run: |
      melos exec -- "flutter pub run build_runner build --delete-conflicting-outputs"
    description: |
      Run code gen in a package.
    select-package:
      dir-exists:
        - lib

  gen-l10n:all:
    run: |
      melos run gen-l10n --no-select
    description: |
      (Re)-generate localizations in all packages.

  gen-l10n:
    run: |
      melos exec -- "flutter gen-l10n --format"
    description: |
      (Re)-generate localizations in a package.
    select-package:
      dir-exists:
        - lib

  coverage:all:
    run: |
      melos run coverage --no-select
    description: |
      Print coverage of all packages.

  coverage:
    run: |
      melos exec -- "remove_from_coverage -f MELOS_PACKAGE_PATH/coverage/lcov.info -r '.freezed.dart$' -r '.g.dart$' -r '.config.dart$' -r '.module.dart$' -r '_localizations.dart$' -r '_localizations_[a-z]+.dart$' -r '.gr.dart$' -r '.tailor.dart$'" && \
      melos exec -- "test_cov_console -t"
    description: |
      Print coverage of a package.
    select-package:
      file-exists:
        - coverage/lcov.info

  test:unit:all:
    run: |
      melos run test:unit:root --no-select && \
      melos run test:unit:di --no-select && \
      melos run test:unit:logging --no-select && \
      melos run test:unit:domain --no-select && \
      melos run test:unit:infrastructure --no-select && \
      melos run test:unit:ui --no-select && \
      melos run test:unit:android --no-select && \
      melos run test:unit:ios --no-select && \
      melos run test:unit:linux --no-select && \
      melos run test:unit:macos --no-select && \
      melos run test:unit:web --no-select && \
      melos run test:unit:windows --no-select
    description: |
      Run all unit + widget tests available.

  test:unit:root:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the root package.
    select-package:
      scope: "project_web"
      dir-exists:
        - test

  test:unit:di:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the dependency injection package.
    select-package:
      scope: "project_web_di"
      dir-exists:
        - test

  test:unit:logging:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the logging package.
    select-package:
      scope: "project_web_logging"
      dir-exists:
        - test

  test:unit:domain:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the domain package.
    select-package:
      scope: "project_web_domain"
      dir-exists:
        - test

  test:unit:infrastructure:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the infrastructure package.
    select-package:
      scope: "project_web_infrastructure"
      dir-exists:
        - test

  test:unit:ui:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in the platform independent ui package.
    select-package:
      scope: "project_web_ui"
      dir-exists:
        - test

  test:unit:android:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all Android packages.
    select-package:
      scope: "*android*"
      dir-exists:
        - test

  test:unit:ios:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all iOS packages.
    select-package:
      scope: "*ios*"
      dir-exists:
        - test

  test:unit:linux:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all Linux packages.
    select-package:
      scope: "*linux*"
      dir-exists:
        - test

  test:unit:macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all macOS packages.
    select-package:
      scope: "*macos*"
      dir-exists:
        - test

  test:unit:web:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all Web packages.
    select-package:
      scope: "*web*"
      dir-exists:
        - test

  test:unit:windows:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` in all Windows packages.
    select-package:
      scope: "*windows*"
      dir-exists:
        - test

  test:coverage:unit:all:
    run: |
      melos run test:coverage:unit:root --no-select && \
      melos run test:coverage:unit:di --no-select && \
      melos run test:coverage:unit:logging --no-select && \
      melos run test:coverage:unit:domain --no-select && \
      melos run test:coverage:unit:infrastructure --no-select && \
      melos run test:coverage:unit:ui --no-select && \
      melos run test:coverage:unit:android --no-select && \
      melos run test:coverage:unit:ios --no-select && \
      melos run test:coverage:unit:linux --no-select && \
      melos run test:coverage:unit:macos --no-select && \
      melos run test:coverage:unit:web --no-select && \
      melos run test:coverage:unit:windows --no-select
    description: |
      Run all unit + widget tests available with coverage.

  test:coverage:unit:root:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the root package.
    select-package:
      scope: "project_web"
      dir-exists:
        - test

  test:coverage:unit:di:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the dependency injection package.
    select-package:
      scope: "project_web_di"
      dir-exists:
        - test

  test:coverage:unit:logging:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the logging package.
    select-package:
      scope: "project_web_logging"
      dir-exists:
        - test

  test:coverage:unit:domain:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the domain package.
    select-package:
      scope: "project_web_domain"
      dir-exists:
        - test

  test:coverage:unit:infrastructure:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the infrastructure package.
    select-package:
      scope: "project_web_infrastructure"
      dir-exists:
        - test

  test:coverage:unit:ui:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in the platform independent ui package.
    select-package:
      scope: "project_web_ui"
      dir-exists:
        - test

  test:coverage:unit:android:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all Android packages.
    select-package:
      scope: "*android*"
      dir-exists:
        - test

  test:coverage:unit:ios:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all iOS packages.
    select-package:
      scope: "*ios*"
      dir-exists:
        - test

  test:coverage:unit:linux:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all Linux packages.
    select-package:
      scope: "*linux*"
      dir-exists:
        - test

  test:coverage:unit:macos:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all macOS packages.
    select-package:
      scope: "*macos*"
      dir-exists:
        - test

  test:coverage:unit:web:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all Web packages.
    select-package:
      scope: "*web*"
      dir-exists:
        - test

  test:coverage:unit:windows:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test --coverage" && \
        melos exec -- "test_cov_console -t"
    description: Run `flutter test --coverage` in all Windows packages.
    select-package:
      scope: "*windows*"
      dir-exists:
        - test
